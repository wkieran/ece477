
rick_spi_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004290  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004588  08004588  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004590  08004590  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000070  08004608  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004608  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ae4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d08  00000000  00000000  00029b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025d5  00000000  00000000  0002c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad99  00000000  00000000  0002efbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cafd0  00000000  00000000  00039d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104d26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a88  00000000  00000000  00104d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800443c 	.word	0x0800443c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	0800443c 	.word	0x0800443c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000514:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d013      	beq.n	8000548 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000528:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00b      	beq.n	8000548 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	e000      	b.n	8000534 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000532:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000534:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fc54 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f826 	bl	80005b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000564:	f000 f892 	bl	800068c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f980 	bl	800086c <MX_GPIO_Init>
  MX_DMA_Init();
 800056c:	f000 f948 	bl	8000800 <MX_DMA_Init>
  MX_SPI3_Init();
 8000570:	f000 f910 	bl	8000794 <MX_SPI3_Init>
  MX_I2S1_Init();
 8000574:	f000 f8b2 	bl	80006dc <MX_I2S1_Init>
  MX_I2S2_Init();
 8000578:	f000 f8de 	bl	8000738 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f000 fcb4 	bl	8000eec <HAL_Delay>
  printf("Hello\n");
 8000584:	4806      	ldr	r0, [pc, #24]	; (80005a0 <main+0x48>)
 8000586:	f003 fac9 	bl	8003b1c <puts>

//  init_sdcard_spi();
  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
 800058a:	2264      	movs	r2, #100	; 0x64
 800058c:	4905      	ldr	r1, [pc, #20]	; (80005a4 <main+0x4c>)
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <main+0x50>)
 8000590:	f001 fca0 	bl	8001ed4 <HAL_I2S_Receive_DMA>
  HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
 8000594:	2264      	movs	r2, #100	; 0x64
 8000596:	4903      	ldr	r1, [pc, #12]	; (80005a4 <main+0x4c>)
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <main+0x54>)
 800059a:	f001 fbf3 	bl	8001d84 <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x46>
 80005a0:	08004454 	.word	0x08004454
 80005a4:	20000234 	.word	0x20000234
 80005a8:	200000d4 	.word	0x200000d4
 80005ac:	2000008c 	.word	0x2000008c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2234      	movs	r2, #52	; 0x34
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fa36 	bl	8003a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <SystemClock_Config+0xd4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a29      	ldr	r2, [pc, #164]	; (8000684 <SystemClock_Config+0xd4>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <SystemClock_Config+0xd4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <SystemClock_Config+0xd8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <SystemClock_Config+0xd8>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <SystemClock_Config+0xd8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000624:	2308      	movs	r3, #8
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000628:	2378      	movs	r3, #120	; 0x78
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fea5 	bl	800338c <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000648:	f000 f97e 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2103      	movs	r1, #3
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fe8c 	bl	8002388 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000676:	f000 f967 	bl	8000948 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b098      	sub	sp, #96	; 0x60
 8000690:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	225c      	movs	r2, #92	; 0x5c
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f003 f9c9 	bl	8003a30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_I2S_APB2;
 800069e:	2303      	movs	r3, #3
 80006a0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006a2:	23c0      	movs	r3, #192	; 0xc0
 80006a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 80006aa:	2310      	movs	r3, #16
 80006ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 80006ba:	2300      	movs	r3, #0
 80006bc:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80006be:	2300      	movs	r3, #0
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 ff45 	bl	8002554 <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80006d0:	f000 f93a 	bl	8000948 <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3760      	adds	r7, #96	; 0x60
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_I2S1_Init+0x54>)
 80006e2:	4a14      	ldr	r2, [pc, #80]	; (8000734 <MX_I2S1_Init+0x58>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2S1_Init+0x54>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_I2S1_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2S1_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_I2S1_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_I2S1_Init+0x54>)
 8000702:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000706:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2S1_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_I2S1_Init+0x54>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2S1_Init+0x54>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_I2S1_Init+0x54>)
 800071c:	f001 fa3a 	bl	8001b94 <HAL_I2S_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 8000726:	f000 f90f 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000008c 	.word	0x2000008c
 8000734:	40013000 	.word	0x40013000

08000738 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_I2S2_Init+0x54>)
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <MX_I2S2_Init+0x58>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2S2_Init+0x54>)
 8000744:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000748:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_I2S2_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2S2_Init+0x54>)
 8000752:	2201      	movs	r2, #1
 8000754:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_I2S2_Init+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_I2S2_Init+0x54>)
 800075e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000762:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2S2_Init+0x54>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_I2S2_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2S2_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_I2S2_Init+0x54>)
 8000778:	f001 fa0c 	bl	8001b94 <HAL_I2S_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000782:	f000 f8e1 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000d4 	.word	0x200000d4
 8000790:	40003800 	.word	0x40003800

08000794 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_SPI3_Init+0x64>)
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_SPI3_Init+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007c8:	2238      	movs	r2, #56	; 0x38
 80007ca:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007e0:	220a      	movs	r2, #10
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_SPI3_Init+0x64>)
 80007e6:	f003 f86f 	bl	80038c8 <HAL_SPI_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80007f0:	f000 f8aa 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200001dc 	.word	0x200001dc
 80007fc:	40003c00 	.word	0x40003c00

08000800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_DMA_Init+0x68>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <MX_DMA_Init+0x68>)
 8000810:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_DMA_Init+0x68>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_DMA_Init+0x68>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <MX_DMA_Init+0x68>)
 800082c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_DMA_Init+0x68>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	200e      	movs	r0, #14
 8000844:	f000 fc51 	bl	80010ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000848:	200e      	movs	r0, #14
 800084a:	f000 fc6a 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	203b      	movs	r0, #59	; 0x3b
 8000854:	f000 fc49 	bl	80010ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000858:	203b      	movs	r0, #59	; 0x3b
 800085a:	f000 fc62 	bl	8001122 <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_GPIO_Init+0x9c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <MX_GPIO_Init+0x9c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_GPIO_Init+0x9c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a18      	ldr	r2, [pc, #96]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a11      	ldr	r2, [pc, #68]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <MX_GPIO_Init+0xa0>)
 80008de:	f001 f93f 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0xa0>)
 80008fc:	f000 ff9c 	bl	8001838 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000

08000910 <_write>:




int _write(int file, char *ptr, int len)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e009      	b.n	8000936 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	60ba      	str	r2, [r7, #8]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fdec 	bl	8000508 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	429a      	cmp	r2, r3
 800093c:	dbf1      	blt.n	8000922 <_write+0x12>
  }
  return len;
 800093e:	687b      	ldr	r3, [r7, #4]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a63      	ldr	r2, [pc, #396]	; (8000b50 <HAL_I2S_MspInit+0x1ac>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d15d      	bne.n	8000a82 <HAL_I2S_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
 80009ca:	4b62      	ldr	r3, [pc, #392]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a61      	ldr	r2, [pc, #388]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 80009d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b5f      	ldr	r3, [pc, #380]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	4b5b      	ldr	r3, [pc, #364]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a5a      	ldr	r2, [pc, #360]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b58      	ldr	r3, [pc, #352]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697b      	ldr	r3, [r7, #20]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80009fe:	23b0      	movs	r3, #176	; 0xb0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	484f      	ldr	r0, [pc, #316]	; (8000b58 <HAL_I2S_MspInit+0x1b4>)
 8000a1a:	f000 ff0d 	bl	8001838 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000a1e:	4b4f      	ldr	r3, [pc, #316]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a20:	4a4f      	ldr	r2, [pc, #316]	; (8000b60 <HAL_I2S_MspInit+0x1bc>)
 8000a22:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000a24:	4b4d      	ldr	r3, [pc, #308]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a26:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a2a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a2c:	4b4b      	ldr	r3, [pc, #300]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a2e:	2240      	movs	r2, #64	; 0x40
 8000a30:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a32:	4b4a      	ldr	r3, [pc, #296]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a38:	4b48      	ldr	r3, [pc, #288]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a40:	4b46      	ldr	r3, [pc, #280]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a46:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a48:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000a50:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a56:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a58:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a64:	483d      	ldr	r0, [pc, #244]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a66:	f000 fb77 	bl	8001158 <HAL_DMA_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_I2S_MspInit+0xd0>
    {
      Error_Handler();
 8000a70:	f7ff ff6a 	bl	8000948 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a39      	ldr	r2, [pc, #228]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a78:	639a      	str	r2, [r3, #56]	; 0x38
 8000a7a:	4a38      	ldr	r2, [pc, #224]	; (8000b5c <HAL_I2S_MspInit+0x1b8>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a80:	e061      	b.n	8000b46 <HAL_I2S_MspInit+0x1a2>
  else if(hi2s->Instance==SPI2)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a37      	ldr	r2, [pc, #220]	; (8000b64 <HAL_I2S_MspInit+0x1c0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d15c      	bne.n	8000b46 <HAL_I2S_MspInit+0x1a2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a28      	ldr	r2, [pc, #160]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <HAL_I2S_MspInit+0x1b0>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000ac4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4821      	ldr	r0, [pc, #132]	; (8000b68 <HAL_I2S_MspInit+0x1c4>)
 8000ae2:	f000 fea9 	bl	8001838 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <HAL_I2S_MspInit+0x1cc>)
 8000aea:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b04:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b0c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b14:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000b2c:	f000 fb14 	bl	8001158 <HAL_DMA_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_I2S_MspInit+0x196>
      Error_Handler();
 8000b36:	f7ff ff07 	bl	8000948 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_I2S_MspInit+0x1c8>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b46:	bf00      	nop
 8000b48:	3730      	adds	r7, #48	; 0x30
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40013000 	.word	0x40013000
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	2000011c 	.word	0x2000011c
 8000b60:	40026458 	.word	0x40026458
 8000b64:	40003800 	.word	0x40003800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	2000017c 	.word	0x2000017c
 8000b70:	40026058 	.word	0x40026058

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_SPI_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12c      	bne.n	8000bf0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000bce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be0:	2306      	movs	r3, #6
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bec:	f000 fe24 	bl	8001838 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40003c00 	.word	0x40003c00
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020800 	.word	0x40020800

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
//	if(Timer1 > 0)
//	  Timer1--;
//	if(Timer2 > 0)
//	  Timer2--;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f92c 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <DMA1_Stream3_IRQHandler+0x10>)
 8000c5e:	f000 fb81 	bl	8001364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000017c 	.word	0x2000017c

08000c6c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DMA2_Stream3_IRQHandler+0x10>)
 8000c72:	f000 fb77 	bl	8001364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000011c 	.word	0x2000011c

08000c80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e00a      	b.n	8000ca8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c92:	f3af 8000 	nop.w
 8000c96:	4601      	mov	r1, r0
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	b2ca      	uxtb	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf0      	blt.n	8000c92 <_read+0x12>
  }

  return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_isatty>:

int _isatty(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f002 fe42 	bl	80039dc <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20020000 	.word	0x20020000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	200002fc 	.word	0x200002fc
 8000d8c:	20000318 	.word	0x20000318

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dba:	490e      	ldr	r1, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd0:	4c0b      	ldr	r4, [pc, #44]	; (8000e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffd7 	bl	8000d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f002 fe01 	bl	80039e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fbb7 	bl	8000558 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000df8:	08004598 	.word	0x08004598
  ldr r2, =_sbss
 8000dfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e00:	20000314 	.word	0x20000314

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f94f 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	200f      	movs	r0, #15
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fd8a 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f967 	bl	800113e <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f92f 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000300 	.word	0x20000300

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000300 	.word	0x20000300

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriorityGrouping>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff29 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff3e 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff31 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffa2 	bl	8001090 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff feb6 	bl	8000ed4 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e099      	b.n	80012a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2202      	movs	r2, #2
 8001178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0201 	bic.w	r2, r2, #1
 8001192:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001194:	e00f      	b.n	80011b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001196:	f7ff fe9d 	bl	8000ed4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d908      	bls.n	80011b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2220      	movs	r2, #32
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2203      	movs	r2, #3
 80011ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e078      	b.n	80012a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1e8      	bne.n	8001196 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <HAL_DMA_Init+0x158>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4313      	orrs	r3, r2
 8001206:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	2b04      	cmp	r3, #4
 800120e:	d107      	bne.n	8001220 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4313      	orrs	r3, r2
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4313      	orrs	r3, r2
 800121e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f023 0307 	bic.w	r3, r3, #7
 8001236:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4313      	orrs	r3, r2
 8001240:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	2b04      	cmp	r3, #4
 8001248:	d117      	bne.n	800127a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4313      	orrs	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00e      	beq.n	800127a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 fa6f 	bl	8001740 <DMA_CheckFifoParam>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2240      	movs	r2, #64	; 0x40
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001276:	2301      	movs	r3, #1
 8001278:	e016      	b.n	80012a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fa26 	bl	80016d4 <DMA_CalcBaseAndBitshift>
 8001288:	4603      	mov	r3, r0
 800128a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001290:	223f      	movs	r2, #63	; 0x3f
 8001292:	409a      	lsls	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	f010803f 	.word	0xf010803f

080012b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_DMA_Start_IT+0x26>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e040      	b.n	800135c <HAL_DMA_Start_IT+0xa8>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d12f      	bne.n	800134e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2202      	movs	r2, #2
 80012f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 f9b8 	bl	8001678 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130c:	223f      	movs	r2, #63	; 0x3f
 800130e:	409a      	lsls	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0216 	orr.w	r2, r2, #22
 8001322:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0208 	orr.w	r2, r2, #8
 800133a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0201 	orr.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e005      	b.n	800135a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001356:	2302      	movs	r3, #2
 8001358:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800135a:	7dfb      	ldrb	r3, [r7, #23]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001370:	4b8e      	ldr	r3, [pc, #568]	; (80015ac <HAL_DMA_IRQHandler+0x248>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a8e      	ldr	r2, [pc, #568]	; (80015b0 <HAL_DMA_IRQHandler+0x24c>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	0a9b      	lsrs	r3, r3, #10
 800137c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138e:	2208      	movs	r2, #8
 8001390:	409a      	lsls	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d01a      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d013      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0204 	bic.w	r2, r2, #4
 80013b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013bc:	2208      	movs	r2, #8
 80013be:	409a      	lsls	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	2201      	movs	r2, #1
 80013d6:	409a      	lsls	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d012      	beq.n	8001406 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f2:	2201      	movs	r2, #1
 80013f4:	409a      	lsls	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	f043 0202 	orr.w	r2, r3, #2
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140a:	2204      	movs	r2, #4
 800140c:	409a      	lsls	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d012      	beq.n	800143c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001428:	2204      	movs	r2, #4
 800142a:	409a      	lsls	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001434:	f043 0204 	orr.w	r2, r3, #4
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	2210      	movs	r2, #16
 8001442:	409a      	lsls	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d043      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d03c      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145e:	2210      	movs	r2, #16
 8001460:	409a      	lsls	r2, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d018      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d108      	bne.n	8001494 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	d024      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	4798      	blx	r3
 8001492:	e01f      	b.n	80014d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01b      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	4798      	blx	r3
 80014a4:	e016      	b.n	80014d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d107      	bne.n	80014c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0208 	bic.w	r2, r2, #8
 80014c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d8:	2220      	movs	r2, #32
 80014da:	409a      	lsls	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 808f 	beq.w	8001604 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0310 	and.w	r3, r3, #16
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 8087 	beq.w	8001604 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fa:	2220      	movs	r2, #32
 80014fc:	409a      	lsls	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b05      	cmp	r3, #5
 800150c:	d136      	bne.n	800157c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0216 	bic.w	r2, r2, #22
 800151c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800152c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	2b00      	cmp	r3, #0
 8001534:	d103      	bne.n	800153e <HAL_DMA_IRQHandler+0x1da>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0208 	bic.w	r2, r2, #8
 800154c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	223f      	movs	r2, #63	; 0x3f
 8001554:	409a      	lsls	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800156e:	2b00      	cmp	r3, #0
 8001570:	d07e      	beq.n	8001670 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
        }
        return;
 800157a:	e079      	b.n	8001670 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01d      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10d      	bne.n	80015b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	2b00      	cmp	r3, #0
 800159e:	d031      	beq.n	8001604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	4798      	blx	r3
 80015a8:	e02c      	b.n	8001604 <HAL_DMA_IRQHandler+0x2a0>
 80015aa:	bf00      	nop
 80015ac:	20000000 	.word	0x20000000
 80015b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d023      	beq.n	8001604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	4798      	blx	r3
 80015c4:	e01e      	b.n	8001604 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10f      	bne.n	80015f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0210 	bic.w	r2, r2, #16
 80015e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001608:	2b00      	cmp	r3, #0
 800160a:	d032      	beq.n	8001672 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d022      	beq.n	800165e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2205      	movs	r2, #5
 800161c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	3301      	adds	r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	429a      	cmp	r2, r3
 800163a:	d307      	bcc.n	800164c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f2      	bne.n	8001630 <HAL_DMA_IRQHandler+0x2cc>
 800164a:	e000      	b.n	800164e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800164c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
 800166e:	e000      	b.n	8001672 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001670:	bf00      	nop
    }
  }
}
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001694:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b40      	cmp	r3, #64	; 0x40
 80016a4:	d108      	bne.n	80016b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016b6:	e007      	b.n	80016c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	60da      	str	r2, [r3, #12]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	3b10      	subs	r3, #16
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <DMA_CalcBaseAndBitshift+0x64>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <DMA_CalcBaseAndBitshift+0x68>)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d909      	bls.n	8001716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800170a:	f023 0303 	bic.w	r3, r3, #3
 800170e:	1d1a      	adds	r2, r3, #4
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	659a      	str	r2, [r3, #88]	; 0x58
 8001714:	e007      	b.n	8001726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800171e:	f023 0303 	bic.w	r3, r3, #3
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	aaaaaaab 	.word	0xaaaaaaab
 800173c:	0800451c 	.word	0x0800451c

08001740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d11f      	bne.n	800179a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d856      	bhi.n	800180e <DMA_CheckFifoParam+0xce>
 8001760:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <DMA_CheckFifoParam+0x28>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	08001779 	.word	0x08001779
 800176c:	0800178b 	.word	0x0800178b
 8001770:	08001779 	.word	0x08001779
 8001774:	0800180f 	.word	0x0800180f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d046      	beq.n	8001812 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001788:	e043      	b.n	8001812 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001792:	d140      	bne.n	8001816 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001798:	e03d      	b.n	8001816 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a2:	d121      	bne.n	80017e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d837      	bhi.n	800181a <DMA_CheckFifoParam+0xda>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <DMA_CheckFifoParam+0x70>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017c7 	.word	0x080017c7
 80017b8:	080017c1 	.word	0x080017c1
 80017bc:	080017d9 	.word	0x080017d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
      break;
 80017c4:	e030      	b.n	8001828 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d025      	beq.n	800181e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d6:	e022      	b.n	800181e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017e0:	d11f      	bne.n	8001822 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017e6:	e01c      	b.n	8001822 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d903      	bls.n	80017f6 <DMA_CheckFifoParam+0xb6>
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d003      	beq.n	80017fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017f4:	e018      	b.n	8001828 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
      break;
 80017fa:	e015      	b.n	8001828 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00e      	beq.n	8001826 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
      break;
 800180c:	e00b      	b.n	8001826 <DMA_CheckFifoParam+0xe6>
      break;
 800180e:	bf00      	nop
 8001810:	e00a      	b.n	8001828 <DMA_CheckFifoParam+0xe8>
      break;
 8001812:	bf00      	nop
 8001814:	e008      	b.n	8001828 <DMA_CheckFifoParam+0xe8>
      break;
 8001816:	bf00      	nop
 8001818:	e006      	b.n	8001828 <DMA_CheckFifoParam+0xe8>
      break;
 800181a:	bf00      	nop
 800181c:	e004      	b.n	8001828 <DMA_CheckFifoParam+0xe8>
      break;
 800181e:	bf00      	nop
 8001820:	e002      	b.n	8001828 <DMA_CheckFifoParam+0xe8>
      break;   
 8001822:	bf00      	nop
 8001824:	e000      	b.n	8001828 <DMA_CheckFifoParam+0xe8>
      break;
 8001826:	bf00      	nop
    }
  } 
  
  return status; 
 8001828:	7bfb      	ldrb	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	e165      	b.n	8001b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001854:	2201      	movs	r2, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	429a      	cmp	r2, r3
 800186e:	f040 8154 	bne.w	8001b1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d005      	beq.n	800188a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001886:	2b02      	cmp	r3, #2
 8001888:	d130      	bne.n	80018ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 0201 	and.w	r2, r3, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d017      	beq.n	8001928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d123      	bne.n	800197c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	08da      	lsrs	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3208      	adds	r2, #8
 800193c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	220f      	movs	r2, #15
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	69b9      	ldr	r1, [r7, #24]
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80ae 	beq.w	8001b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_GPIO_Init+0x300>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a5c      	ldr	r2, [pc, #368]	; (8001b38 <HAL_GPIO_Init+0x300>)
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_GPIO_Init+0x300>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019da:	4a58      	ldr	r2, [pc, #352]	; (8001b3c <HAL_GPIO_Init+0x304>)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4f      	ldr	r2, [pc, #316]	; (8001b40 <HAL_GPIO_Init+0x308>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d025      	beq.n	8001a52 <HAL_GPIO_Init+0x21a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4e      	ldr	r2, [pc, #312]	; (8001b44 <HAL_GPIO_Init+0x30c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01f      	beq.n	8001a4e <HAL_GPIO_Init+0x216>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4d      	ldr	r2, [pc, #308]	; (8001b48 <HAL_GPIO_Init+0x310>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x212>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_GPIO_Init+0x314>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x20e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4b      	ldr	r2, [pc, #300]	; (8001b50 <HAL_GPIO_Init+0x318>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x20a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4a      	ldr	r2, [pc, #296]	; (8001b54 <HAL_GPIO_Init+0x31c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x206>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a49      	ldr	r2, [pc, #292]	; (8001b58 <HAL_GPIO_Init+0x320>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x202>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e00c      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e00a      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a3e:	2305      	movs	r3, #5
 8001a40:	e008      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a42:	2304      	movs	r3, #4
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e004      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a52:	2300      	movs	r3, #0
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	f002 0203 	and.w	r2, r2, #3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a64:	4935      	ldr	r1, [pc, #212]	; (8001b3c <HAL_GPIO_Init+0x304>)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a72:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <HAL_GPIO_Init+0x324>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a96:	4a31      	ldr	r2, [pc, #196]	; (8001b5c <HAL_GPIO_Init+0x324>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_GPIO_Init+0x324>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac0:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <HAL_GPIO_Init+0x324>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ac6:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_GPIO_Init+0x324>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <HAL_GPIO_Init+0x324>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <HAL_GPIO_Init+0x324>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b14:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <HAL_GPIO_Init+0x324>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b0f      	cmp	r3, #15
 8001b24:	f67f ae96 	bls.w	8001854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40021400 	.word	0x40021400
 8001b58:	40021800 	.word	0x40021800
 8001b5c:	40013c00 	.word	0x40013c00

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b7c:	e003      	b.n	8001b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	619a      	str	r2, [r3, #24]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0e1      	b.n	8001d6a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a6d      	ldr	r2, [pc, #436]	; (8001d74 <HAL_I2S_Init+0x1e0>)
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe feef 	bl	80009a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bdc:	f023 030f 	bic.w	r3, r3, #15
 8001be0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d06f      	beq.n	8001cd2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e001      	b.n	8001c04 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c00:	2320      	movs	r3, #32
 8001c02:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d802      	bhi.n	8001c12 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_I2S_Init+0x1e4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d004      	beq.n	8001c26 <HAL_I2S_Init+0x92>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a56      	ldr	r2, [pc, #344]	; (8001d7c <HAL_I2S_Init+0x1e8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d104      	bne.n	8001c30 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f000 ffbe 	bl	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	e003      	b.n	8001c38 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f000 ffb9 	bl	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c36:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c40:	d125      	bne.n	8001c8e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d010      	beq.n	8001c6c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	3305      	adds	r3, #5
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	e01f      	b.n	8001cac <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	3305      	adds	r3, #5
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e00e      	b.n	8001cac <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	3305      	adds	r3, #5
 8001caa:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4a34      	ldr	r2, [pc, #208]	; (8001d80 <HAL_I2S_Init+0x1ec>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	085b      	lsrs	r3, r3, #1
 8001cc8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	e003      	b.n	8001cda <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d902      	bls.n	8001ce6 <HAL_I2S_Init+0x152>
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	d907      	bls.n	8001cf6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f043 0210 	orr.w	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e039      	b.n	8001d6a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	ea42 0103 	orr.w	r1, r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d14:	f023 030f 	bic.w	r3, r3, #15
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6851      	ldr	r1, [r2, #4]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6892      	ldr	r2, [r2, #8]
 8001d20:	4311      	orrs	r1, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68d2      	ldr	r2, [r2, #12]
 8001d26:	4311      	orrs	r1, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6992      	ldr	r2, [r2, #24]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d38:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b30      	cmp	r3, #48	; 0x30
 8001d40:	d003      	beq.n	8001d4a <HAL_I2S_Init+0x1b6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2bb0      	cmp	r3, #176	; 0xb0
 8001d48:	d107      	bne.n	8001d5a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69da      	ldr	r2, [r3, #28]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d58:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	08002273 	.word	0x08002273
 8001d78:	40003800 	.word	0x40003800
 8001d7c:	40003c00 	.word	0x40003c00
 8001d80:	cccccccd 	.word	0xcccccccd

08001d84 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_I2S_Transmit_DMA+0x1a>
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e08e      	b.n	8001ec0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_I2S_Transmit_DMA+0x2e>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e086      	b.n	8001ec0 <HAL_I2S_Transmit_DMA+0x13c>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d005      	beq.n	8001dd2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e076      	b.n	8001ec0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d002      	beq.n	8001dfe <HAL_I2S_Transmit_DMA+0x7a>
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d10a      	bne.n	8001e14 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e12:	e005      	b.n	8001e20 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	88fa      	ldrh	r2, [r7, #6]
 8001e18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <HAL_I2S_Transmit_DMA+0x144>)
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_I2S_Transmit_DMA+0x148>)
 8001e2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <HAL_I2S_Transmit_DMA+0x14c>)
 8001e36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001e40:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001e48:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001e50:	f7ff fa30 	bl	80012b4 <HAL_DMA_Start_IT>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00f      	beq.n	8001e7a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f043 0208 	orr.w	r2, r3, #8
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e022      	b.n	8001ec0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e96:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d107      	bne.n	8001eb6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0202 	orr.w	r2, r2, #2
 8001eb4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	080020f3 	.word	0x080020f3
 8001ecc:	080020b1 	.word	0x080020b1
 8001ed0:	0800216d 	.word	0x0800216d

08001ed4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_I2S_Receive_DMA+0x1a>
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0a1      	b.n	8002036 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_I2S_Receive_DMA+0x2e>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e099      	b.n	8002036 <HAL_I2S_Receive_DMA+0x162>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d005      	beq.n	8001f22 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e089      	b.n	8002036 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2204      	movs	r2, #4
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d002      	beq.n	8001f4e <HAL_I2S_Receive_DMA+0x7a>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b05      	cmp	r3, #5
 8001f4c:	d10a      	bne.n	8001f64 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	865a      	strh	r2, [r3, #50]	; 0x32
 8001f62:	e005      	b.n	8001f70 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	88fa      	ldrh	r2, [r7, #6]
 8001f68:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	88fa      	ldrh	r2, [r7, #6]
 8001f6e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	4a32      	ldr	r2, [pc, #200]	; (8002040 <HAL_I2S_Receive_DMA+0x16c>)
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	4a31      	ldr	r2, [pc, #196]	; (8002044 <HAL_I2S_Receive_DMA+0x170>)
 8001f7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	4a30      	ldr	r2, [pc, #192]	; (8002048 <HAL_I2S_Receive_DMA+0x174>)
 8001f86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f96:	d10a      	bne.n	8001fae <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	4619      	mov	r1, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001fc4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001fc6:	f7ff f975 	bl	80012b4 <HAL_DMA_Start_IT>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00f      	beq.n	8001ff0 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	f043 0208 	orr.w	r2, r3, #8
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e022      	b.n	8002036 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d107      	bne.n	800200e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800200c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	08002151 	.word	0x08002151
 8002044:	0800210f 	.word	0x0800210f
 8002048:	0800216d 	.word	0x0800216d

0800204c <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10e      	bne.n	80020e4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0202 	bic.w	r2, r2, #2
 80020d4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff ffbb 	bl	8002060 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff ffa3 	bl	800204c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10e      	bne.n	8002142 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff ffa0 	bl	8002088 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7ff ff88 	bl	8002074 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0203 	bic.w	r2, r2, #3
 8002188:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f043 0208 	orr.w	r2, r3, #8
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff ff76 	bl	800209c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	881a      	ldrh	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	1c9a      	adds	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10e      	bne.n	800220c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ff2a 	bl	8002060 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	b292      	uxth	r2, r2
 8002228:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	1c9a      	adds	r2, r3, #2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10e      	bne.n	800226a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800225a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff0f 	bl	8002088 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b04      	cmp	r3, #4
 800228c:	d13a      	bne.n	8002304 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d109      	bne.n	80022ac <I2S_IRQHandler+0x3a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	d102      	bne.n	80022ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffb4 	bl	8002214 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d126      	bne.n	8002304 <I2S_IRQHandler+0x92>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d11f      	bne.n	8002304 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f043 0202 	orr.w	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff fecc 	bl	800209c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b03      	cmp	r3, #3
 800230e:	d136      	bne.n	800237e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d109      	bne.n	800232e <I2S_IRQHandler+0xbc>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d102      	bne.n	800232e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff45 	bl	80021b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b08      	cmp	r3, #8
 8002336:	d122      	bne.n	800237e <I2S_IRQHandler+0x10c>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b20      	cmp	r3, #32
 8002344:	d11b      	bne.n	800237e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002354:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f043 0204 	orr.w	r2, r3, #4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fe8f 	bl	800209c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0cc      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90c      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d044      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e067      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4934      	ldr	r1, [pc, #208]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fd2c 	bl	8000ed4 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fd28 	bl	8000ed4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20c      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250e:	f000 fd93 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fc8c 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00
 8002544:	40023800 	.word	0x40023800
 8002548:	0800450c 	.word	0x0800450c
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08c      	sub	sp, #48	; 0x30
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d010      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800258c:	4b6f      	ldr	r3, [pc, #444]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800258e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002592:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	496c      	ldr	r1, [pc, #432]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80025aa:	2301      	movs	r3, #1
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d010      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80025ba:	4b64      	ldr	r3, [pc, #400]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025c0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	4960      	ldr	r1, [pc, #384]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80025d8:	2301      	movs	r3, #1
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d017      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025e8:	4b58      	ldr	r3, [pc, #352]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4955      	ldr	r1, [pc, #340]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002606:	d101      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002608:	2301      	movs	r3, #1
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002614:	2301      	movs	r3, #1
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d017      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002624:	4b49      	ldr	r3, [pc, #292]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800262a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002632:	4946      	ldr	r1, [pc, #280]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002642:	d101      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002644:	2301      	movs	r3, #1
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002650:	2301      	movs	r3, #1
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 808a 	beq.w	8002776 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a38      	ldr	r2, [pc, #224]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800267e:	4b34      	ldr	r3, [pc, #208]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a33      	ldr	r2, [pc, #204]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002688:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800268a:	f7fe fc23 	bl	8000ed4 <HAL_GetTick>
 800268e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002692:	f7fe fc1f 	bl	8000ed4 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e278      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80026a4:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026b0:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02f      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d028      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026ce:	4b1f      	ldr	r3, [pc, #124]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026d8:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80026e4:	4a19      	ldr	r2, [pc, #100]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d114      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe fbed 	bl	8000ed4 <HAL_GetTick>
 80026fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe fbe9 	bl	8000ed4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e240      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ee      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800272c:	d114      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800273e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002742:	4902      	ldr	r1, [pc, #8]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002744:	4313      	orrs	r3, r2
 8002746:	608b      	str	r3, [r1, #8]
 8002748:	e00c      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40007000 	.word	0x40007000
 8002754:	42470e40 	.word	0x42470e40
 8002758:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a49      	ldr	r2, [pc, #292]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800275e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002762:	6093      	str	r3, [r2, #8]
 8002764:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002766:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002770:	4944      	ldr	r1, [pc, #272]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002772:	4313      	orrs	r3, r2
 8002774:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002788:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800278a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002798:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800279a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	4937      	ldr	r1, [pc, #220]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027ba:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	492e      	ldr	r1, [pc, #184]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d011      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	4926      	ldr	r1, [pc, #152]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027fa:	d101      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80027fc:	2301      	movs	r3, #1
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800280e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002812:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	491a      	ldr	r1, [pc, #104]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	2b00      	cmp	r3, #0
 800282c:	d011      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002834:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283c:	4911      	ldr	r1, [pc, #68]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800284c:	d101      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800284e:	2301      	movs	r3, #1
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d005      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002860:	f040 80ff 	bne.w	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800286a:	f7fe fb33 	bl	8000ed4 <HAL_GetTick>
 800286e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002870:	e00e      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002872:	f7fe fb2f 	bl	8000ed4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d907      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e188      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002884:	40023800 	.word	0x40023800
 8002888:	424711e0 	.word	0x424711e0
 800288c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002890:	4b7e      	ldr	r3, [pc, #504]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ea      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d009      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d028      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d124      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028c4:	4b71      	ldr	r3, [pc, #452]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ca:	0c1b      	lsrs	r3, r3, #16
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	3301      	adds	r3, #1
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028d6:	4b6d      	ldr	r3, [pc, #436]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028dc:	0e1b      	lsrs	r3, r3, #24
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	431a      	orrs	r2, r3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	3b01      	subs	r3, #1
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	431a      	orrs	r2, r3
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	071b      	lsls	r3, r3, #28
 8002906:	4961      	ldr	r1, [pc, #388]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800292c:	2b00      	cmp	r3, #0
 800292e:	d035      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002938:	d130      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800293a:	4b54      	ldr	r3, [pc, #336]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800293c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	3301      	adds	r3, #1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800294c:	4b4f      	ldr	r3, [pc, #316]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800294e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002952:	0f1b      	lsrs	r3, r3, #28
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	019b      	lsls	r3, r3, #6
 8002964:	431a      	orrs	r2, r3
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	3b01      	subs	r3, #1
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	431a      	orrs	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	071b      	lsls	r3, r3, #28
 800297c:	4943      	ldr	r1, [pc, #268]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002984:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298a:	f023 021f 	bic.w	r2, r3, #31
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	3b01      	subs	r3, #1
 8002994:	493d      	ldr	r1, [pc, #244]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d029      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b0:	d124      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	3301      	adds	r3, #1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029c4:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ca:	0f1b      	lsrs	r3, r3, #28
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	019b      	lsls	r3, r3, #6
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	431a      	orrs	r2, r3
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	431a      	orrs	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	071b      	lsls	r3, r3, #28
 80029f4:	4925      	ldr	r1, [pc, #148]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d016      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	019b      	lsls	r3, r3, #6
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	041b      	lsls	r3, r3, #16
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	071b      	lsls	r3, r3, #28
 8002a2e:	4917      	ldr	r1, [pc, #92]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fa4a 	bl	8000ed4 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a44:	f7fe fa46 	bl	8000ed4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e09f      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	f040 8095 	bne.w	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a70:	f7fe fa30 	bl	8000ed4 <HAL_GetTick>
 8002a74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a76:	e00f      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a78:	f7fe fa2c 	bl	8000ed4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d908      	bls.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e085      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	42470068 	.word	0x42470068
 8002a94:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a98:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa4:	d0e8      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d02b      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d127      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002ace:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	431a      	orrs	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	3b01      	subs	r3, #1
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	4928      	ldr	r1, [pc, #160]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	3b01      	subs	r3, #1
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	4922      	ldr	r1, [pc, #136]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01d      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b32:	d118      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b34:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	0e1b      	lsrs	r3, r3, #24
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	019b      	lsls	r3, r3, #6
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	3b01      	subs	r3, #1
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	4910      	ldr	r1, [pc, #64]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f9b2 	bl	8000ed4 <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b74:	f7fe f9ae 	bl	8000ed4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e007      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b92:	d1ef      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3730      	adds	r7, #48	; 0x30
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470070 	.word	0x42470070

08002ba8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	2b07      	cmp	r3, #7
 8002bce:	f200 8224 	bhi.w	800301a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8002bd2:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002ddb 	.word	0x08002ddb
 8002bdc:	08002f05 	.word	0x08002f05
 8002be0:	0800301b 	.word	0x0800301b
 8002be4:	08002bf9 	.word	0x08002bf9
 8002be8:	0800301b 	.word	0x0800301b
 8002bec:	0800301b 	.word	0x0800301b
 8002bf0:	0800301b 	.word	0x0800301b
 8002bf4:	08002bf9 	.word	0x08002bf9
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8002bf8:	4ba8      	ldr	r3, [pc, #672]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfe:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c0e:	f000 80d6 	beq.w	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c18:	f200 80dd 	bhi.w	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c22:	f000 809f 	beq.w	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c2c:	f200 80d3 	bhi.w	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c36:	d05b      	beq.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3e:	f200 80ca 	bhi.w	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c48:	f000 80b6 	beq.w	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c52:	f200 80c0 	bhi.w	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c5c:	f000 8082 	beq.w	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c66:	f200 80b6 	bhi.w	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c76:	d03b      	beq.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8002c78:	e0ad      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002c7a:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8002c86:	4b85      	ldr	r3, [pc, #532]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c90:	4a83      	ldr	r2, [pc, #524]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	e008      	b.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8002c9a:	4b80      	ldr	r3, [pc, #512]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca4:	4a7f      	ldr	r2, [pc, #508]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002caa:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8002cac:	4b7b      	ldr	r3, [pc, #492]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	0e1b      	lsrs	r3, r3, #24
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8002cba:	4b78      	ldr	r3, [pc, #480]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	fb03 f202 	mul.w	r2, r3, r2
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8002cd4:	4b71      	ldr	r3, [pc, #452]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	61fb      	str	r3, [r7, #28]
          break;
 8002cee:	e073      	b.n	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002cfc:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d06:	4a66      	ldr	r2, [pc, #408]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e008      	b.n	8002d22 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8002d10:	4b62      	ldr	r3, [pc, #392]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d1a:	4a62      	ldr	r2, [pc, #392]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8002d22:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d28:	0e1b      	lsrs	r3, r3, #24
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8002d30:	4b5a      	ldr	r3, [pc, #360]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	fb03 f202 	mul.w	r2, r3, r2
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8002d4a:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	3301      	adds	r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	61fb      	str	r3, [r7, #28]
          break;
 8002d62:	e039      	b.n	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002d64:	4b4d      	ldr	r3, [pc, #308]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d108      	bne.n	8002d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d70:	4b4a      	ldr	r3, [pc, #296]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d78:	4a49      	ldr	r2, [pc, #292]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e007      	b.n	8002d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002d82:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d8a:	4a46      	ldr	r2, [pc, #280]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8002d92:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0f1b      	lsrs	r3, r3, #28
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	fb03 f202 	mul.w	r2, r3, r2
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	61fb      	str	r3, [r7, #28]
          break;
 8002db6:	e00f      	b.n	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002dba:	61fb      	str	r3, [r7, #28]
          break;
 8002dbc:	e00c      	b.n	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002dbe:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8002dca:	4b35      	ldr	r3, [pc, #212]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002dcc:	61fb      	str	r3, [r7, #28]
          break;
 8002dce:	e003      	b.n	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8002dd0:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002dd2:	61fb      	str	r3, [r7, #28]
          break;
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8002dd6:	bf00      	nop
        }
      }
      break;
 8002dd8:	e11f      	b.n	800301a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8002dda:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002dec:	d079      	beq.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002df4:	f200 8082 	bhi.w	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dfe:	d03c      	beq.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e06:	d879      	bhi.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e14:	d172      	bne.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002e18:	61fb      	str	r3, [r7, #28]
          break;
 8002e1a:	e072      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e28:	d109      	bne.n	8002e3e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e34:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e008      	b.n	8002e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e48:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002e64:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6a:	0f1b      	lsrs	r3, r3, #28
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	61fb      	str	r3, [r7, #28]
          break;
 8002e78:	e043      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e86:	d111      	bne.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	e010      	b.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	017d7840 	.word	0x017d7840
 8002ea8:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002eac:	4b5e      	ldr	r3, [pc, #376]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb4:	4a5d      	ldr	r2, [pc, #372]	; (800302c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002ebc:	4b5a      	ldr	r3, [pc, #360]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	fb02 f303 	mul.w	r3, r2, r3
 8002ecc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002ece:	4b56      	ldr	r3, [pc, #344]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	0f1b      	lsrs	r3, r3, #28
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	61fb      	str	r3, [r7, #28]
          break;
 8002ee0:	e00f      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ee2:	4b51      	ldr	r3, [pc, #324]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eee:	d102      	bne.n	8002ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8002ef0:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002ef2:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002ef4:	e005      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8002ef6:	4b4d      	ldr	r3, [pc, #308]	; (800302c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002ef8:	61fb      	str	r3, [r7, #28]
          break;
 8002efa:	e002      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
          break;
 8002f00:	bf00      	nop
        }
      }
      break;
 8002f02:	e08a      	b.n	800301a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f0a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002f16:	d06f      	beq.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002f1e:	d878      	bhi.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f26:	d03c      	beq.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f2e:	d870      	bhi.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f3c:	d169      	bne.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f3e:	4b3d      	ldr	r3, [pc, #244]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8002f40:	61fb      	str	r3, [r7, #28]
          break;
 8002f42:	e069      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f44:	4b38      	ldr	r3, [pc, #224]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f50:	d109      	bne.n	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002f52:	4b35      	ldr	r3, [pc, #212]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f5c:	4a34      	ldr	r2, [pc, #208]	; (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	e008      	b.n	8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002f66:	4b30      	ldr	r3, [pc, #192]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f70:	4a2e      	ldr	r2, [pc, #184]	; (800302c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002f8c:	4b26      	ldr	r3, [pc, #152]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f92:	0f1b      	lsrs	r3, r3, #28
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	61fb      	str	r3, [r7, #28]
          break;
 8002fa0:	e03a      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fae:	d108      	bne.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	e007      	b.n	8002fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fca:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002fe4:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	0f1b      	lsrs	r3, r3, #28
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	61fb      	str	r3, [r7, #28]
          break;
 8002ff6:	e00f      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003004:	d102      	bne.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003008:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800300a:	e005      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800300e:	61fb      	str	r3, [r7, #28]
          break;
 8003010:	e002      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
          break;
 8003016:	bf00      	nop
        }
      }
      break;
 8003018:	bf00      	nop
    }
  }
  return frequency;
 800301a:	69fb      	ldr	r3, [r7, #28]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3724      	adds	r7, #36	; 0x24
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	40023800 	.word	0x40023800
 800302c:	00f42400 	.word	0x00f42400
 8003030:	017d7840 	.word	0x017d7840
 8003034:	00bb8000 	.word	0x00bb8000

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303c:	b0a6      	sub	sp, #152	; 0x98
 800303e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305e:	4bc8      	ldr	r3, [pc, #800]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b0c      	cmp	r3, #12
 8003068:	f200 817e 	bhi.w	8003368 <HAL_RCC_GetSysClockFreq+0x330>
 800306c:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <HAL_RCC_GetSysClockFreq+0x3c>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	080030a9 	.word	0x080030a9
 8003078:	08003369 	.word	0x08003369
 800307c:	08003369 	.word	0x08003369
 8003080:	08003369 	.word	0x08003369
 8003084:	080030b1 	.word	0x080030b1
 8003088:	08003369 	.word	0x08003369
 800308c:	08003369 	.word	0x08003369
 8003090:	08003369 	.word	0x08003369
 8003094:	080030b9 	.word	0x080030b9
 8003098:	08003369 	.word	0x08003369
 800309c:	08003369 	.word	0x08003369
 80030a0:	08003369 	.word	0x08003369
 80030a4:	08003223 	.word	0x08003223
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4bb6      	ldr	r3, [pc, #728]	; (8003384 <HAL_RCC_GetSysClockFreq+0x34c>)
 80030aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80030ae:	e15f      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b0:	4bb5      	ldr	r3, [pc, #724]	; (8003388 <HAL_RCC_GetSysClockFreq+0x350>)
 80030b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80030b6:	e15b      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b8:	4bb1      	ldr	r3, [pc, #708]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c4:	4bae      	ldr	r3, [pc, #696]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d031      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d0:	4bab      	ldr	r3, [pc, #684]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	2200      	movs	r2, #0
 80030d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80030da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	663b      	str	r3, [r7, #96]	; 0x60
 80030e4:	2300      	movs	r3, #0
 80030e6:	667b      	str	r3, [r7, #100]	; 0x64
 80030e8:	4ba7      	ldr	r3, [pc, #668]	; (8003388 <HAL_RCC_GetSysClockFreq+0x350>)
 80030ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030ee:	462a      	mov	r2, r5
 80030f0:	fb03 f202 	mul.w	r2, r3, r2
 80030f4:	2300      	movs	r3, #0
 80030f6:	4621      	mov	r1, r4
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	4aa2      	ldr	r2, [pc, #648]	; (8003388 <HAL_RCC_GetSysClockFreq+0x350>)
 8003100:	4621      	mov	r1, r4
 8003102:	fba1 1202 	umull	r1, r2, r1, r2
 8003106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003108:	460a      	mov	r2, r1
 800310a:	67ba      	str	r2, [r7, #120]	; 0x78
 800310c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800310e:	4413      	add	r3, r2
 8003110:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003116:	2200      	movs	r2, #0
 8003118:	65bb      	str	r3, [r7, #88]	; 0x58
 800311a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800311c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003120:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003124:	f7fd f86e 	bl	8000204 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4613      	mov	r3, r2
 800312e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003132:	e064      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003134:	4b92      	ldr	r3, [pc, #584]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	2200      	movs	r2, #0
 800313c:	653b      	str	r3, [r7, #80]	; 0x50
 800313e:	657a      	str	r2, [r7, #84]	; 0x54
 8003140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003146:	64bb      	str	r3, [r7, #72]	; 0x48
 8003148:	2300      	movs	r3, #0
 800314a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800314c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003150:	4622      	mov	r2, r4
 8003152:	462b      	mov	r3, r5
 8003154:	f04f 0000 	mov.w	r0, #0
 8003158:	f04f 0100 	mov.w	r1, #0
 800315c:	0159      	lsls	r1, r3, #5
 800315e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003162:	0150      	lsls	r0, r2, #5
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4621      	mov	r1, r4
 800316a:	1a51      	subs	r1, r2, r1
 800316c:	6139      	str	r1, [r7, #16]
 800316e:	4629      	mov	r1, r5
 8003170:	eb63 0301 	sbc.w	r3, r3, r1
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003182:	4659      	mov	r1, fp
 8003184:	018b      	lsls	r3, r1, #6
 8003186:	4651      	mov	r1, sl
 8003188:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800318c:	4651      	mov	r1, sl
 800318e:	018a      	lsls	r2, r1, #6
 8003190:	4651      	mov	r1, sl
 8003192:	ebb2 0801 	subs.w	r8, r2, r1
 8003196:	4659      	mov	r1, fp
 8003198:	eb63 0901 	sbc.w	r9, r3, r1
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b0:	4690      	mov	r8, r2
 80031b2:	4699      	mov	r9, r3
 80031b4:	4623      	mov	r3, r4
 80031b6:	eb18 0303 	adds.w	r3, r8, r3
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	462b      	mov	r3, r5
 80031be:	eb49 0303 	adc.w	r3, r9, r3
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031d0:	4629      	mov	r1, r5
 80031d2:	028b      	lsls	r3, r1, #10
 80031d4:	4621      	mov	r1, r4
 80031d6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031da:	4621      	mov	r1, r4
 80031dc:	028a      	lsls	r2, r1, #10
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e6:	2200      	movs	r2, #0
 80031e8:	643b      	str	r3, [r7, #64]	; 0x40
 80031ea:	647a      	str	r2, [r7, #68]	; 0x44
 80031ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031f0:	f7fd f808 	bl	8000204 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4613      	mov	r3, r2
 80031fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031fe:	4b60      	ldr	r3, [pc, #384]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	3301      	adds	r3, #1
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003210:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003220:	e0a6      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003222:	4b57      	ldr	r3, [pc, #348]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800322a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800322e:	4b54      	ldr	r3, [pc, #336]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d02a      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323a:	4b51      	ldr	r3, [pc, #324]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	099b      	lsrs	r3, r3, #6
 8003240:	2200      	movs	r2, #0
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38
 8003244:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800324c:	2100      	movs	r1, #0
 800324e:	4b4e      	ldr	r3, [pc, #312]	; (8003388 <HAL_RCC_GetSysClockFreq+0x350>)
 8003250:	fb03 f201 	mul.w	r2, r3, r1
 8003254:	2300      	movs	r3, #0
 8003256:	fb00 f303 	mul.w	r3, r0, r3
 800325a:	4413      	add	r3, r2
 800325c:	4a4a      	ldr	r2, [pc, #296]	; (8003388 <HAL_RCC_GetSysClockFreq+0x350>)
 800325e:	fba0 1202 	umull	r1, r2, r0, r2
 8003262:	677a      	str	r2, [r7, #116]	; 0x74
 8003264:	460a      	mov	r2, r1
 8003266:	673a      	str	r2, [r7, #112]	; 0x70
 8003268:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800326a:	4413      	add	r3, r2
 800326c:	677b      	str	r3, [r7, #116]	; 0x74
 800326e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003272:	2200      	movs	r2, #0
 8003274:	633b      	str	r3, [r7, #48]	; 0x30
 8003276:	637a      	str	r2, [r7, #52]	; 0x34
 8003278:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800327c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003280:	f7fc ffc0 	bl	8000204 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4613      	mov	r3, r2
 800328a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800328e:	e05b      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003290:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	2200      	movs	r2, #0
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
 800329a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a2:	623b      	str	r3, [r7, #32]
 80032a4:	2300      	movs	r3, #0
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032ac:	4642      	mov	r2, r8
 80032ae:	464b      	mov	r3, r9
 80032b0:	f04f 0000 	mov.w	r0, #0
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	0159      	lsls	r1, r3, #5
 80032ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032be:	0150      	lsls	r0, r2, #5
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4641      	mov	r1, r8
 80032c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ca:	4649      	mov	r1, r9
 80032cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032e4:	ebb2 040a 	subs.w	r4, r2, sl
 80032e8:	eb63 050b 	sbc.w	r5, r3, fp
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	00eb      	lsls	r3, r5, #3
 80032f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032fa:	00e2      	lsls	r2, r4, #3
 80032fc:	4614      	mov	r4, r2
 80032fe:	461d      	mov	r5, r3
 8003300:	4643      	mov	r3, r8
 8003302:	18e3      	adds	r3, r4, r3
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	464b      	mov	r3, r9
 8003308:	eb45 0303 	adc.w	r3, r5, r3
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9d7 4500 	ldrd	r4, r5, [r7]
 800331a:	4629      	mov	r1, r5
 800331c:	028b      	lsls	r3, r1, #10
 800331e:	4621      	mov	r1, r4
 8003320:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003324:	4621      	mov	r1, r4
 8003326:	028a      	lsls	r2, r1, #10
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003330:	2200      	movs	r2, #0
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	61fa      	str	r2, [r7, #28]
 8003336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800333a:	f7fc ff63 	bl	8000204 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4613      	mov	r3, r2
 8003344:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_RCC_GetSysClockFreq+0x348>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	0f1b      	lsrs	r3, r3, #28
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800335a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003366:	e003      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCC_GetSysClockFreq+0x34c>)
 800336a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800336e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003374:	4618      	mov	r0, r3
 8003376:	3798      	adds	r7, #152	; 0x98
 8003378:	46bd      	mov	sp, r7
 800337a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800
 8003384:	00f42400 	.word	0x00f42400
 8003388:	017d7840 	.word	0x017d7840

0800338c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e28d      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8083 	beq.w	80034b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033ac:	4b94      	ldr	r3, [pc, #592]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d019      	beq.n	80033ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033b8:	4b91      	ldr	r3, [pc, #580]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033c4:	4b8e      	ldr	r3, [pc, #568]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d0:	d00c      	beq.n	80033ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4b8b      	ldr	r3, [pc, #556]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b88      	ldr	r3, [pc, #544]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b84      	ldr	r3, [pc, #528]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x124>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d157      	bne.n	80034b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e25a      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x90>
 800340e:	4b7c      	ldr	r3, [pc, #496]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7b      	ldr	r2, [pc, #492]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xcc>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0xb4>
 8003426:	4b76      	ldr	r3, [pc, #472]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a75      	ldr	r2, [pc, #468]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b73      	ldr	r3, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a72      	ldr	r2, [pc, #456]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xcc>
 8003440:	4b6f      	ldr	r3, [pc, #444]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a6e      	ldr	r2, [pc, #440]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b6c      	ldr	r3, [pc, #432]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a6b      	ldr	r2, [pc, #428]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fd fd38 	bl	8000ed4 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fd fd34 	bl	8000ed4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e21f      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xdc>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd fd24 	bl	8000ed4 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fd fd20 	bl	8000ed4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e20b      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x104>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d06f      	beq.n	800359e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034be:	4b50      	ldr	r3, [pc, #320]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d017      	beq.n	80034fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034ca:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d105      	bne.n	80034e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034d6:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d11c      	bne.n	8003528 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ee:	4b44      	ldr	r3, [pc, #272]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d116      	bne.n	8003528 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fa:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_RCC_OscConfig+0x186>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d001      	beq.n	8003512 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e1d3      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4937      	ldr	r1, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	e03a      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003530:	4b34      	ldr	r3, [pc, #208]	; (8003604 <HAL_RCC_OscConfig+0x278>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fd fccd 	bl	8000ed4 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353e:	f7fd fcc9 	bl	8000ed4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e1b4      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4925      	ldr	r1, [pc, #148]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 800356c:	4313      	orrs	r3, r2
 800356e:	600b      	str	r3, [r1, #0]
 8003570:	e015      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCC_OscConfig+0x278>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fd fcac 	bl	8000ed4 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003580:	f7fd fca8 	bl	8000ed4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e193      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d036      	beq.n	8003618 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b2:	4b15      	ldr	r3, [pc, #84]	; (8003608 <HAL_RCC_OscConfig+0x27c>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fd fc8c 	bl	8000ed4 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c0:	f7fd fc88 	bl	8000ed4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e173      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80035d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x234>
 80035de:	e01b      	b.n	8003618 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_OscConfig+0x27c>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fd fc75 	bl	8000ed4 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ec:	e00e      	b.n	800360c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ee:	f7fd fc71 	bl	8000ed4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d907      	bls.n	800360c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e15c      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
 8003600:	40023800 	.word	0x40023800
 8003604:	42470000 	.word	0x42470000
 8003608:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360c:	4b8a      	ldr	r3, [pc, #552]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800360e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ea      	bne.n	80035ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8097 	beq.w	8003754 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362a:	4b83      	ldr	r3, [pc, #524]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	4b7f      	ldr	r3, [pc, #508]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	4a7e      	ldr	r2, [pc, #504]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003644:	6413      	str	r3, [r2, #64]	; 0x40
 8003646:	4b7c      	ldr	r3, [pc, #496]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	4b79      	ldr	r3, [pc, #484]	; (800383c <HAL_RCC_OscConfig+0x4b0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003662:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x4b0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a75      	ldr	r2, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x4b0>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7fd fc31 	bl	8000ed4 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7fd fc2d 	bl	8000ed4 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e118      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	4b6c      	ldr	r3, [pc, #432]	; (800383c <HAL_RCC_OscConfig+0x4b0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d106      	bne.n	80036aa <HAL_RCC_OscConfig+0x31e>
 800369c:	4b66      	ldr	r3, [pc, #408]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6713      	str	r3, [r2, #112]	; 0x70
 80036a8:	e01c      	b.n	80036e4 <HAL_RCC_OscConfig+0x358>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0x340>
 80036b2:	4b61      	ldr	r3, [pc, #388]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a60      	ldr	r2, [pc, #384]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
 80036be:	4b5e      	ldr	r3, [pc, #376]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	4a5d      	ldr	r2, [pc, #372]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ca:	e00b      	b.n	80036e4 <HAL_RCC_OscConfig+0x358>
 80036cc:	4b5a      	ldr	r3, [pc, #360]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a59      	ldr	r2, [pc, #356]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
 80036d8:	4b57      	ldr	r3, [pc, #348]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80036de:	f023 0304 	bic.w	r3, r3, #4
 80036e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d015      	beq.n	8003718 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fd fbf2 	bl	8000ed4 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	e00a      	b.n	800370a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f4:	f7fd fbee 	bl	8000ed4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0d7      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370a:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ee      	beq.n	80036f4 <HAL_RCC_OscConfig+0x368>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd fbdc 	bl	8000ed4 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371e:	e00a      	b.n	8003736 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fd fbd8 	bl	8000ed4 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e0c1      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003736:	4b40      	ldr	r3, [pc, #256]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ee      	bne.n	8003720 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003748:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	4a3a      	ldr	r2, [pc, #232]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 800374e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003752:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80ad 	beq.w	80038b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800375e:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b08      	cmp	r3, #8
 8003768:	d060      	beq.n	800382c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d145      	bne.n	80037fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003772:	4b33      	ldr	r3, [pc, #204]	; (8003840 <HAL_RCC_OscConfig+0x4b4>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fbac 	bl	8000ed4 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003780:	f7fd fba8 	bl	8000ed4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e093      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	4b29      	ldr	r3, [pc, #164]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	019b      	lsls	r3, r3, #6
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	3b01      	subs	r3, #1
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	071b      	lsls	r3, r3, #28
 80037ca:	491b      	ldr	r1, [pc, #108]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d0:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x4b4>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fd fb7d 	bl	8000ed4 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7fd fb79 	bl	8000ed4 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e064      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x452>
 80037fc:	e05c      	b.n	80038b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCC_OscConfig+0x4b4>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd fb66 	bl	8000ed4 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380c:	f7fd fb62 	bl	8000ed4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e04d      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x480>
 800382a:	e045      	b.n	80038b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d107      	bne.n	8003844 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e040      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
 8003838:	40023800 	.word	0x40023800
 800383c:	40007000 	.word	0x40007000
 8003840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003844:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <HAL_RCC_OscConfig+0x538>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d030      	beq.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d129      	bne.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d122      	bne.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003874:	4013      	ands	r3, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800387a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800387c:	4293      	cmp	r3, r2
 800387e:	d119      	bne.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	3b01      	subs	r3, #1
 800388e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d10f      	bne.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800

080038c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e07b      	b.n	80039d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ea:	d009      	beq.n	8003900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	61da      	str	r2, [r3, #28]
 80038f2:	e005      	b.n	8003900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd f92a 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	ea42 0103 	orr.w	r1, r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	f003 0104 	and.w	r1, r3, #4
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f003 0210 	and.w	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <__errno>:
 80039dc:	4b01      	ldr	r3, [pc, #4]	; (80039e4 <__errno+0x8>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <__libc_init_array>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	4d0d      	ldr	r5, [pc, #52]	; (8003a20 <__libc_init_array+0x38>)
 80039ec:	4c0d      	ldr	r4, [pc, #52]	; (8003a24 <__libc_init_array+0x3c>)
 80039ee:	1b64      	subs	r4, r4, r5
 80039f0:	10a4      	asrs	r4, r4, #2
 80039f2:	2600      	movs	r6, #0
 80039f4:	42a6      	cmp	r6, r4
 80039f6:	d109      	bne.n	8003a0c <__libc_init_array+0x24>
 80039f8:	4d0b      	ldr	r5, [pc, #44]	; (8003a28 <__libc_init_array+0x40>)
 80039fa:	4c0c      	ldr	r4, [pc, #48]	; (8003a2c <__libc_init_array+0x44>)
 80039fc:	f000 fd1e 	bl	800443c <_init>
 8003a00:	1b64      	subs	r4, r4, r5
 8003a02:	10a4      	asrs	r4, r4, #2
 8003a04:	2600      	movs	r6, #0
 8003a06:	42a6      	cmp	r6, r4
 8003a08:	d105      	bne.n	8003a16 <__libc_init_array+0x2e>
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a10:	4798      	blx	r3
 8003a12:	3601      	adds	r6, #1
 8003a14:	e7ee      	b.n	80039f4 <__libc_init_array+0xc>
 8003a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1a:	4798      	blx	r3
 8003a1c:	3601      	adds	r6, #1
 8003a1e:	e7f2      	b.n	8003a06 <__libc_init_array+0x1e>
 8003a20:	08004590 	.word	0x08004590
 8003a24:	08004590 	.word	0x08004590
 8003a28:	08004590 	.word	0x08004590
 8003a2c:	08004594 	.word	0x08004594

08003a30 <memset>:
 8003a30:	4402      	add	r2, r0
 8003a32:	4603      	mov	r3, r0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d100      	bne.n	8003a3a <memset+0xa>
 8003a38:	4770      	bx	lr
 8003a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3e:	e7f9      	b.n	8003a34 <memset+0x4>

08003a40 <_puts_r>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	460e      	mov	r6, r1
 8003a44:	4605      	mov	r5, r0
 8003a46:	b118      	cbz	r0, 8003a50 <_puts_r+0x10>
 8003a48:	6983      	ldr	r3, [r0, #24]
 8003a4a:	b90b      	cbnz	r3, 8003a50 <_puts_r+0x10>
 8003a4c:	f000 fa48 	bl	8003ee0 <__sinit>
 8003a50:	69ab      	ldr	r3, [r5, #24]
 8003a52:	68ac      	ldr	r4, [r5, #8]
 8003a54:	b913      	cbnz	r3, 8003a5c <_puts_r+0x1c>
 8003a56:	4628      	mov	r0, r5
 8003a58:	f000 fa42 	bl	8003ee0 <__sinit>
 8003a5c:	4b2c      	ldr	r3, [pc, #176]	; (8003b10 <_puts_r+0xd0>)
 8003a5e:	429c      	cmp	r4, r3
 8003a60:	d120      	bne.n	8003aa4 <_puts_r+0x64>
 8003a62:	686c      	ldr	r4, [r5, #4]
 8003a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a66:	07db      	lsls	r3, r3, #31
 8003a68:	d405      	bmi.n	8003a76 <_puts_r+0x36>
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	0598      	lsls	r0, r3, #22
 8003a6e:	d402      	bmi.n	8003a76 <_puts_r+0x36>
 8003a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a72:	f000 fad3 	bl	800401c <__retarget_lock_acquire_recursive>
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	0719      	lsls	r1, r3, #28
 8003a7a:	d51d      	bpl.n	8003ab8 <_puts_r+0x78>
 8003a7c:	6923      	ldr	r3, [r4, #16]
 8003a7e:	b1db      	cbz	r3, 8003ab8 <_puts_r+0x78>
 8003a80:	3e01      	subs	r6, #1
 8003a82:	68a3      	ldr	r3, [r4, #8]
 8003a84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	60a3      	str	r3, [r4, #8]
 8003a8c:	bb39      	cbnz	r1, 8003ade <_puts_r+0x9e>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	da38      	bge.n	8003b04 <_puts_r+0xc4>
 8003a92:	4622      	mov	r2, r4
 8003a94:	210a      	movs	r1, #10
 8003a96:	4628      	mov	r0, r5
 8003a98:	f000 f848 	bl	8003b2c <__swbuf_r>
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d011      	beq.n	8003ac4 <_puts_r+0x84>
 8003aa0:	250a      	movs	r5, #10
 8003aa2:	e011      	b.n	8003ac8 <_puts_r+0x88>
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <_puts_r+0xd4>)
 8003aa6:	429c      	cmp	r4, r3
 8003aa8:	d101      	bne.n	8003aae <_puts_r+0x6e>
 8003aaa:	68ac      	ldr	r4, [r5, #8]
 8003aac:	e7da      	b.n	8003a64 <_puts_r+0x24>
 8003aae:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <_puts_r+0xd8>)
 8003ab0:	429c      	cmp	r4, r3
 8003ab2:	bf08      	it	eq
 8003ab4:	68ec      	ldreq	r4, [r5, #12]
 8003ab6:	e7d5      	b.n	8003a64 <_puts_r+0x24>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4628      	mov	r0, r5
 8003abc:	f000 f888 	bl	8003bd0 <__swsetup_r>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d0dd      	beq.n	8003a80 <_puts_r+0x40>
 8003ac4:	f04f 35ff 	mov.w	r5, #4294967295
 8003ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aca:	07da      	lsls	r2, r3, #31
 8003acc:	d405      	bmi.n	8003ada <_puts_r+0x9a>
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	059b      	lsls	r3, r3, #22
 8003ad2:	d402      	bmi.n	8003ada <_puts_r+0x9a>
 8003ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ad6:	f000 faa2 	bl	800401e <__retarget_lock_release_recursive>
 8003ada:	4628      	mov	r0, r5
 8003adc:	bd70      	pop	{r4, r5, r6, pc}
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da04      	bge.n	8003aec <_puts_r+0xac>
 8003ae2:	69a2      	ldr	r2, [r4, #24]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	dc06      	bgt.n	8003af6 <_puts_r+0xb6>
 8003ae8:	290a      	cmp	r1, #10
 8003aea:	d004      	beq.n	8003af6 <_puts_r+0xb6>
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	6022      	str	r2, [r4, #0]
 8003af2:	7019      	strb	r1, [r3, #0]
 8003af4:	e7c5      	b.n	8003a82 <_puts_r+0x42>
 8003af6:	4622      	mov	r2, r4
 8003af8:	4628      	mov	r0, r5
 8003afa:	f000 f817 	bl	8003b2c <__swbuf_r>
 8003afe:	3001      	adds	r0, #1
 8003b00:	d1bf      	bne.n	8003a82 <_puts_r+0x42>
 8003b02:	e7df      	b.n	8003ac4 <_puts_r+0x84>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	250a      	movs	r5, #10
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	6022      	str	r2, [r4, #0]
 8003b0c:	701d      	strb	r5, [r3, #0]
 8003b0e:	e7db      	b.n	8003ac8 <_puts_r+0x88>
 8003b10:	08004548 	.word	0x08004548
 8003b14:	08004568 	.word	0x08004568
 8003b18:	08004528 	.word	0x08004528

08003b1c <puts>:
 8003b1c:	4b02      	ldr	r3, [pc, #8]	; (8003b28 <puts+0xc>)
 8003b1e:	4601      	mov	r1, r0
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	f7ff bf8d 	b.w	8003a40 <_puts_r>
 8003b26:	bf00      	nop
 8003b28:	2000000c 	.word	0x2000000c

08003b2c <__swbuf_r>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	460e      	mov	r6, r1
 8003b30:	4614      	mov	r4, r2
 8003b32:	4605      	mov	r5, r0
 8003b34:	b118      	cbz	r0, 8003b3e <__swbuf_r+0x12>
 8003b36:	6983      	ldr	r3, [r0, #24]
 8003b38:	b90b      	cbnz	r3, 8003b3e <__swbuf_r+0x12>
 8003b3a:	f000 f9d1 	bl	8003ee0 <__sinit>
 8003b3e:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <__swbuf_r+0x98>)
 8003b40:	429c      	cmp	r4, r3
 8003b42:	d12b      	bne.n	8003b9c <__swbuf_r+0x70>
 8003b44:	686c      	ldr	r4, [r5, #4]
 8003b46:	69a3      	ldr	r3, [r4, #24]
 8003b48:	60a3      	str	r3, [r4, #8]
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	071a      	lsls	r2, r3, #28
 8003b4e:	d52f      	bpl.n	8003bb0 <__swbuf_r+0x84>
 8003b50:	6923      	ldr	r3, [r4, #16]
 8003b52:	b36b      	cbz	r3, 8003bb0 <__swbuf_r+0x84>
 8003b54:	6923      	ldr	r3, [r4, #16]
 8003b56:	6820      	ldr	r0, [r4, #0]
 8003b58:	1ac0      	subs	r0, r0, r3
 8003b5a:	6963      	ldr	r3, [r4, #20]
 8003b5c:	b2f6      	uxtb	r6, r6
 8003b5e:	4283      	cmp	r3, r0
 8003b60:	4637      	mov	r7, r6
 8003b62:	dc04      	bgt.n	8003b6e <__swbuf_r+0x42>
 8003b64:	4621      	mov	r1, r4
 8003b66:	4628      	mov	r0, r5
 8003b68:	f000 f926 	bl	8003db8 <_fflush_r>
 8003b6c:	bb30      	cbnz	r0, 8003bbc <__swbuf_r+0x90>
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	60a3      	str	r3, [r4, #8]
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	6022      	str	r2, [r4, #0]
 8003b7a:	701e      	strb	r6, [r3, #0]
 8003b7c:	6963      	ldr	r3, [r4, #20]
 8003b7e:	3001      	adds	r0, #1
 8003b80:	4283      	cmp	r3, r0
 8003b82:	d004      	beq.n	8003b8e <__swbuf_r+0x62>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	07db      	lsls	r3, r3, #31
 8003b88:	d506      	bpl.n	8003b98 <__swbuf_r+0x6c>
 8003b8a:	2e0a      	cmp	r6, #10
 8003b8c:	d104      	bne.n	8003b98 <__swbuf_r+0x6c>
 8003b8e:	4621      	mov	r1, r4
 8003b90:	4628      	mov	r0, r5
 8003b92:	f000 f911 	bl	8003db8 <_fflush_r>
 8003b96:	b988      	cbnz	r0, 8003bbc <__swbuf_r+0x90>
 8003b98:	4638      	mov	r0, r7
 8003b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <__swbuf_r+0x9c>)
 8003b9e:	429c      	cmp	r4, r3
 8003ba0:	d101      	bne.n	8003ba6 <__swbuf_r+0x7a>
 8003ba2:	68ac      	ldr	r4, [r5, #8]
 8003ba4:	e7cf      	b.n	8003b46 <__swbuf_r+0x1a>
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <__swbuf_r+0xa0>)
 8003ba8:	429c      	cmp	r4, r3
 8003baa:	bf08      	it	eq
 8003bac:	68ec      	ldreq	r4, [r5, #12]
 8003bae:	e7ca      	b.n	8003b46 <__swbuf_r+0x1a>
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f000 f80c 	bl	8003bd0 <__swsetup_r>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d0cb      	beq.n	8003b54 <__swbuf_r+0x28>
 8003bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8003bc0:	e7ea      	b.n	8003b98 <__swbuf_r+0x6c>
 8003bc2:	bf00      	nop
 8003bc4:	08004548 	.word	0x08004548
 8003bc8:	08004568 	.word	0x08004568
 8003bcc:	08004528 	.word	0x08004528

08003bd0 <__swsetup_r>:
 8003bd0:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <__swsetup_r+0xcc>)
 8003bd2:	b570      	push	{r4, r5, r6, lr}
 8003bd4:	681d      	ldr	r5, [r3, #0]
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	b125      	cbz	r5, 8003be6 <__swsetup_r+0x16>
 8003bdc:	69ab      	ldr	r3, [r5, #24]
 8003bde:	b913      	cbnz	r3, 8003be6 <__swsetup_r+0x16>
 8003be0:	4628      	mov	r0, r5
 8003be2:	f000 f97d 	bl	8003ee0 <__sinit>
 8003be6:	4b2e      	ldr	r3, [pc, #184]	; (8003ca0 <__swsetup_r+0xd0>)
 8003be8:	429c      	cmp	r4, r3
 8003bea:	d10f      	bne.n	8003c0c <__swsetup_r+0x3c>
 8003bec:	686c      	ldr	r4, [r5, #4]
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bf4:	0719      	lsls	r1, r3, #28
 8003bf6:	d42c      	bmi.n	8003c52 <__swsetup_r+0x82>
 8003bf8:	06dd      	lsls	r5, r3, #27
 8003bfa:	d411      	bmi.n	8003c20 <__swsetup_r+0x50>
 8003bfc:	2309      	movs	r3, #9
 8003bfe:	6033      	str	r3, [r6, #0]
 8003c00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0a:	e03e      	b.n	8003c8a <__swsetup_r+0xba>
 8003c0c:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <__swsetup_r+0xd4>)
 8003c0e:	429c      	cmp	r4, r3
 8003c10:	d101      	bne.n	8003c16 <__swsetup_r+0x46>
 8003c12:	68ac      	ldr	r4, [r5, #8]
 8003c14:	e7eb      	b.n	8003bee <__swsetup_r+0x1e>
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <__swsetup_r+0xd8>)
 8003c18:	429c      	cmp	r4, r3
 8003c1a:	bf08      	it	eq
 8003c1c:	68ec      	ldreq	r4, [r5, #12]
 8003c1e:	e7e6      	b.n	8003bee <__swsetup_r+0x1e>
 8003c20:	0758      	lsls	r0, r3, #29
 8003c22:	d512      	bpl.n	8003c4a <__swsetup_r+0x7a>
 8003c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c26:	b141      	cbz	r1, 8003c3a <__swsetup_r+0x6a>
 8003c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c2c:	4299      	cmp	r1, r3
 8003c2e:	d002      	beq.n	8003c36 <__swsetup_r+0x66>
 8003c30:	4630      	mov	r0, r6
 8003c32:	f000 fa5b 	bl	80040ec <_free_r>
 8003c36:	2300      	movs	r3, #0
 8003c38:	6363      	str	r3, [r4, #52]	; 0x34
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c40:	81a3      	strh	r3, [r4, #12]
 8003c42:	2300      	movs	r3, #0
 8003c44:	6063      	str	r3, [r4, #4]
 8003c46:	6923      	ldr	r3, [r4, #16]
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	f043 0308 	orr.w	r3, r3, #8
 8003c50:	81a3      	strh	r3, [r4, #12]
 8003c52:	6923      	ldr	r3, [r4, #16]
 8003c54:	b94b      	cbnz	r3, 8003c6a <__swsetup_r+0x9a>
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c60:	d003      	beq.n	8003c6a <__swsetup_r+0x9a>
 8003c62:	4621      	mov	r1, r4
 8003c64:	4630      	mov	r0, r6
 8003c66:	f000 fa01 	bl	800406c <__smakebuf_r>
 8003c6a:	89a0      	ldrh	r0, [r4, #12]
 8003c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c70:	f010 0301 	ands.w	r3, r0, #1
 8003c74:	d00a      	beq.n	8003c8c <__swsetup_r+0xbc>
 8003c76:	2300      	movs	r3, #0
 8003c78:	60a3      	str	r3, [r4, #8]
 8003c7a:	6963      	ldr	r3, [r4, #20]
 8003c7c:	425b      	negs	r3, r3
 8003c7e:	61a3      	str	r3, [r4, #24]
 8003c80:	6923      	ldr	r3, [r4, #16]
 8003c82:	b943      	cbnz	r3, 8003c96 <__swsetup_r+0xc6>
 8003c84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c88:	d1ba      	bne.n	8003c00 <__swsetup_r+0x30>
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	0781      	lsls	r1, r0, #30
 8003c8e:	bf58      	it	pl
 8003c90:	6963      	ldrpl	r3, [r4, #20]
 8003c92:	60a3      	str	r3, [r4, #8]
 8003c94:	e7f4      	b.n	8003c80 <__swsetup_r+0xb0>
 8003c96:	2000      	movs	r0, #0
 8003c98:	e7f7      	b.n	8003c8a <__swsetup_r+0xba>
 8003c9a:	bf00      	nop
 8003c9c:	2000000c 	.word	0x2000000c
 8003ca0:	08004548 	.word	0x08004548
 8003ca4:	08004568 	.word	0x08004568
 8003ca8:	08004528 	.word	0x08004528

08003cac <__sflush_r>:
 8003cac:	898a      	ldrh	r2, [r1, #12]
 8003cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	0710      	lsls	r0, r2, #28
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	d458      	bmi.n	8003d6c <__sflush_r+0xc0>
 8003cba:	684b      	ldr	r3, [r1, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	dc05      	bgt.n	8003ccc <__sflush_r+0x20>
 8003cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	dc02      	bgt.n	8003ccc <__sflush_r+0x20>
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cce:	2e00      	cmp	r6, #0
 8003cd0:	d0f9      	beq.n	8003cc6 <__sflush_r+0x1a>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003cd8:	682f      	ldr	r7, [r5, #0]
 8003cda:	602b      	str	r3, [r5, #0]
 8003cdc:	d032      	beq.n	8003d44 <__sflush_r+0x98>
 8003cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	075a      	lsls	r2, r3, #29
 8003ce4:	d505      	bpl.n	8003cf2 <__sflush_r+0x46>
 8003ce6:	6863      	ldr	r3, [r4, #4]
 8003ce8:	1ac0      	subs	r0, r0, r3
 8003cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cec:	b10b      	cbz	r3, 8003cf2 <__sflush_r+0x46>
 8003cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cf0:	1ac0      	subs	r0, r0, r3
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cf8:	6a21      	ldr	r1, [r4, #32]
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	47b0      	blx	r6
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	d106      	bne.n	8003d12 <__sflush_r+0x66>
 8003d04:	6829      	ldr	r1, [r5, #0]
 8003d06:	291d      	cmp	r1, #29
 8003d08:	d82c      	bhi.n	8003d64 <__sflush_r+0xb8>
 8003d0a:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <__sflush_r+0x108>)
 8003d0c:	40ca      	lsrs	r2, r1
 8003d0e:	07d6      	lsls	r6, r2, #31
 8003d10:	d528      	bpl.n	8003d64 <__sflush_r+0xb8>
 8003d12:	2200      	movs	r2, #0
 8003d14:	6062      	str	r2, [r4, #4]
 8003d16:	04d9      	lsls	r1, r3, #19
 8003d18:	6922      	ldr	r2, [r4, #16]
 8003d1a:	6022      	str	r2, [r4, #0]
 8003d1c:	d504      	bpl.n	8003d28 <__sflush_r+0x7c>
 8003d1e:	1c42      	adds	r2, r0, #1
 8003d20:	d101      	bne.n	8003d26 <__sflush_r+0x7a>
 8003d22:	682b      	ldr	r3, [r5, #0]
 8003d24:	b903      	cbnz	r3, 8003d28 <__sflush_r+0x7c>
 8003d26:	6560      	str	r0, [r4, #84]	; 0x54
 8003d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d2a:	602f      	str	r7, [r5, #0]
 8003d2c:	2900      	cmp	r1, #0
 8003d2e:	d0ca      	beq.n	8003cc6 <__sflush_r+0x1a>
 8003d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d34:	4299      	cmp	r1, r3
 8003d36:	d002      	beq.n	8003d3e <__sflush_r+0x92>
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f000 f9d7 	bl	80040ec <_free_r>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	6360      	str	r0, [r4, #52]	; 0x34
 8003d42:	e7c1      	b.n	8003cc8 <__sflush_r+0x1c>
 8003d44:	6a21      	ldr	r1, [r4, #32]
 8003d46:	2301      	movs	r3, #1
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b0      	blx	r6
 8003d4c:	1c41      	adds	r1, r0, #1
 8003d4e:	d1c7      	bne.n	8003ce0 <__sflush_r+0x34>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0c4      	beq.n	8003ce0 <__sflush_r+0x34>
 8003d56:	2b1d      	cmp	r3, #29
 8003d58:	d001      	beq.n	8003d5e <__sflush_r+0xb2>
 8003d5a:	2b16      	cmp	r3, #22
 8003d5c:	d101      	bne.n	8003d62 <__sflush_r+0xb6>
 8003d5e:	602f      	str	r7, [r5, #0]
 8003d60:	e7b1      	b.n	8003cc6 <__sflush_r+0x1a>
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d68:	81a3      	strh	r3, [r4, #12]
 8003d6a:	e7ad      	b.n	8003cc8 <__sflush_r+0x1c>
 8003d6c:	690f      	ldr	r7, [r1, #16]
 8003d6e:	2f00      	cmp	r7, #0
 8003d70:	d0a9      	beq.n	8003cc6 <__sflush_r+0x1a>
 8003d72:	0793      	lsls	r3, r2, #30
 8003d74:	680e      	ldr	r6, [r1, #0]
 8003d76:	bf08      	it	eq
 8003d78:	694b      	ldreq	r3, [r1, #20]
 8003d7a:	600f      	str	r7, [r1, #0]
 8003d7c:	bf18      	it	ne
 8003d7e:	2300      	movne	r3, #0
 8003d80:	eba6 0807 	sub.w	r8, r6, r7
 8003d84:	608b      	str	r3, [r1, #8]
 8003d86:	f1b8 0f00 	cmp.w	r8, #0
 8003d8a:	dd9c      	ble.n	8003cc6 <__sflush_r+0x1a>
 8003d8c:	6a21      	ldr	r1, [r4, #32]
 8003d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d90:	4643      	mov	r3, r8
 8003d92:	463a      	mov	r2, r7
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b0      	blx	r6
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	dc06      	bgt.n	8003daa <__sflush_r+0xfe>
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	e78e      	b.n	8003cc8 <__sflush_r+0x1c>
 8003daa:	4407      	add	r7, r0
 8003dac:	eba8 0800 	sub.w	r8, r8, r0
 8003db0:	e7e9      	b.n	8003d86 <__sflush_r+0xda>
 8003db2:	bf00      	nop
 8003db4:	20400001 	.word	0x20400001

08003db8 <_fflush_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	690b      	ldr	r3, [r1, #16]
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	b913      	cbnz	r3, 8003dc8 <_fflush_r+0x10>
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
 8003dc8:	b118      	cbz	r0, 8003dd2 <_fflush_r+0x1a>
 8003dca:	6983      	ldr	r3, [r0, #24]
 8003dcc:	b90b      	cbnz	r3, 8003dd2 <_fflush_r+0x1a>
 8003dce:	f000 f887 	bl	8003ee0 <__sinit>
 8003dd2:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <_fflush_r+0x6c>)
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	d11b      	bne.n	8003e10 <_fflush_r+0x58>
 8003dd8:	686c      	ldr	r4, [r5, #4]
 8003dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ef      	beq.n	8003dc2 <_fflush_r+0xa>
 8003de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003de4:	07d0      	lsls	r0, r2, #31
 8003de6:	d404      	bmi.n	8003df2 <_fflush_r+0x3a>
 8003de8:	0599      	lsls	r1, r3, #22
 8003dea:	d402      	bmi.n	8003df2 <_fflush_r+0x3a>
 8003dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dee:	f000 f915 	bl	800401c <__retarget_lock_acquire_recursive>
 8003df2:	4628      	mov	r0, r5
 8003df4:	4621      	mov	r1, r4
 8003df6:	f7ff ff59 	bl	8003cac <__sflush_r>
 8003dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dfc:	07da      	lsls	r2, r3, #31
 8003dfe:	4605      	mov	r5, r0
 8003e00:	d4e0      	bmi.n	8003dc4 <_fflush_r+0xc>
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	059b      	lsls	r3, r3, #22
 8003e06:	d4dd      	bmi.n	8003dc4 <_fflush_r+0xc>
 8003e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e0a:	f000 f908 	bl	800401e <__retarget_lock_release_recursive>
 8003e0e:	e7d9      	b.n	8003dc4 <_fflush_r+0xc>
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <_fflush_r+0x70>)
 8003e12:	429c      	cmp	r4, r3
 8003e14:	d101      	bne.n	8003e1a <_fflush_r+0x62>
 8003e16:	68ac      	ldr	r4, [r5, #8]
 8003e18:	e7df      	b.n	8003dda <_fflush_r+0x22>
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <_fflush_r+0x74>)
 8003e1c:	429c      	cmp	r4, r3
 8003e1e:	bf08      	it	eq
 8003e20:	68ec      	ldreq	r4, [r5, #12]
 8003e22:	e7da      	b.n	8003dda <_fflush_r+0x22>
 8003e24:	08004548 	.word	0x08004548
 8003e28:	08004568 	.word	0x08004568
 8003e2c:	08004528 	.word	0x08004528

08003e30 <std>:
 8003e30:	2300      	movs	r3, #0
 8003e32:	b510      	push	{r4, lr}
 8003e34:	4604      	mov	r4, r0
 8003e36:	e9c0 3300 	strd	r3, r3, [r0]
 8003e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e3e:	6083      	str	r3, [r0, #8]
 8003e40:	8181      	strh	r1, [r0, #12]
 8003e42:	6643      	str	r3, [r0, #100]	; 0x64
 8003e44:	81c2      	strh	r2, [r0, #14]
 8003e46:	6183      	str	r3, [r0, #24]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	305c      	adds	r0, #92	; 0x5c
 8003e4e:	f7ff fdef 	bl	8003a30 <memset>
 8003e52:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <std+0x38>)
 8003e54:	6263      	str	r3, [r4, #36]	; 0x24
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <std+0x3c>)
 8003e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <std+0x40>)
 8003e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <std+0x44>)
 8003e60:	6224      	str	r4, [r4, #32]
 8003e62:	6323      	str	r3, [r4, #48]	; 0x30
 8003e64:	bd10      	pop	{r4, pc}
 8003e66:	bf00      	nop
 8003e68:	080042cd 	.word	0x080042cd
 8003e6c:	080042ef 	.word	0x080042ef
 8003e70:	08004327 	.word	0x08004327
 8003e74:	0800434b 	.word	0x0800434b

08003e78 <_cleanup_r>:
 8003e78:	4901      	ldr	r1, [pc, #4]	; (8003e80 <_cleanup_r+0x8>)
 8003e7a:	f000 b8af 	b.w	8003fdc <_fwalk_reent>
 8003e7e:	bf00      	nop
 8003e80:	08003db9 	.word	0x08003db9

08003e84 <__sfmoreglue>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	2268      	movs	r2, #104	; 0x68
 8003e88:	1e4d      	subs	r5, r1, #1
 8003e8a:	4355      	muls	r5, r2
 8003e8c:	460e      	mov	r6, r1
 8003e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e92:	f000 f997 	bl	80041c4 <_malloc_r>
 8003e96:	4604      	mov	r4, r0
 8003e98:	b140      	cbz	r0, 8003eac <__sfmoreglue+0x28>
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8003ea0:	300c      	adds	r0, #12
 8003ea2:	60a0      	str	r0, [r4, #8]
 8003ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ea8:	f7ff fdc2 	bl	8003a30 <memset>
 8003eac:	4620      	mov	r0, r4
 8003eae:	bd70      	pop	{r4, r5, r6, pc}

08003eb0 <__sfp_lock_acquire>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	; (8003eb8 <__sfp_lock_acquire+0x8>)
 8003eb2:	f000 b8b3 	b.w	800401c <__retarget_lock_acquire_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	20000305 	.word	0x20000305

08003ebc <__sfp_lock_release>:
 8003ebc:	4801      	ldr	r0, [pc, #4]	; (8003ec4 <__sfp_lock_release+0x8>)
 8003ebe:	f000 b8ae 	b.w	800401e <__retarget_lock_release_recursive>
 8003ec2:	bf00      	nop
 8003ec4:	20000305 	.word	0x20000305

08003ec8 <__sinit_lock_acquire>:
 8003ec8:	4801      	ldr	r0, [pc, #4]	; (8003ed0 <__sinit_lock_acquire+0x8>)
 8003eca:	f000 b8a7 	b.w	800401c <__retarget_lock_acquire_recursive>
 8003ece:	bf00      	nop
 8003ed0:	20000306 	.word	0x20000306

08003ed4 <__sinit_lock_release>:
 8003ed4:	4801      	ldr	r0, [pc, #4]	; (8003edc <__sinit_lock_release+0x8>)
 8003ed6:	f000 b8a2 	b.w	800401e <__retarget_lock_release_recursive>
 8003eda:	bf00      	nop
 8003edc:	20000306 	.word	0x20000306

08003ee0 <__sinit>:
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	f7ff fff0 	bl	8003ec8 <__sinit_lock_acquire>
 8003ee8:	69a3      	ldr	r3, [r4, #24]
 8003eea:	b11b      	cbz	r3, 8003ef4 <__sinit+0x14>
 8003eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef0:	f7ff bff0 	b.w	8003ed4 <__sinit_lock_release>
 8003ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <__sinit+0x68>)
 8003efc:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <__sinit+0x6c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	bf04      	itt	eq
 8003f06:	2301      	moveq	r3, #1
 8003f08:	61a3      	streq	r3, [r4, #24]
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f000 f820 	bl	8003f50 <__sfp>
 8003f10:	6060      	str	r0, [r4, #4]
 8003f12:	4620      	mov	r0, r4
 8003f14:	f000 f81c 	bl	8003f50 <__sfp>
 8003f18:	60a0      	str	r0, [r4, #8]
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f000 f818 	bl	8003f50 <__sfp>
 8003f20:	2200      	movs	r2, #0
 8003f22:	60e0      	str	r0, [r4, #12]
 8003f24:	2104      	movs	r1, #4
 8003f26:	6860      	ldr	r0, [r4, #4]
 8003f28:	f7ff ff82 	bl	8003e30 <std>
 8003f2c:	68a0      	ldr	r0, [r4, #8]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	2109      	movs	r1, #9
 8003f32:	f7ff ff7d 	bl	8003e30 <std>
 8003f36:	68e0      	ldr	r0, [r4, #12]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	2112      	movs	r1, #18
 8003f3c:	f7ff ff78 	bl	8003e30 <std>
 8003f40:	2301      	movs	r3, #1
 8003f42:	61a3      	str	r3, [r4, #24]
 8003f44:	e7d2      	b.n	8003eec <__sinit+0xc>
 8003f46:	bf00      	nop
 8003f48:	08004524 	.word	0x08004524
 8003f4c:	08003e79 	.word	0x08003e79

08003f50 <__sfp>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	4607      	mov	r7, r0
 8003f54:	f7ff ffac 	bl	8003eb0 <__sfp_lock_acquire>
 8003f58:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <__sfp+0x84>)
 8003f5a:	681e      	ldr	r6, [r3, #0]
 8003f5c:	69b3      	ldr	r3, [r6, #24]
 8003f5e:	b913      	cbnz	r3, 8003f66 <__sfp+0x16>
 8003f60:	4630      	mov	r0, r6
 8003f62:	f7ff ffbd 	bl	8003ee0 <__sinit>
 8003f66:	3648      	adds	r6, #72	; 0x48
 8003f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	d503      	bpl.n	8003f78 <__sfp+0x28>
 8003f70:	6833      	ldr	r3, [r6, #0]
 8003f72:	b30b      	cbz	r3, 8003fb8 <__sfp+0x68>
 8003f74:	6836      	ldr	r6, [r6, #0]
 8003f76:	e7f7      	b.n	8003f68 <__sfp+0x18>
 8003f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f7c:	b9d5      	cbnz	r5, 8003fb4 <__sfp+0x64>
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <__sfp+0x88>)
 8003f80:	60e3      	str	r3, [r4, #12]
 8003f82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f86:	6665      	str	r5, [r4, #100]	; 0x64
 8003f88:	f000 f847 	bl	800401a <__retarget_lock_init_recursive>
 8003f8c:	f7ff ff96 	bl	8003ebc <__sfp_lock_release>
 8003f90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f98:	6025      	str	r5, [r4, #0]
 8003f9a:	61a5      	str	r5, [r4, #24]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fa4:	f7ff fd44 	bl	8003a30 <memset>
 8003fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb4:	3468      	adds	r4, #104	; 0x68
 8003fb6:	e7d9      	b.n	8003f6c <__sfp+0x1c>
 8003fb8:	2104      	movs	r1, #4
 8003fba:	4638      	mov	r0, r7
 8003fbc:	f7ff ff62 	bl	8003e84 <__sfmoreglue>
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	6030      	str	r0, [r6, #0]
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d1d5      	bne.n	8003f74 <__sfp+0x24>
 8003fc8:	f7ff ff78 	bl	8003ebc <__sfp_lock_release>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	e7ee      	b.n	8003fb0 <__sfp+0x60>
 8003fd2:	bf00      	nop
 8003fd4:	08004524 	.word	0x08004524
 8003fd8:	ffff0001 	.word	0xffff0001

08003fdc <_fwalk_reent>:
 8003fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	4688      	mov	r8, r1
 8003fe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003fe8:	2700      	movs	r7, #0
 8003fea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fee:	f1b9 0901 	subs.w	r9, r9, #1
 8003ff2:	d505      	bpl.n	8004000 <_fwalk_reent+0x24>
 8003ff4:	6824      	ldr	r4, [r4, #0]
 8003ff6:	2c00      	cmp	r4, #0
 8003ff8:	d1f7      	bne.n	8003fea <_fwalk_reent+0xe>
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004000:	89ab      	ldrh	r3, [r5, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d907      	bls.n	8004016 <_fwalk_reent+0x3a>
 8004006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800400a:	3301      	adds	r3, #1
 800400c:	d003      	beq.n	8004016 <_fwalk_reent+0x3a>
 800400e:	4629      	mov	r1, r5
 8004010:	4630      	mov	r0, r6
 8004012:	47c0      	blx	r8
 8004014:	4307      	orrs	r7, r0
 8004016:	3568      	adds	r5, #104	; 0x68
 8004018:	e7e9      	b.n	8003fee <_fwalk_reent+0x12>

0800401a <__retarget_lock_init_recursive>:
 800401a:	4770      	bx	lr

0800401c <__retarget_lock_acquire_recursive>:
 800401c:	4770      	bx	lr

0800401e <__retarget_lock_release_recursive>:
 800401e:	4770      	bx	lr

08004020 <__swhatbuf_r>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	460e      	mov	r6, r1
 8004024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004028:	2900      	cmp	r1, #0
 800402a:	b096      	sub	sp, #88	; 0x58
 800402c:	4614      	mov	r4, r2
 800402e:	461d      	mov	r5, r3
 8004030:	da08      	bge.n	8004044 <__swhatbuf_r+0x24>
 8004032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	602a      	str	r2, [r5, #0]
 800403a:	061a      	lsls	r2, r3, #24
 800403c:	d410      	bmi.n	8004060 <__swhatbuf_r+0x40>
 800403e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004042:	e00e      	b.n	8004062 <__swhatbuf_r+0x42>
 8004044:	466a      	mov	r2, sp
 8004046:	f000 f9a7 	bl	8004398 <_fstat_r>
 800404a:	2800      	cmp	r0, #0
 800404c:	dbf1      	blt.n	8004032 <__swhatbuf_r+0x12>
 800404e:	9a01      	ldr	r2, [sp, #4]
 8004050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004058:	425a      	negs	r2, r3
 800405a:	415a      	adcs	r2, r3
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	e7ee      	b.n	800403e <__swhatbuf_r+0x1e>
 8004060:	2340      	movs	r3, #64	; 0x40
 8004062:	2000      	movs	r0, #0
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	b016      	add	sp, #88	; 0x58
 8004068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800406c <__smakebuf_r>:
 800406c:	898b      	ldrh	r3, [r1, #12]
 800406e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004070:	079d      	lsls	r5, r3, #30
 8004072:	4606      	mov	r6, r0
 8004074:	460c      	mov	r4, r1
 8004076:	d507      	bpl.n	8004088 <__smakebuf_r+0x1c>
 8004078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	6123      	str	r3, [r4, #16]
 8004080:	2301      	movs	r3, #1
 8004082:	6163      	str	r3, [r4, #20]
 8004084:	b002      	add	sp, #8
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	ab01      	add	r3, sp, #4
 800408a:	466a      	mov	r2, sp
 800408c:	f7ff ffc8 	bl	8004020 <__swhatbuf_r>
 8004090:	9900      	ldr	r1, [sp, #0]
 8004092:	4605      	mov	r5, r0
 8004094:	4630      	mov	r0, r6
 8004096:	f000 f895 	bl	80041c4 <_malloc_r>
 800409a:	b948      	cbnz	r0, 80040b0 <__smakebuf_r+0x44>
 800409c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040a0:	059a      	lsls	r2, r3, #22
 80040a2:	d4ef      	bmi.n	8004084 <__smakebuf_r+0x18>
 80040a4:	f023 0303 	bic.w	r3, r3, #3
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	81a3      	strh	r3, [r4, #12]
 80040ae:	e7e3      	b.n	8004078 <__smakebuf_r+0xc>
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <__smakebuf_r+0x7c>)
 80040b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	6020      	str	r0, [r4, #0]
 80040b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	9b00      	ldr	r3, [sp, #0]
 80040c0:	6163      	str	r3, [r4, #20]
 80040c2:	9b01      	ldr	r3, [sp, #4]
 80040c4:	6120      	str	r0, [r4, #16]
 80040c6:	b15b      	cbz	r3, 80040e0 <__smakebuf_r+0x74>
 80040c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040cc:	4630      	mov	r0, r6
 80040ce:	f000 f975 	bl	80043bc <_isatty_r>
 80040d2:	b128      	cbz	r0, 80040e0 <__smakebuf_r+0x74>
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	81a3      	strh	r3, [r4, #12]
 80040e0:	89a0      	ldrh	r0, [r4, #12]
 80040e2:	4305      	orrs	r5, r0
 80040e4:	81a5      	strh	r5, [r4, #12]
 80040e6:	e7cd      	b.n	8004084 <__smakebuf_r+0x18>
 80040e8:	08003e79 	.word	0x08003e79

080040ec <_free_r>:
 80040ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ee:	2900      	cmp	r1, #0
 80040f0:	d044      	beq.n	800417c <_free_r+0x90>
 80040f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f6:	9001      	str	r0, [sp, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f1a1 0404 	sub.w	r4, r1, #4
 80040fe:	bfb8      	it	lt
 8004100:	18e4      	addlt	r4, r4, r3
 8004102:	f000 f97d 	bl	8004400 <__malloc_lock>
 8004106:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <_free_r+0x94>)
 8004108:	9801      	ldr	r0, [sp, #4]
 800410a:	6813      	ldr	r3, [r2, #0]
 800410c:	b933      	cbnz	r3, 800411c <_free_r+0x30>
 800410e:	6063      	str	r3, [r4, #4]
 8004110:	6014      	str	r4, [r2, #0]
 8004112:	b003      	add	sp, #12
 8004114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004118:	f000 b978 	b.w	800440c <__malloc_unlock>
 800411c:	42a3      	cmp	r3, r4
 800411e:	d908      	bls.n	8004132 <_free_r+0x46>
 8004120:	6825      	ldr	r5, [r4, #0]
 8004122:	1961      	adds	r1, r4, r5
 8004124:	428b      	cmp	r3, r1
 8004126:	bf01      	itttt	eq
 8004128:	6819      	ldreq	r1, [r3, #0]
 800412a:	685b      	ldreq	r3, [r3, #4]
 800412c:	1949      	addeq	r1, r1, r5
 800412e:	6021      	streq	r1, [r4, #0]
 8004130:	e7ed      	b.n	800410e <_free_r+0x22>
 8004132:	461a      	mov	r2, r3
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b10b      	cbz	r3, 800413c <_free_r+0x50>
 8004138:	42a3      	cmp	r3, r4
 800413a:	d9fa      	bls.n	8004132 <_free_r+0x46>
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	1855      	adds	r5, r2, r1
 8004140:	42a5      	cmp	r5, r4
 8004142:	d10b      	bne.n	800415c <_free_r+0x70>
 8004144:	6824      	ldr	r4, [r4, #0]
 8004146:	4421      	add	r1, r4
 8004148:	1854      	adds	r4, r2, r1
 800414a:	42a3      	cmp	r3, r4
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	d1e0      	bne.n	8004112 <_free_r+0x26>
 8004150:	681c      	ldr	r4, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	6053      	str	r3, [r2, #4]
 8004156:	4421      	add	r1, r4
 8004158:	6011      	str	r1, [r2, #0]
 800415a:	e7da      	b.n	8004112 <_free_r+0x26>
 800415c:	d902      	bls.n	8004164 <_free_r+0x78>
 800415e:	230c      	movs	r3, #12
 8004160:	6003      	str	r3, [r0, #0]
 8004162:	e7d6      	b.n	8004112 <_free_r+0x26>
 8004164:	6825      	ldr	r5, [r4, #0]
 8004166:	1961      	adds	r1, r4, r5
 8004168:	428b      	cmp	r3, r1
 800416a:	bf04      	itt	eq
 800416c:	6819      	ldreq	r1, [r3, #0]
 800416e:	685b      	ldreq	r3, [r3, #4]
 8004170:	6063      	str	r3, [r4, #4]
 8004172:	bf04      	itt	eq
 8004174:	1949      	addeq	r1, r1, r5
 8004176:	6021      	streq	r1, [r4, #0]
 8004178:	6054      	str	r4, [r2, #4]
 800417a:	e7ca      	b.n	8004112 <_free_r+0x26>
 800417c:	b003      	add	sp, #12
 800417e:	bd30      	pop	{r4, r5, pc}
 8004180:	20000308 	.word	0x20000308

08004184 <sbrk_aligned>:
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	4e0e      	ldr	r6, [pc, #56]	; (80041c0 <sbrk_aligned+0x3c>)
 8004188:	460c      	mov	r4, r1
 800418a:	6831      	ldr	r1, [r6, #0]
 800418c:	4605      	mov	r5, r0
 800418e:	b911      	cbnz	r1, 8004196 <sbrk_aligned+0x12>
 8004190:	f000 f88c 	bl	80042ac <_sbrk_r>
 8004194:	6030      	str	r0, [r6, #0]
 8004196:	4621      	mov	r1, r4
 8004198:	4628      	mov	r0, r5
 800419a:	f000 f887 	bl	80042ac <_sbrk_r>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	d00a      	beq.n	80041b8 <sbrk_aligned+0x34>
 80041a2:	1cc4      	adds	r4, r0, #3
 80041a4:	f024 0403 	bic.w	r4, r4, #3
 80041a8:	42a0      	cmp	r0, r4
 80041aa:	d007      	beq.n	80041bc <sbrk_aligned+0x38>
 80041ac:	1a21      	subs	r1, r4, r0
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 f87c 	bl	80042ac <_sbrk_r>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d101      	bne.n	80041bc <sbrk_aligned+0x38>
 80041b8:	f04f 34ff 	mov.w	r4, #4294967295
 80041bc:	4620      	mov	r0, r4
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	2000030c 	.word	0x2000030c

080041c4 <_malloc_r>:
 80041c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c8:	1ccd      	adds	r5, r1, #3
 80041ca:	f025 0503 	bic.w	r5, r5, #3
 80041ce:	3508      	adds	r5, #8
 80041d0:	2d0c      	cmp	r5, #12
 80041d2:	bf38      	it	cc
 80041d4:	250c      	movcc	r5, #12
 80041d6:	2d00      	cmp	r5, #0
 80041d8:	4607      	mov	r7, r0
 80041da:	db01      	blt.n	80041e0 <_malloc_r+0x1c>
 80041dc:	42a9      	cmp	r1, r5
 80041de:	d905      	bls.n	80041ec <_malloc_r+0x28>
 80041e0:	230c      	movs	r3, #12
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	2600      	movs	r6, #0
 80041e6:	4630      	mov	r0, r6
 80041e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ec:	4e2e      	ldr	r6, [pc, #184]	; (80042a8 <_malloc_r+0xe4>)
 80041ee:	f000 f907 	bl	8004400 <__malloc_lock>
 80041f2:	6833      	ldr	r3, [r6, #0]
 80041f4:	461c      	mov	r4, r3
 80041f6:	bb34      	cbnz	r4, 8004246 <_malloc_r+0x82>
 80041f8:	4629      	mov	r1, r5
 80041fa:	4638      	mov	r0, r7
 80041fc:	f7ff ffc2 	bl	8004184 <sbrk_aligned>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	4604      	mov	r4, r0
 8004204:	d14d      	bne.n	80042a2 <_malloc_r+0xde>
 8004206:	6834      	ldr	r4, [r6, #0]
 8004208:	4626      	mov	r6, r4
 800420a:	2e00      	cmp	r6, #0
 800420c:	d140      	bne.n	8004290 <_malloc_r+0xcc>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	4631      	mov	r1, r6
 8004212:	4638      	mov	r0, r7
 8004214:	eb04 0803 	add.w	r8, r4, r3
 8004218:	f000 f848 	bl	80042ac <_sbrk_r>
 800421c:	4580      	cmp	r8, r0
 800421e:	d13a      	bne.n	8004296 <_malloc_r+0xd2>
 8004220:	6821      	ldr	r1, [r4, #0]
 8004222:	3503      	adds	r5, #3
 8004224:	1a6d      	subs	r5, r5, r1
 8004226:	f025 0503 	bic.w	r5, r5, #3
 800422a:	3508      	adds	r5, #8
 800422c:	2d0c      	cmp	r5, #12
 800422e:	bf38      	it	cc
 8004230:	250c      	movcc	r5, #12
 8004232:	4629      	mov	r1, r5
 8004234:	4638      	mov	r0, r7
 8004236:	f7ff ffa5 	bl	8004184 <sbrk_aligned>
 800423a:	3001      	adds	r0, #1
 800423c:	d02b      	beq.n	8004296 <_malloc_r+0xd2>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	442b      	add	r3, r5
 8004242:	6023      	str	r3, [r4, #0]
 8004244:	e00e      	b.n	8004264 <_malloc_r+0xa0>
 8004246:	6822      	ldr	r2, [r4, #0]
 8004248:	1b52      	subs	r2, r2, r5
 800424a:	d41e      	bmi.n	800428a <_malloc_r+0xc6>
 800424c:	2a0b      	cmp	r2, #11
 800424e:	d916      	bls.n	800427e <_malloc_r+0xba>
 8004250:	1961      	adds	r1, r4, r5
 8004252:	42a3      	cmp	r3, r4
 8004254:	6025      	str	r5, [r4, #0]
 8004256:	bf18      	it	ne
 8004258:	6059      	strne	r1, [r3, #4]
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	bf08      	it	eq
 800425e:	6031      	streq	r1, [r6, #0]
 8004260:	5162      	str	r2, [r4, r5]
 8004262:	604b      	str	r3, [r1, #4]
 8004264:	4638      	mov	r0, r7
 8004266:	f104 060b 	add.w	r6, r4, #11
 800426a:	f000 f8cf 	bl	800440c <__malloc_unlock>
 800426e:	f026 0607 	bic.w	r6, r6, #7
 8004272:	1d23      	adds	r3, r4, #4
 8004274:	1af2      	subs	r2, r6, r3
 8004276:	d0b6      	beq.n	80041e6 <_malloc_r+0x22>
 8004278:	1b9b      	subs	r3, r3, r6
 800427a:	50a3      	str	r3, [r4, r2]
 800427c:	e7b3      	b.n	80041e6 <_malloc_r+0x22>
 800427e:	6862      	ldr	r2, [r4, #4]
 8004280:	42a3      	cmp	r3, r4
 8004282:	bf0c      	ite	eq
 8004284:	6032      	streq	r2, [r6, #0]
 8004286:	605a      	strne	r2, [r3, #4]
 8004288:	e7ec      	b.n	8004264 <_malloc_r+0xa0>
 800428a:	4623      	mov	r3, r4
 800428c:	6864      	ldr	r4, [r4, #4]
 800428e:	e7b2      	b.n	80041f6 <_malloc_r+0x32>
 8004290:	4634      	mov	r4, r6
 8004292:	6876      	ldr	r6, [r6, #4]
 8004294:	e7b9      	b.n	800420a <_malloc_r+0x46>
 8004296:	230c      	movs	r3, #12
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4638      	mov	r0, r7
 800429c:	f000 f8b6 	bl	800440c <__malloc_unlock>
 80042a0:	e7a1      	b.n	80041e6 <_malloc_r+0x22>
 80042a2:	6025      	str	r5, [r4, #0]
 80042a4:	e7de      	b.n	8004264 <_malloc_r+0xa0>
 80042a6:	bf00      	nop
 80042a8:	20000308 	.word	0x20000308

080042ac <_sbrk_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4d06      	ldr	r5, [pc, #24]	; (80042c8 <_sbrk_r+0x1c>)
 80042b0:	2300      	movs	r3, #0
 80042b2:	4604      	mov	r4, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	602b      	str	r3, [r5, #0]
 80042b8:	f7fc fd34 	bl	8000d24 <_sbrk>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_sbrk_r+0x1a>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_sbrk_r+0x1a>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000310 	.word	0x20000310

080042cc <__sread>:
 80042cc:	b510      	push	{r4, lr}
 80042ce:	460c      	mov	r4, r1
 80042d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d4:	f000 f8a0 	bl	8004418 <_read_r>
 80042d8:	2800      	cmp	r0, #0
 80042da:	bfab      	itete	ge
 80042dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042de:	89a3      	ldrhlt	r3, [r4, #12]
 80042e0:	181b      	addge	r3, r3, r0
 80042e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042e6:	bfac      	ite	ge
 80042e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042ea:	81a3      	strhlt	r3, [r4, #12]
 80042ec:	bd10      	pop	{r4, pc}

080042ee <__swrite>:
 80042ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f2:	461f      	mov	r7, r3
 80042f4:	898b      	ldrh	r3, [r1, #12]
 80042f6:	05db      	lsls	r3, r3, #23
 80042f8:	4605      	mov	r5, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	4616      	mov	r6, r2
 80042fe:	d505      	bpl.n	800430c <__swrite+0x1e>
 8004300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004304:	2302      	movs	r3, #2
 8004306:	2200      	movs	r2, #0
 8004308:	f000 f868 	bl	80043dc <_lseek_r>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004316:	81a3      	strh	r3, [r4, #12]
 8004318:	4632      	mov	r2, r6
 800431a:	463b      	mov	r3, r7
 800431c:	4628      	mov	r0, r5
 800431e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004322:	f000 b817 	b.w	8004354 <_write_r>

08004326 <__sseek>:
 8004326:	b510      	push	{r4, lr}
 8004328:	460c      	mov	r4, r1
 800432a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800432e:	f000 f855 	bl	80043dc <_lseek_r>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	bf15      	itete	ne
 8004338:	6560      	strne	r0, [r4, #84]	; 0x54
 800433a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800433e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004342:	81a3      	strheq	r3, [r4, #12]
 8004344:	bf18      	it	ne
 8004346:	81a3      	strhne	r3, [r4, #12]
 8004348:	bd10      	pop	{r4, pc}

0800434a <__sclose>:
 800434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434e:	f000 b813 	b.w	8004378 <_close_r>
	...

08004354 <_write_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4d07      	ldr	r5, [pc, #28]	; (8004374 <_write_r+0x20>)
 8004358:	4604      	mov	r4, r0
 800435a:	4608      	mov	r0, r1
 800435c:	4611      	mov	r1, r2
 800435e:	2200      	movs	r2, #0
 8004360:	602a      	str	r2, [r5, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	f7fc fad4 	bl	8000910 <_write>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_write_r+0x1e>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	b103      	cbz	r3, 8004372 <_write_r+0x1e>
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	20000310 	.word	0x20000310

08004378 <_close_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4d06      	ldr	r5, [pc, #24]	; (8004394 <_close_r+0x1c>)
 800437c:	2300      	movs	r3, #0
 800437e:	4604      	mov	r4, r0
 8004380:	4608      	mov	r0, r1
 8004382:	602b      	str	r3, [r5, #0]
 8004384:	f7fc fc99 	bl	8000cba <_close>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_close_r+0x1a>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	b103      	cbz	r3, 8004392 <_close_r+0x1a>
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	20000310 	.word	0x20000310

08004398 <_fstat_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4d07      	ldr	r5, [pc, #28]	; (80043b8 <_fstat_r+0x20>)
 800439c:	2300      	movs	r3, #0
 800439e:	4604      	mov	r4, r0
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	602b      	str	r3, [r5, #0]
 80043a6:	f7fc fc94 	bl	8000cd2 <_fstat>
 80043aa:	1c43      	adds	r3, r0, #1
 80043ac:	d102      	bne.n	80043b4 <_fstat_r+0x1c>
 80043ae:	682b      	ldr	r3, [r5, #0]
 80043b0:	b103      	cbz	r3, 80043b4 <_fstat_r+0x1c>
 80043b2:	6023      	str	r3, [r4, #0]
 80043b4:	bd38      	pop	{r3, r4, r5, pc}
 80043b6:	bf00      	nop
 80043b8:	20000310 	.word	0x20000310

080043bc <_isatty_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4d06      	ldr	r5, [pc, #24]	; (80043d8 <_isatty_r+0x1c>)
 80043c0:	2300      	movs	r3, #0
 80043c2:	4604      	mov	r4, r0
 80043c4:	4608      	mov	r0, r1
 80043c6:	602b      	str	r3, [r5, #0]
 80043c8:	f7fc fc93 	bl	8000cf2 <_isatty>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_isatty_r+0x1a>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_isatty_r+0x1a>
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	20000310 	.word	0x20000310

080043dc <_lseek_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	4d07      	ldr	r5, [pc, #28]	; (80043fc <_lseek_r+0x20>)
 80043e0:	4604      	mov	r4, r0
 80043e2:	4608      	mov	r0, r1
 80043e4:	4611      	mov	r1, r2
 80043e6:	2200      	movs	r2, #0
 80043e8:	602a      	str	r2, [r5, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f7fc fc8c 	bl	8000d08 <_lseek>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_lseek_r+0x1e>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_lseek_r+0x1e>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	20000310 	.word	0x20000310

08004400 <__malloc_lock>:
 8004400:	4801      	ldr	r0, [pc, #4]	; (8004408 <__malloc_lock+0x8>)
 8004402:	f7ff be0b 	b.w	800401c <__retarget_lock_acquire_recursive>
 8004406:	bf00      	nop
 8004408:	20000304 	.word	0x20000304

0800440c <__malloc_unlock>:
 800440c:	4801      	ldr	r0, [pc, #4]	; (8004414 <__malloc_unlock+0x8>)
 800440e:	f7ff be06 	b.w	800401e <__retarget_lock_release_recursive>
 8004412:	bf00      	nop
 8004414:	20000304 	.word	0x20000304

08004418 <_read_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4d07      	ldr	r5, [pc, #28]	; (8004438 <_read_r+0x20>)
 800441c:	4604      	mov	r4, r0
 800441e:	4608      	mov	r0, r1
 8004420:	4611      	mov	r1, r2
 8004422:	2200      	movs	r2, #0
 8004424:	602a      	str	r2, [r5, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	f7fc fc2a 	bl	8000c80 <_read>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_read_r+0x1e>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	b103      	cbz	r3, 8004436 <_read_r+0x1e>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	20000310 	.word	0x20000310

0800443c <_init>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	bf00      	nop
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr

08004448 <_fini>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	bf00      	nop
 800444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444e:	bc08      	pop	{r3}
 8004450:	469e      	mov	lr, r3
 8004452:	4770      	bx	lr
