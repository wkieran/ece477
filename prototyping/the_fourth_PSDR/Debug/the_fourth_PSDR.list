
the_fourth_PSDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004d30  08004d30  00014d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f20  08004f20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f28  08004f28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  2000000c  08004f3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08004f3c  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006930  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b0  00000000  00000000  000269af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000640  00000000  00000000  00028160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000049c  00000000  00000000  000287a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ca5  00000000  00000000  00028c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008662  00000000  00000000  000498e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6f50  00000000  00000000  00051f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001be0  00000000  00000000  00118e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011aa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d18 	.word	0x08004d18

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004d18 	.word	0x08004d18

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b970 	b.w	8000e3c <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9e08      	ldr	r6, [sp, #32]
 8000b7a:	460d      	mov	r5, r1
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	460f      	mov	r7, r1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d14a      	bne.n	8000c1a <__udivmoddi4+0xa6>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4694      	mov	ip, r2
 8000b88:	d965      	bls.n	8000c56 <__udivmoddi4+0xe2>
 8000b8a:	fab2 f382 	clz	r3, r2
 8000b8e:	b143      	cbz	r3, 8000ba2 <__udivmoddi4+0x2e>
 8000b90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b94:	f1c3 0220 	rsb	r2, r3, #32
 8000b98:	409f      	lsls	r7, r3
 8000b9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9e:	4317      	orrs	r7, r2
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba6:	fa1f f58c 	uxth.w	r5, ip
 8000baa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bae:	0c22      	lsrs	r2, r4, #16
 8000bb0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb8:	fb01 f005 	mul.w	r0, r1, r5
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x62>
 8000bc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc8:	f080 811c 	bcs.w	8000e04 <__udivmoddi4+0x290>
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	f240 8119 	bls.w	8000e04 <__udivmoddi4+0x290>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	4462      	add	r2, ip
 8000bd6:	1a12      	subs	r2, r2, r0
 8000bd8:	b2a4      	uxth	r4, r4
 8000bda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be6:	fb00 f505 	mul.w	r5, r0, r5
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x90>
 8000bee:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf6:	f080 8107 	bcs.w	8000e08 <__udivmoddi4+0x294>
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	f240 8104 	bls.w	8000e08 <__udivmoddi4+0x294>
 8000c00:	4464      	add	r4, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c08:	1b64      	subs	r4, r4, r5
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11e      	cbz	r6, 8000c16 <__udivmoddi4+0xa2>
 8000c0e:	40dc      	lsrs	r4, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	e9c6 4300 	strd	r4, r3, [r6]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0xbc>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80ed 	beq.w	8000dfe <__udivmoddi4+0x28a>
 8000c24:	2100      	movs	r1, #0
 8000c26:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	fab3 f183 	clz	r1, r3
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d149      	bne.n	8000ccc <__udivmoddi4+0x158>
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d302      	bcc.n	8000c42 <__udivmoddi4+0xce>
 8000c3c:	4282      	cmp	r2, r0
 8000c3e:	f200 80f8 	bhi.w	8000e32 <__udivmoddi4+0x2be>
 8000c42:	1a84      	subs	r4, r0, r2
 8000c44:	eb65 0203 	sbc.w	r2, r5, r3
 8000c48:	2001      	movs	r0, #1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d0e2      	beq.n	8000c16 <__udivmoddi4+0xa2>
 8000c50:	e9c6 4700 	strd	r4, r7, [r6]
 8000c54:	e7df      	b.n	8000c16 <__udivmoddi4+0xa2>
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xe6>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f382 	clz	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 8090 	bne.w	8000d84 <__udivmoddi4+0x210>
 8000c64:	1a8a      	subs	r2, r1, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f fe8c 	uxth.w	lr, ip
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c74:	fb07 2015 	mls	r0, r7, r5, r2
 8000c78:	0c22      	lsrs	r2, r4, #16
 8000c7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7e:	fb0e f005 	mul.w	r0, lr, r5
 8000c82:	4290      	cmp	r0, r2
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x124>
 8000c86:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x122>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f200 80cb 	bhi.w	8000e2c <__udivmoddi4+0x2b8>
 8000c96:	4645      	mov	r5, r8
 8000c98:	1a12      	subs	r2, r2, r0
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x14e>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb8:	d202      	bcs.n	8000cc0 <__udivmoddi4+0x14c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f200 80bb 	bhi.w	8000e36 <__udivmoddi4+0x2c2>
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	eba4 040e 	sub.w	r4, r4, lr
 8000cc6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cca:	e79f      	b.n	8000c0c <__udivmoddi4+0x98>
 8000ccc:	f1c1 0720 	rsb	r7, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cda:	fa05 f401 	lsl.w	r4, r5, r1
 8000cde:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce2:	40fd      	lsrs	r5, r7
 8000ce4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	fb09 5518 	mls	r5, r9, r8, r5
 8000cf6:	0c1c      	lsrs	r4, r3, #16
 8000cf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cfc:	fb08 f50e 	mul.w	r5, r8, lr
 8000d00:	42a5      	cmp	r5, r4
 8000d02:	fa02 f201 	lsl.w	r2, r2, r1
 8000d06:	fa00 f001 	lsl.w	r0, r0, r1
 8000d0a:	d90b      	bls.n	8000d24 <__udivmoddi4+0x1b0>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d14:	f080 8088 	bcs.w	8000e28 <__udivmoddi4+0x2b4>
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	f240 8085 	bls.w	8000e28 <__udivmoddi4+0x2b4>
 8000d1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d22:	4464      	add	r4, ip
 8000d24:	1b64      	subs	r4, r4, r5
 8000d26:	b29d      	uxth	r5, r3
 8000d28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1da>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d44:	d26c      	bcs.n	8000e20 <__udivmoddi4+0x2ac>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	d96a      	bls.n	8000e20 <__udivmoddi4+0x2ac>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	4464      	add	r4, ip
 8000d4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d52:	fba3 9502 	umull	r9, r5, r3, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	42ac      	cmp	r4, r5
 8000d5c:	46c8      	mov	r8, r9
 8000d5e:	46ae      	mov	lr, r5
 8000d60:	d356      	bcc.n	8000e10 <__udivmoddi4+0x29c>
 8000d62:	d053      	beq.n	8000e0c <__udivmoddi4+0x298>
 8000d64:	b156      	cbz	r6, 8000d7c <__udivmoddi4+0x208>
 8000d66:	ebb0 0208 	subs.w	r2, r0, r8
 8000d6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d72:	40ca      	lsrs	r2, r1
 8000d74:	40cc      	lsrs	r4, r1
 8000d76:	4317      	orrs	r7, r2
 8000d78:	e9c6 7400 	strd	r7, r4, [r6]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	2100      	movs	r1, #0
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	f1c3 0120 	rsb	r1, r3, #32
 8000d88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d90:	fa25 f101 	lsr.w	r1, r5, r1
 8000d94:	409d      	lsls	r5, r3
 8000d96:	432a      	orrs	r2, r5
 8000d98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9c:	fa1f fe8c 	uxth.w	lr, ip
 8000da0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da4:	fb07 1510 	mls	r5, r7, r0, r1
 8000da8:	0c11      	lsrs	r1, r2, #16
 8000daa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dae:	fb00 f50e 	mul.w	r5, r0, lr
 8000db2:	428d      	cmp	r5, r1
 8000db4:	fa04 f403 	lsl.w	r4, r4, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x258>
 8000dba:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc2:	d22f      	bcs.n	8000e24 <__udivmoddi4+0x2b0>
 8000dc4:	428d      	cmp	r5, r1
 8000dc6:	d92d      	bls.n	8000e24 <__udivmoddi4+0x2b0>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4461      	add	r1, ip
 8000dcc:	1b49      	subs	r1, r1, r5
 8000dce:	b292      	uxth	r2, r2
 8000dd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ddc:	fb05 f10e 	mul.w	r1, r5, lr
 8000de0:	4291      	cmp	r1, r2
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x282>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dec:	d216      	bcs.n	8000e1c <__udivmoddi4+0x2a8>
 8000dee:	4291      	cmp	r1, r2
 8000df0:	d914      	bls.n	8000e1c <__udivmoddi4+0x2a8>
 8000df2:	3d02      	subs	r5, #2
 8000df4:	4462      	add	r2, ip
 8000df6:	1a52      	subs	r2, r2, r1
 8000df8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dfc:	e738      	b.n	8000c70 <__udivmoddi4+0xfc>
 8000dfe:	4631      	mov	r1, r6
 8000e00:	4630      	mov	r0, r6
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xa2>
 8000e04:	4639      	mov	r1, r7
 8000e06:	e6e6      	b.n	8000bd6 <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e6fb      	b.n	8000c04 <__udivmoddi4+0x90>
 8000e0c:	4548      	cmp	r0, r9
 8000e0e:	d2a9      	bcs.n	8000d64 <__udivmoddi4+0x1f0>
 8000e10:	ebb9 0802 	subs.w	r8, r9, r2
 8000e14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	e7a3      	b.n	8000d64 <__udivmoddi4+0x1f0>
 8000e1c:	4645      	mov	r5, r8
 8000e1e:	e7ea      	b.n	8000df6 <__udivmoddi4+0x282>
 8000e20:	462b      	mov	r3, r5
 8000e22:	e794      	b.n	8000d4e <__udivmoddi4+0x1da>
 8000e24:	4640      	mov	r0, r8
 8000e26:	e7d1      	b.n	8000dcc <__udivmoddi4+0x258>
 8000e28:	46d0      	mov	r8, sl
 8000e2a:	e77b      	b.n	8000d24 <__udivmoddi4+0x1b0>
 8000e2c:	3d02      	subs	r5, #2
 8000e2e:	4462      	add	r2, ip
 8000e30:	e732      	b.n	8000c98 <__udivmoddi4+0x124>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e70a      	b.n	8000c4c <__udivmoddi4+0xd8>
 8000e36:	4464      	add	r4, ip
 8000e38:	3802      	subs	r0, #2
 8000e3a:	e742      	b.n	8000cc2 <__udivmoddi4+0x14e>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <generate_sine_wave>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void generate_sine_wave(uint16_t* buffer, uint16_t size) {
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b08d      	sub	sp, #52	; 0x34
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
    const double frequency = 500.0; // 1 kHz sine wave
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <generate_sine_wave+0xd8>)
 8000e52:	e9c7 2308 	strd	r2, r3, [r7, #32]
    const double amplitude = 16384.0 / 4; // 16-bit signed amplitude
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <generate_sine_wave+0xdc>)
 8000e5c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for (int i = 0; i < size; ++i) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e64:	e044      	b.n	8000ef0 <generate_sine_wave+0xb0>
        double t = (double)i / SAMPLE_RATE;
 8000e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e68:	f7ff fb20 	bl	80004ac <__aeabi_i2d>
 8000e6c:	a326      	add	r3, pc, #152	; (adr r3, 8000f08 <generate_sine_wave+0xc8>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fcaf 	bl	80007d4 <__aeabi_ddiv>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        double sine_value = amplitude * sin(2.0 * M_PI * frequency * t);
 8000e7e:	a324      	add	r3, pc, #144	; (adr r3, 8000f10 <generate_sine_wave+0xd0>)
 8000e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e88:	f7ff fb7a 	bl	8000580 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e98:	f7ff fb72 	bl	8000580 <__aeabi_dmul>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	ec43 2b17 	vmov	d7, r2, r3
 8000ea4:	eeb0 0a47 	vmov.f32	s0, s14
 8000ea8:	eef0 0a67 	vmov.f32	s1, s15
 8000eac:	f002 fef4 	bl	8003c98 <sin>
 8000eb0:	ec53 2b10 	vmov	r2, r3, d0
 8000eb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000eb8:	f7ff fb62 	bl	8000580 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	e9c7 2302 	strd	r2, r3, [r7, #8]
        buffer[i] = (uint16_t)(sine_value + amplitude);
 8000ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ec8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ecc:	f7ff f9a2 	bl	8000214 <__adddf3>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	18d4      	adds	r4, r2, r3
 8000ee0:	f7ff fe10 	bl	8000b04 <__aeabi_d2uiz>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	8023      	strh	r3, [r4, #0]
    for (int i = 0; i < size; ++i) {
 8000eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eec:	3301      	adds	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbb6      	blt.n	8000e66 <generate_sine_wave+0x26>
    }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3734      	adds	r7, #52	; 0x34
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	f3af 8000 	nop.w
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	40e57c00 	.word	0x40e57c00
 8000f10:	54442d18 	.word	0x54442d18
 8000f14:	401921fb 	.word	0x401921fb
 8000f18:	407f4000 	.word	0x407f4000
 8000f1c:	40b00000 	.word	0x40b00000

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f24:	f000 fa4e 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f28:	f000 f81a 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2c:	f000 f8d4 	bl	80010d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f30:	f000 f8b2 	bl	8001098 <MX_DMA_Init>
  MX_I2S1_Init();
 8000f34:	f000 f882 	bl	800103c <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */
  generate_sine_wave(audio_buffer, BUFFER_SIZE);
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <main+0x38>)
 8000f3e:	f7ff ff7f 	bl	8000e40 <generate_sine_wave>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)audio_buffer, BUFFER_SIZE);
 8000f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f46:	4904      	ldr	r1, [pc, #16]	; (8000f58 <main+0x38>)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <main+0x3c>)
 8000f4a:	f001 f9df 	bl	800230c <HAL_I2S_Transmit_DMA>
	  HAL_Delay(500);
 8000f4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f52:	f000 faa9 	bl	80014a8 <HAL_Delay>
	  HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)audio_buffer, BUFFER_SIZE);
 8000f56:	e7f4      	b.n	8000f42 <main+0x22>
 8000f58:	200000d0 	.word	0x200000d0
 8000f5c:	20000028 	.word	0x20000028

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	; 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	2234      	movs	r2, #52	; 0x34
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fe64 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <SystemClock_Config+0xd4>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a29      	ldr	r2, [pc, #164]	; (8001034 <SystemClock_Config+0xd4>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <SystemClock_Config+0xd4>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <SystemClock_Config+0xd8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fac:	4a22      	ldr	r2, [pc, #136]	; (8001038 <SystemClock_Config+0xd8>)
 8000fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <SystemClock_Config+0xd8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000fd8:	2378      	movs	r3, #120	; 0x78
 8000fda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 fb87 	bl	8003700 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ff8:	f000 f8a8 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001008:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001012:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2103      	movs	r1, #3
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fb6e 	bl	80026fc <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001026:	f000 f891 	bl	800114c <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3750      	adds	r7, #80	; 0x50
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_I2S1_Init+0x54>)
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <MX_I2S1_Init+0x58>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_I2S1_Init+0x54>)
 8001048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_I2S1_Init+0x54>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_I2S1_Init+0x54>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <MX_I2S1_Init+0x54>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_I2S1_Init+0x54>)
 8001062:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001066:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_I2S1_Init+0x54>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_I2S1_Init+0x54>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_I2S1_Init+0x54>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_I2S1_Init+0x54>)
 800107c:	f001 f84e 	bl	800211c <HAL_I2S_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 8001086:	f000 f861 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000028 	.word	0x20000028
 8001094:	40013000 	.word	0x40013000

08001098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	203b      	movs	r0, #59	; 0x3b
 80010c0:	f000 faf1 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010c4:	203b      	movs	r0, #59	; 0x3b
 80010c6:	f000 fb0a 	bl	80016de <HAL_NVIC_EnableIRQ>

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_GPIO_Init+0x30>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <MX_GPIO_Init+0x30>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_GPIO_Init+0x30>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_I2S_TxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    generate_sine_wave(audio_buffer, BUFFER_SIZE);
 8001114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 800111a:	f7ff fe91 	bl	8000e40 <generate_sine_wave>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000d0 	.word	0x200000d0

0800112c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    generate_sine_wave(&audio_buffer[BUFFER_SIZE / 2], BUFFER_SIZE / 2);
 8001134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <HAL_I2S_TxCpltCallback+0x1c>)
 800113a:	f7ff fe81 	bl	8000e40 <generate_sine_wave>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200002d0 	.word	0x200002d0

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	e7fe      	b.n	8001154 <Error_Handler+0x8>
	...

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_MspInit+0x4c>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_MspInit+0x4c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0a0      	sub	sp, #128	; 0x80
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	225c      	movs	r2, #92	; 0x5c
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 fd37 	bl	8003c3c <memset>
  if(hi2s->Instance==SPI1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a3f      	ldr	r2, [pc, #252]	; (80012d0 <HAL_I2S_MspInit+0x128>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d176      	bne.n	80012c6 <HAL_I2S_MspInit+0x11e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 80011d8:	2302      	movs	r3, #2
 80011da:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80011dc:	2332      	movs	r3, #50	; 0x32
 80011de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80011e4:	2308      	movs	r3, #8
 80011e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 80011f4:	2300      	movs	r3, #0
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fb63 	bl	80028c8 <HAL_RCCEx_PeriphCLKConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8001208:	f7ff ffa0 	bl	800114c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_I2S_MspInit+0x12c>)
 8001212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001214:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <HAL_I2S_MspInit+0x12c>)
 8001216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121a:	6453      	str	r3, [r2, #68]	; 0x44
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_I2S_MspInit+0x12c>)
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <HAL_I2S_MspInit+0x12c>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <HAL_I2S_MspInit+0x12c>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6313      	str	r3, [r2, #48]	; 0x30
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_I2S_MspInit+0x12c>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001244:	23b0      	movs	r3, #176	; 0xb0
 8001246:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001254:	2305      	movs	r3, #5
 8001256:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800125c:	4619      	mov	r1, r3
 800125e:	481e      	ldr	r0, [pc, #120]	; (80012d8 <HAL_I2S_MspInit+0x130>)
 8001260:	f000 fdc8 	bl	8001df4 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_I2S_MspInit+0x134>)
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_I2S_MspInit+0x138>)
 8001268:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <HAL_I2S_MspInit+0x134>)
 800126c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001270:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_I2S_MspInit+0x134>)
 8001274:	2240      	movs	r2, #64	; 0x40
 8001276:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_I2S_MspInit+0x134>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_I2S_MspInit+0x134>)
 8001280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001284:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_I2S_MspInit+0x134>)
 8001288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800128c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_I2S_MspInit+0x134>)
 8001290:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001294:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_I2S_MspInit+0x134>)
 8001298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_I2S_MspInit+0x134>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <HAL_I2S_MspInit+0x134>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <HAL_I2S_MspInit+0x134>)
 80012ac:	f000 fa32 	bl	8001714 <HAL_DMA_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_I2S_MspInit+0x112>
    {
      Error_Handler();
 80012b6:	f7ff ff49 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_I2S_MspInit+0x134>)
 80012be:	639a      	str	r2, [r3, #56]	; 0x38
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_I2S_MspInit+0x134>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3780      	adds	r7, #128	; 0x80
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40013000 	.word	0x40013000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	20000070 	.word	0x20000070
 80012e0:	40026458 	.word	0x40026458

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>

080012f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <UsageFault_Handler+0x4>

08001302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001330:	f000 f89a 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <DMA2_Stream3_IRQHandler+0x10>)
 800133e:	f000 faef 	bl	8001920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000070 	.word	0x20000070

0800134c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <SystemInit+0x20>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <SystemInit+0x20>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001376:	490e      	ldr	r1, [pc, #56]	; (80013b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800138c:	4c0b      	ldr	r4, [pc, #44]	; (80013bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800139a:	f7ff ffd7 	bl	800134c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139e:	f002 fc55 	bl	8003c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a2:	f7ff fdbd 	bl	8000f20 <main>
  bx  lr    
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b4:	08004f30 	.word	0x08004f30
  ldr r2, =_sbss
 80013b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013bc:	200004d4 	.word	0x200004d4

080013c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_Init+0x40>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_Init+0x40>)
 80013da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_Init+0x40>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f94f 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	200f      	movs	r0, #15
 80013f4:	f000 f808 	bl	8001408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff feae 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x54>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f967 	bl	80016fa <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f92f 	bl	80016a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_InitTick+0x5c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000000 	.word	0x20000000
 8001460:	20000008 	.word	0x20000008
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	200004d0 	.word	0x200004d0

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200004d0 	.word	0x200004d0

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff29 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff3e 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff31 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa2 	bl	800164c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff feb6 	bl	8001490 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e099      	b.n	8001864 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001750:	e00f      	b.n	8001772 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001752:	f7ff fe9d 	bl	8001490 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b05      	cmp	r3, #5
 800175e:	d908      	bls.n	8001772 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2220      	movs	r2, #32
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e078      	b.n	8001864 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e8      	bne.n	8001752 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_DMA_Init+0x158>)
 800178c:	4013      	ands	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800179e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d107      	bne.n	80017dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	4313      	orrs	r3, r2
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f023 0307 	bic.w	r3, r3, #7
 80017f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	2b04      	cmp	r3, #4
 8001804:	d117      	bne.n	8001836 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4313      	orrs	r3, r2
 800180e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00e      	beq.n	8001836 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fa6f 	bl	8001cfc <DMA_CheckFifoParam>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001832:	2301      	movs	r3, #1
 8001834:	e016      	b.n	8001864 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fa26 	bl	8001c90 <DMA_CalcBaseAndBitshift>
 8001844:	4603      	mov	r3, r0
 8001846:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	223f      	movs	r2, #63	; 0x3f
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	f010803f 	.word	0xf010803f

08001870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_DMA_Start_IT+0x26>
 8001892:	2302      	movs	r3, #2
 8001894:	e040      	b.n	8001918 <HAL_DMA_Start_IT+0xa8>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d12f      	bne.n	800190a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2202      	movs	r2, #2
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f9b8 	bl	8001c34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c8:	223f      	movs	r2, #63	; 0x3f
 80018ca:	409a      	lsls	r2, r3
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0216 	orr.w	r2, r2, #22
 80018de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d007      	beq.n	80018f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0208 	orr.w	r2, r2, #8
 80018f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e005      	b.n	8001916 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001912:	2302      	movs	r3, #2
 8001914:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001916:	7dfb      	ldrb	r3, [r7, #23]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800192c:	4b8e      	ldr	r3, [pc, #568]	; (8001b68 <HAL_DMA_IRQHandler+0x248>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a8e      	ldr	r2, [pc, #568]	; (8001b6c <HAL_DMA_IRQHandler+0x24c>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0a9b      	lsrs	r3, r3, #10
 8001938:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194a:	2208      	movs	r2, #8
 800194c:	409a      	lsls	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01a      	beq.n	800198c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0204 	bic.w	r2, r2, #4
 8001972:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	2208      	movs	r2, #8
 800197a:	409a      	lsls	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	2201      	movs	r2, #1
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d012      	beq.n	80019c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	2201      	movs	r2, #1
 80019b0:	409a      	lsls	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	f043 0202 	orr.w	r2, r3, #2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	2204      	movs	r2, #4
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d012      	beq.n	80019f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00b      	beq.n	80019f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	2204      	movs	r2, #4
 80019e6:	409a      	lsls	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	2210      	movs	r2, #16
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d043      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03c      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d018      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d108      	bne.n	8001a50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d024      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	4798      	blx	r3
 8001a4e:	e01f      	b.n	8001a90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01b      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
 8001a60:	e016      	b.n	8001a90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d107      	bne.n	8001a80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0208 	bic.w	r2, r2, #8
 8001a7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2220      	movs	r2, #32
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 808f 	beq.w	8001bc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8087 	beq.w	8001bc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d136      	bne.n	8001b38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0216 	bic.w	r2, r2, #22
 8001ad8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ae8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <HAL_DMA_IRQHandler+0x1da>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0208 	bic.w	r2, r2, #8
 8001b08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	223f      	movs	r2, #63	; 0x3f
 8001b10:	409a      	lsls	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d07e      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	4798      	blx	r3
        }
        return;
 8001b36:	e079      	b.n	8001c2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d01d      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10d      	bne.n	8001b70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d031      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
 8001b64:	e02c      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x2a0>
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d023      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
 8001b80:	e01e      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10f      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0210 	bic.w	r2, r2, #16
 8001b9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d032      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d022      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2205      	movs	r2, #5
 8001bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d307      	bcc.n	8001c08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f2      	bne.n	8001bec <HAL_DMA_IRQHandler+0x2cc>
 8001c06:	e000      	b.n	8001c0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	4798      	blx	r3
 8001c2a:	e000      	b.n	8001c2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c2c:	bf00      	nop
    }
  }
}
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b40      	cmp	r3, #64	; 0x40
 8001c60:	d108      	bne.n	8001c74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c72:	e007      	b.n	8001c84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	60da      	str	r2, [r3, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	3b10      	subs	r3, #16
 8001ca0:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001caa:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d909      	bls.n	8001cd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cc6:	f023 0303 	bic.w	r3, r3, #3
 8001cca:	1d1a      	adds	r2, r3, #4
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	659a      	str	r2, [r3, #88]	; 0x58
 8001cd0:	e007      	b.n	8001ce2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	aaaaaaab 	.word	0xaaaaaaab
 8001cf8:	08004d40 	.word	0x08004d40

08001cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d11f      	bne.n	8001d56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d856      	bhi.n	8001dca <DMA_CheckFifoParam+0xce>
 8001d1c:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <DMA_CheckFifoParam+0x28>)
 8001d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d22:	bf00      	nop
 8001d24:	08001d35 	.word	0x08001d35
 8001d28:	08001d47 	.word	0x08001d47
 8001d2c:	08001d35 	.word	0x08001d35
 8001d30:	08001dcb 	.word	0x08001dcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d046      	beq.n	8001dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d44:	e043      	b.n	8001dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d4e:	d140      	bne.n	8001dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d54:	e03d      	b.n	8001dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5e:	d121      	bne.n	8001da4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d837      	bhi.n	8001dd6 <DMA_CheckFifoParam+0xda>
 8001d66:	a201      	add	r2, pc, #4	; (adr r2, 8001d6c <DMA_CheckFifoParam+0x70>)
 8001d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6c:	08001d7d 	.word	0x08001d7d
 8001d70:	08001d83 	.word	0x08001d83
 8001d74:	08001d7d 	.word	0x08001d7d
 8001d78:	08001d95 	.word	0x08001d95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d80:	e030      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d025      	beq.n	8001dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d92:	e022      	b.n	8001dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d9c:	d11f      	bne.n	8001dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001da2:	e01c      	b.n	8001dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d903      	bls.n	8001db2 <DMA_CheckFifoParam+0xb6>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d003      	beq.n	8001db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001db0:	e018      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
      break;
 8001db6:	e015      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc8:	e00b      	b.n	8001de2 <DMA_CheckFifoParam+0xe6>
      break;
 8001dca:	bf00      	nop
 8001dcc:	e00a      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dce:	bf00      	nop
 8001dd0:	e008      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd2:	bf00      	nop
 8001dd4:	e006      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd6:	bf00      	nop
 8001dd8:	e004      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dda:	bf00      	nop
 8001ddc:	e002      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dde:	bf00      	nop
 8001de0:	e000      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;
 8001de2:	bf00      	nop
    }
  } 
  
  return status; 
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	e165      	b.n	80020dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e10:	2201      	movs	r2, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	f040 8154 	bne.w	80020d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d005      	beq.n	8001e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d130      	bne.n	8001ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 0201 	and.w	r2, r3, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d017      	beq.n	8001ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d123      	bne.n	8001f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	220f      	movs	r2, #15
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0203 	and.w	r2, r3, #3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80ae 	beq.w	80020d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_GPIO_Init+0x300>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a5c      	ldr	r2, [pc, #368]	; (80020f4 <HAL_GPIO_Init+0x300>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <HAL_GPIO_Init+0x300>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f96:	4a58      	ldr	r2, [pc, #352]	; (80020f8 <HAL_GPIO_Init+0x304>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4f      	ldr	r2, [pc, #316]	; (80020fc <HAL_GPIO_Init+0x308>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d025      	beq.n	800200e <HAL_GPIO_Init+0x21a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4e      	ldr	r2, [pc, #312]	; (8002100 <HAL_GPIO_Init+0x30c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01f      	beq.n	800200a <HAL_GPIO_Init+0x216>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4d      	ldr	r2, [pc, #308]	; (8002104 <HAL_GPIO_Init+0x310>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d019      	beq.n	8002006 <HAL_GPIO_Init+0x212>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4c      	ldr	r2, [pc, #304]	; (8002108 <HAL_GPIO_Init+0x314>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0x20e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4b      	ldr	r2, [pc, #300]	; (800210c <HAL_GPIO_Init+0x318>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_GPIO_Init+0x20a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4a      	ldr	r2, [pc, #296]	; (8002110 <HAL_GPIO_Init+0x31c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_Init+0x206>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a49      	ldr	r2, [pc, #292]	; (8002114 <HAL_GPIO_Init+0x320>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_GPIO_Init+0x202>
 8001ff2:	2306      	movs	r3, #6
 8001ff4:	e00c      	b.n	8002010 <HAL_GPIO_Init+0x21c>
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	e00a      	b.n	8002010 <HAL_GPIO_Init+0x21c>
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	e008      	b.n	8002010 <HAL_GPIO_Init+0x21c>
 8001ffe:	2304      	movs	r3, #4
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x21c>
 8002002:	2303      	movs	r3, #3
 8002004:	e004      	b.n	8002010 <HAL_GPIO_Init+0x21c>
 8002006:	2302      	movs	r3, #2
 8002008:	e002      	b.n	8002010 <HAL_GPIO_Init+0x21c>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x21c>
 800200e:	2300      	movs	r3, #0
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	f002 0203 	and.w	r2, r2, #3
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4093      	lsls	r3, r2
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002020:	4935      	ldr	r1, [pc, #212]	; (80020f8 <HAL_GPIO_Init+0x304>)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_GPIO_Init+0x324>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002052:	4a31      	ldr	r2, [pc, #196]	; (8002118 <HAL_GPIO_Init+0x324>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_GPIO_Init+0x324>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800207c:	4a26      	ldr	r2, [pc, #152]	; (8002118 <HAL_GPIO_Init+0x324>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <HAL_GPIO_Init+0x324>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_GPIO_Init+0x324>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_GPIO_Init+0x324>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d0:	4a11      	ldr	r2, [pc, #68]	; (8002118 <HAL_GPIO_Init+0x324>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3301      	adds	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b0f      	cmp	r3, #15
 80020e0:	f67f ae96 	bls.w	8001e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800
 8002108:	40020c00 	.word	0x40020c00
 800210c:	40021000 	.word	0x40021000
 8002110:	40021400 	.word	0x40021400
 8002114:	40021800 	.word	0x40021800
 8002118:	40013c00 	.word	0x40013c00

0800211c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0e1      	b.n	80022f2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a6d      	ldr	r2, [pc, #436]	; (80022fc <HAL_I2S_Init+0x1e0>)
 8002146:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff f82d 	bl	80011a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002164:	f023 030f 	bic.w	r3, r3, #15
 8002168:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d06f      	beq.n	800225a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002182:	2310      	movs	r3, #16
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e001      	b.n	800218c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b20      	cmp	r3, #32
 8002192:	d802      	bhi.n	800219a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a58      	ldr	r2, [pc, #352]	; (8002300 <HAL_I2S_Init+0x1e4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_I2S_Init+0x92>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_I2S_Init+0x1e8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d104      	bne.n	80021b8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 feb4 	bl	8002f1c <HAL_RCCEx_GetPeriphCLKFreq>
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	e003      	b.n	80021c0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80021b8:	2002      	movs	r0, #2
 80021ba:	f000 feaf 	bl	8002f1c <HAL_RCCEx_GetPeriphCLKFreq>
 80021be:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c8:	d125      	bne.n	8002216 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d010      	beq.n	80021f4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	461a      	mov	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ee:	3305      	adds	r3, #5
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	e01f      	b.n	8002234 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	3305      	adds	r3, #5
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e00e      	b.n	8002234 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fbb2 f2f3 	udiv	r2, r2, r3
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	461a      	mov	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	3305      	adds	r3, #5
 8002232:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4a34      	ldr	r2, [pc, #208]	; (8002308 <HAL_I2S_Init+0x1ec>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	08db      	lsrs	r3, r3, #3
 800223e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e003      	b.n	8002262 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800225a:	2302      	movs	r3, #2
 800225c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d902      	bls.n	800226e <HAL_I2S_Init+0x152>
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	2bff      	cmp	r3, #255	; 0xff
 800226c:	d907      	bls.n	800227e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f043 0210 	orr.w	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e039      	b.n	80022f2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	ea42 0103 	orr.w	r1, r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	430a      	orrs	r2, r1
 8002290:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800229c:	f023 030f 	bic.w	r3, r3, #15
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6851      	ldr	r1, [r2, #4]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6892      	ldr	r2, [r2, #8]
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68d2      	ldr	r2, [r2, #12]
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6992      	ldr	r2, [r2, #24]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b30      	cmp	r3, #48	; 0x30
 80022c8:	d003      	beq.n	80022d2 <HAL_I2S_Init+0x1b6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2bb0      	cmp	r3, #176	; 0xb0
 80022d0:	d107      	bne.n	80022e2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022e0:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	080025e9 	.word	0x080025e9
 8002300:	40003800 	.word	0x40003800
 8002304:	40003c00 	.word	0x40003c00
 8002308:	cccccccd 	.word	0xcccccccd

0800230c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	4613      	mov	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_I2S_Transmit_DMA+0x1a>
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e08e      	b.n	8002448 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_I2S_Transmit_DMA+0x2e>
 8002336:	2302      	movs	r3, #2
 8002338:	e086      	b.n	8002448 <HAL_I2S_Transmit_DMA+0x13c>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d005      	beq.n	800235a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
 8002358:	e076      	b.n	8002448 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2203      	movs	r2, #3
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d002      	beq.n	8002386 <HAL_I2S_Transmit_DMA+0x7a>
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b05      	cmp	r3, #5
 8002384:	d10a      	bne.n	800239c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a
 800239a:	e005      	b.n	80023a8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	4a28      	ldr	r2, [pc, #160]	; (8002450 <HAL_I2S_Transmit_DMA+0x144>)
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	4a27      	ldr	r2, [pc, #156]	; (8002454 <HAL_I2S_Transmit_DMA+0x148>)
 80023b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023bc:	4a26      	ldr	r2, [pc, #152]	; (8002458 <HAL_I2S_Transmit_DMA+0x14c>)
 80023be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80023c8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80023d0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80023d8:	f7ff fa4a 	bl	8001870 <HAL_DMA_Start_IT>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00f      	beq.n	8002402 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f043 0208 	orr.w	r2, r3, #8
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e022      	b.n	8002448 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800241e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0202 	orr.w	r2, r2, #2
 800243c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	080024c7 	.word	0x080024c7
 8002454:	08002485 	.word	0x08002485
 8002458:	080024e3 	.word	0x080024e3

0800245c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10e      	bne.n	80024b8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0202 	bic.w	r2, r2, #2
 80024a8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7fe fe37 	bl	800112c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7fe fe19 	bl	800110c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0203 	bic.w	r2, r2, #3
 80024fe:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002518:	f043 0208 	orr.w	r2, r3, #8
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7ff ffa5 	bl	8002470 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	881a      	ldrh	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	1c9a      	adds	r2, r3, #2
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10e      	bne.n	8002582 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002572:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fe fdd5 	bl	800112c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	b292      	uxth	r2, r2
 800259e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	1c9a      	adds	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10e      	bne.n	80025e0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff3e 	bl	800245c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b04      	cmp	r3, #4
 8002602:	d13a      	bne.n	800267a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d109      	bne.n	8002622 <I2S_IRQHandler+0x3a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d102      	bne.n	8002622 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ffb4 	bl	800258a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b40      	cmp	r3, #64	; 0x40
 800262a:	d126      	bne.n	800267a <I2S_IRQHandler+0x92>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b20      	cmp	r3, #32
 8002638:	d11f      	bne.n	800267a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002648:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f043 0202 	orr.w	r2, r3, #2
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fefb 	bl	8002470 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b03      	cmp	r3, #3
 8002684:	d136      	bne.n	80026f4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d109      	bne.n	80026a4 <I2S_IRQHandler+0xbc>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b80      	cmp	r3, #128	; 0x80
 800269c:	d102      	bne.n	80026a4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ff45 	bl	800252e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d122      	bne.n	80026f4 <I2S_IRQHandler+0x10c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d11b      	bne.n	80026f4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026ca:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f043 0204 	orr.w	r2, r3, #4
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff febe 	bl	8002470 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0cc      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b68      	ldr	r3, [pc, #416]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d90c      	bls.n	8002738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b65      	ldr	r3, [pc, #404]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0b8      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002750:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800275a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002768:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	494d      	ldr	r1, [pc, #308]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d044      	beq.n	800281c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d119      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e06f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e067      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4934      	ldr	r1, [pc, #208]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fe50 	bl	8001490 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe fe4c 	bl	8001490 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e04f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d20c      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e032      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4916      	ldr	r1, [pc, #88]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	490e      	ldr	r1, [pc, #56]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002882:	f000 fd93 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 8002886:	4602      	mov	r2, r0
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	490a      	ldr	r1, [pc, #40]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	5ccb      	ldrb	r3, [r1, r3]
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fdb0 	bl	8001408 <HAL_InitTick>

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023c00 	.word	0x40023c00
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08004d30 	.word	0x08004d30
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20000004 	.word	0x20000004

080028c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d010      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002900:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002906:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	496c      	ldr	r1, [pc, #432]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800291e:	2301      	movs	r3, #1
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d010      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800292e:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002934:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293c:	4960      	ldr	r1, [pc, #384]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d017      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800295c:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800295e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4955      	ldr	r1, [pc, #340]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800297a:	d101      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800297c:	2301      	movs	r3, #1
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002988:	2301      	movs	r3, #1
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d017      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002998:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800299a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800299e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	4946      	ldr	r1, [pc, #280]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b6:	d101      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80029b8:	2301      	movs	r3, #1
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80029c4:	2301      	movs	r3, #1
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 808a 	beq.w	8002aea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	4b39      	ldr	r3, [pc, #228]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a38      	ldr	r2, [pc, #224]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80029f2:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a33      	ldr	r2, [pc, #204]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029fe:	f7fe fd47 	bl	8001490 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a06:	f7fe fd43 	bl	8001490 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e278      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a18:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a24:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d02f      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3c:	6a3a      	ldr	r2, [r7, #32]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d028      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a42:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a58:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d114      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fd11 	bl	8001490 <HAL_GetTick>
 8002a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe fd0d 	bl	8001490 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e240      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0ee      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aa0:	d114      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab6:	4902      	ldr	r1, [pc, #8]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]
 8002abc:	e00c      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	42470e40 	.word	0x42470e40
 8002acc:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a49      	ldr	r2, [pc, #292]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ad2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ad6:	6093      	str	r3, [r2, #8]
 8002ad8:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ada:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	4944      	ldr	r1, [pc, #272]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002afe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002b0c:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	4937      	ldr	r1, [pc, #220]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b2e:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b34:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3c:	492e      	ldr	r1, [pc, #184]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d011      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b50:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b56:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	4926      	ldr	r1, [pc, #152]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002b70:	2301      	movs	r3, #1
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	491a      	ldr	r1, [pc, #104]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d011      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	4911      	ldr	r1, [pc, #68]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd4:	f040 80ff 	bne.w	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bde:	f7fe fc57 	bl	8001490 <HAL_GetTick>
 8002be2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002be4:	e00e      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002be6:	f7fe fc53 	bl	8001490 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d907      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e188      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	424711e0 	.word	0x424711e0
 8002c00:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c04:	4b7e      	ldr	r3, [pc, #504]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ea      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d028      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d124      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c38:	4b71      	ldr	r3, [pc, #452]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	3301      	adds	r3, #1
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c4a:	4b6d      	ldr	r3, [pc, #436]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c50:	0e1b      	lsrs	r3, r3, #24
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	431a      	orrs	r2, r3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	071b      	lsls	r3, r3, #28
 8002c7a:	4961      	ldr	r1, [pc, #388]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d004      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d035      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cac:	d130      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002cae:	4b54      	ldr	r3, [pc, #336]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc6:	0f1b      	lsrs	r3, r3, #28
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	019b      	lsls	r3, r3, #6
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	431a      	orrs	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	071b      	lsls	r3, r3, #28
 8002cf0:	4943      	ldr	r1, [pc, #268]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cf8:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfe:	f023 021f 	bic.w	r2, r3, #31
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	493d      	ldr	r1, [pc, #244]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d029      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d24:	d124      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d26:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	3301      	adds	r3, #1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d38:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3e:	0f1b      	lsrs	r3, r3, #28
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	019b      	lsls	r3, r3, #6
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	431a      	orrs	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	071b      	lsls	r3, r3, #28
 8002d68:	4925      	ldr	r1, [pc, #148]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d016      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	019b      	lsls	r3, r3, #6
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	071b      	lsls	r3, r3, #28
 8002da2:	4917      	ldr	r1, [pc, #92]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fb6e 	bl	8001490 <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002db8:	f7fe fb6a 	bl	8001490 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e09f      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 8095 	bne.w	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fb54 	bl	8001490 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dea:	e00f      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002dec:	f7fe fb50 	bl	8001490 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d908      	bls.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e085      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	42470068 	.word	0x42470068
 8002e08:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e0c:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e18:	d0e8      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d02b      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d127      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002e42:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	0c1b      	lsrs	r3, r3, #16
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	3b01      	subs	r3, #1
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	061b      	lsls	r3, r3, #24
 8002e70:	4928      	ldr	r1, [pc, #160]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e78:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e7e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	3b01      	subs	r3, #1
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	4922      	ldr	r1, [pc, #136]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01d      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea6:	d118      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	0e1b      	lsrs	r3, r3, #24
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	019b      	lsls	r3, r3, #6
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	4910      	ldr	r1, [pc, #64]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fad6 	bl	8001490 <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002ee8:	f7fe fad2 	bl	8001490 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e007      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f06:	d1ef      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3730      	adds	r7, #48	; 0x30
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	42470070 	.word	0x42470070

08002f1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	2b07      	cmp	r3, #7
 8002f42:	f200 8224 	bhi.w	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8002f46:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	0800314f 	.word	0x0800314f
 8002f50:	08003279 	.word	0x08003279
 8002f54:	0800338f 	.word	0x0800338f
 8002f58:	08002f6d 	.word	0x08002f6d
 8002f5c:	0800338f 	.word	0x0800338f
 8002f60:	0800338f 	.word	0x0800338f
 8002f64:	0800338f 	.word	0x0800338f
 8002f68:	08002f6d 	.word	0x08002f6d
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8002f6c:	4ba8      	ldr	r3, [pc, #672]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f72:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f82:	f000 80d6 	beq.w	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f8c:	f200 80dd 	bhi.w	800314a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f96:	f000 809f 	beq.w	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fa0:	f200 80d3 	bhi.w	800314a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002faa:	d05b      	beq.n	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb2:	f200 80ca 	bhi.w	800314a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fbc:	f000 80b6 	beq.w	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fc6:	f200 80c0 	bhi.w	800314a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fd0:	f000 8082 	beq.w	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fda:	f200 80b6 	bhi.w	800314a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fea:	d03b      	beq.n	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8002fec:	e0ad      	b.n	800314a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002fee:	4b88      	ldr	r3, [pc, #544]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8002ffa:	4b85      	ldr	r3, [pc, #532]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003004:	4a83      	ldr	r2, [pc, #524]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e008      	b.n	8003020 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800300e:	4b80      	ldr	r3, [pc, #512]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003018:	4a7f      	ldr	r2, [pc, #508]	; (8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003020:	4b7b      	ldr	r3, [pc, #492]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	0e1b      	lsrs	r3, r3, #24
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800302e:	4b78      	ldr	r3, [pc, #480]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	fb03 f202 	mul.w	r2, r3, r2
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003048:	4b71      	ldr	r3, [pc, #452]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800304a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	3301      	adds	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	61fb      	str	r3, [r7, #28]
          break;
 8003062:	e073      	b.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003064:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003070:	4b67      	ldr	r3, [pc, #412]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307a:	4a66      	ldr	r2, [pc, #408]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	e008      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003084:	4b62      	ldr	r3, [pc, #392]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800308e:	4a62      	ldr	r2, [pc, #392]	; (8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003096:	4b5e      	ldr	r3, [pc, #376]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309c:	0e1b      	lsrs	r3, r3, #24
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80030a4:	4b5a      	ldr	r3, [pc, #360]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	fb03 f202 	mul.w	r2, r3, r2
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80030be:	4b54      	ldr	r3, [pc, #336]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	3301      	adds	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	61fb      	str	r3, [r7, #28]
          break;
 80030d6:	e039      	b.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80030d8:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d108      	bne.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80030e4:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ec:	4a49      	ldr	r2, [pc, #292]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	e007      	b.n	8003106 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80030f6:	4b46      	ldr	r3, [pc, #280]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fe:	4a46      	ldr	r2, [pc, #280]	; (8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003106:	4b42      	ldr	r3, [pc, #264]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	0f1b      	lsrs	r3, r3, #28
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003112:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	fb03 f202 	mul.w	r2, r3, r2
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	61fb      	str	r3, [r7, #28]
          break;
 800312a:	e00f      	b.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800312c:	4b3b      	ldr	r3, [pc, #236]	; (800321c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800312e:	61fb      	str	r3, [r7, #28]
          break;
 8003130:	e00c      	b.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800313e:	4b35      	ldr	r3, [pc, #212]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003140:	61fb      	str	r3, [r7, #28]
          break;
 8003142:	e003      	b.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003144:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003146:	61fb      	str	r3, [r7, #28]
          break;
 8003148:	e000      	b.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800314a:	bf00      	nop
        }
      }
      break;
 800314c:	e11f      	b.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800314e:	4b30      	ldr	r3, [pc, #192]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003154:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003160:	d079      	beq.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003168:	f200 8082 	bhi.w	8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003172:	d03c      	beq.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800317a:	d879      	bhi.n	8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003188:	d172      	bne.n	8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800318c:	61fb      	str	r3, [r7, #28]
          break;
 800318e:	e072      	b.n	8003276 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319c:	d109      	bne.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a8:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	e008      	b.n	80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80031c4:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80031d8:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031de:	0f1b      	lsrs	r3, r3, #28
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	61fb      	str	r3, [r7, #28]
          break;
 80031ec:	e043      	b.n	8003276 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fa:	d111      	bne.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e010      	b.n	8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800
 8003214:	00f42400 	.word	0x00f42400
 8003218:	017d7840 	.word	0x017d7840
 800321c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003220:	4b5e      	ldr	r3, [pc, #376]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003228:	4a5d      	ldr	r2, [pc, #372]	; (80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003230:	4b5a      	ldr	r3, [pc, #360]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003242:	4b56      	ldr	r3, [pc, #344]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0f1b      	lsrs	r3, r3, #28
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	61fb      	str	r3, [r7, #28]
          break;
 8003254:	e00f      	b.n	8003276 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003256:	4b51      	ldr	r3, [pc, #324]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003262:	d102      	bne.n	800326a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003264:	4b4f      	ldr	r3, [pc, #316]	; (80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003266:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003268:	e005      	b.n	8003276 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 800326a:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800326c:	61fb      	str	r3, [r7, #28]
          break;
 800326e:	e002      	b.n	8003276 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
          break;
 8003274:	bf00      	nop
        }
      }
      break;
 8003276:	e08a      	b.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003278:	4b48      	ldr	r3, [pc, #288]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800327a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800328a:	d06f      	beq.n	800336c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003292:	d878      	bhi.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800329a:	d03c      	beq.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032a2:	d870      	bhi.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d006      	beq.n	80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b0:	d169      	bne.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80032b2:	4b3d      	ldr	r3, [pc, #244]	; (80033a8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80032b4:	61fb      	str	r3, [r7, #28]
          break;
 80032b6:	e069      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032b8:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c4:	d109      	bne.n	80032da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80032c6:	4b35      	ldr	r3, [pc, #212]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80032c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d0:	4a34      	ldr	r2, [pc, #208]	; (80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e008      	b.n	80032ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80032dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e4:	4a2e      	ldr	r2, [pc, #184]	; (80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80032ec:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80032ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003300:	4b26      	ldr	r3, [pc, #152]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003306:	0f1b      	lsrs	r3, r3, #28
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	61fb      	str	r3, [r7, #28]
          break;
 8003314:	e03a      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003316:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003322:	d108      	bne.n	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332c:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e007      	b.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800333e:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	099b      	lsrs	r3, r3, #6
 800334c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0f1b      	lsrs	r3, r3, #28
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	fbb2 f3f3 	udiv	r3, r2, r3
 8003368:	61fb      	str	r3, [r7, #28]
          break;
 800336a:	e00f      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003378:	d102      	bne.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800337c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800337e:	e005      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003380:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003382:	61fb      	str	r3, [r7, #28]
          break;
 8003384:	e002      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
          break;
 800338a:	bf00      	nop
        }
      }
      break;
 800338c:	bf00      	nop
    }
  }
  return frequency;
 800338e:	69fb      	ldr	r3, [r7, #28]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3724      	adds	r7, #36	; 0x24
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40023800 	.word	0x40023800
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	017d7840 	.word	0x017d7840
 80033a8:	00bb8000 	.word	0x00bb8000

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b0a6      	sub	sp, #152	; 0x98
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d2:	4bc8      	ldr	r3, [pc, #800]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	f200 817e 	bhi.w	80036dc <HAL_RCC_GetSysClockFreq+0x330>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800341d 	.word	0x0800341d
 80033ec:	080036dd 	.word	0x080036dd
 80033f0:	080036dd 	.word	0x080036dd
 80033f4:	080036dd 	.word	0x080036dd
 80033f8:	08003425 	.word	0x08003425
 80033fc:	080036dd 	.word	0x080036dd
 8003400:	080036dd 	.word	0x080036dd
 8003404:	080036dd 	.word	0x080036dd
 8003408:	0800342d 	.word	0x0800342d
 800340c:	080036dd 	.word	0x080036dd
 8003410:	080036dd 	.word	0x080036dd
 8003414:	080036dd 	.word	0x080036dd
 8003418:	08003597 	.word	0x08003597
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4bb6      	ldr	r3, [pc, #728]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800341e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003422:	e15f      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003424:	4bb5      	ldr	r3, [pc, #724]	; (80036fc <HAL_RCC_GetSysClockFreq+0x350>)
 8003426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800342a:	e15b      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800342c:	4bb1      	ldr	r3, [pc, #708]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003434:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003438:	4bae      	ldr	r3, [pc, #696]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d031      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003444:	4bab      	ldr	r3, [pc, #684]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	2200      	movs	r2, #0
 800344c:	66bb      	str	r3, [r7, #104]	; 0x68
 800344e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	663b      	str	r3, [r7, #96]	; 0x60
 8003458:	2300      	movs	r3, #0
 800345a:	667b      	str	r3, [r7, #100]	; 0x64
 800345c:	4ba7      	ldr	r3, [pc, #668]	; (80036fc <HAL_RCC_GetSysClockFreq+0x350>)
 800345e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003462:	462a      	mov	r2, r5
 8003464:	fb03 f202 	mul.w	r2, r3, r2
 8003468:	2300      	movs	r3, #0
 800346a:	4621      	mov	r1, r4
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	4aa2      	ldr	r2, [pc, #648]	; (80036fc <HAL_RCC_GetSysClockFreq+0x350>)
 8003474:	4621      	mov	r1, r4
 8003476:	fba1 1202 	umull	r1, r2, r1, r2
 800347a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800347c:	460a      	mov	r2, r1
 800347e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003480:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003482:	4413      	add	r3, r2
 8003484:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800348a:	2200      	movs	r2, #0
 800348c:	65bb      	str	r3, [r7, #88]	; 0x58
 800348e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003490:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003494:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003498:	f7fd fb54 	bl	8000b44 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4613      	mov	r3, r2
 80034a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034a6:	e064      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a8:	4b92      	ldr	r3, [pc, #584]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	2200      	movs	r2, #0
 80034b0:	653b      	str	r3, [r7, #80]	; 0x50
 80034b2:	657a      	str	r2, [r7, #84]	; 0x54
 80034b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80034bc:	2300      	movs	r3, #0
 80034be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80034c4:	4622      	mov	r2, r4
 80034c6:	462b      	mov	r3, r5
 80034c8:	f04f 0000 	mov.w	r0, #0
 80034cc:	f04f 0100 	mov.w	r1, #0
 80034d0:	0159      	lsls	r1, r3, #5
 80034d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d6:	0150      	lsls	r0, r2, #5
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4621      	mov	r1, r4
 80034de:	1a51      	subs	r1, r2, r1
 80034e0:	6139      	str	r1, [r7, #16]
 80034e2:	4629      	mov	r1, r5
 80034e4:	eb63 0301 	sbc.w	r3, r3, r1
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034f6:	4659      	mov	r1, fp
 80034f8:	018b      	lsls	r3, r1, #6
 80034fa:	4651      	mov	r1, sl
 80034fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003500:	4651      	mov	r1, sl
 8003502:	018a      	lsls	r2, r1, #6
 8003504:	4651      	mov	r1, sl
 8003506:	ebb2 0801 	subs.w	r8, r2, r1
 800350a:	4659      	mov	r1, fp
 800350c:	eb63 0901 	sbc.w	r9, r3, r1
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800351c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003520:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003524:	4690      	mov	r8, r2
 8003526:	4699      	mov	r9, r3
 8003528:	4623      	mov	r3, r4
 800352a:	eb18 0303 	adds.w	r3, r8, r3
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	462b      	mov	r3, r5
 8003532:	eb49 0303 	adc.w	r3, r9, r3
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003544:	4629      	mov	r1, r5
 8003546:	028b      	lsls	r3, r1, #10
 8003548:	4621      	mov	r1, r4
 800354a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800354e:	4621      	mov	r1, r4
 8003550:	028a      	lsls	r2, r1, #10
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800355a:	2200      	movs	r2, #0
 800355c:	643b      	str	r3, [r7, #64]	; 0x40
 800355e:	647a      	str	r2, [r7, #68]	; 0x44
 8003560:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003564:	f7fd faee 	bl	8000b44 <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4613      	mov	r3, r2
 800356e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003572:	4b60      	ldr	r3, [pc, #384]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	3301      	adds	r3, #1
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003584:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003588:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003594:	e0a6      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003596:	4b57      	ldr	r3, [pc, #348]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a2:	4b54      	ldr	r3, [pc, #336]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d02a      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ae:	4b51      	ldr	r3, [pc, #324]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	2200      	movs	r2, #0
 80035b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035c0:	2100      	movs	r1, #0
 80035c2:	4b4e      	ldr	r3, [pc, #312]	; (80036fc <HAL_RCC_GetSysClockFreq+0x350>)
 80035c4:	fb03 f201 	mul.w	r2, r3, r1
 80035c8:	2300      	movs	r3, #0
 80035ca:	fb00 f303 	mul.w	r3, r0, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	4a4a      	ldr	r2, [pc, #296]	; (80036fc <HAL_RCC_GetSysClockFreq+0x350>)
 80035d2:	fba0 1202 	umull	r1, r2, r0, r2
 80035d6:	677a      	str	r2, [r7, #116]	; 0x74
 80035d8:	460a      	mov	r2, r1
 80035da:	673a      	str	r2, [r7, #112]	; 0x70
 80035dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035de:	4413      	add	r3, r2
 80035e0:	677b      	str	r3, [r7, #116]	; 0x74
 80035e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035e6:	2200      	movs	r2, #0
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
 80035ea:	637a      	str	r2, [r7, #52]	; 0x34
 80035ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035f0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80035f4:	f7fd faa6 	bl	8000b44 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4613      	mov	r3, r2
 80035fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003602:	e05b      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003604:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	2200      	movs	r2, #0
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
 800360e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
 800361c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003620:	4642      	mov	r2, r8
 8003622:	464b      	mov	r3, r9
 8003624:	f04f 0000 	mov.w	r0, #0
 8003628:	f04f 0100 	mov.w	r1, #0
 800362c:	0159      	lsls	r1, r3, #5
 800362e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003632:	0150      	lsls	r0, r2, #5
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4641      	mov	r1, r8
 800363a:	ebb2 0a01 	subs.w	sl, r2, r1
 800363e:	4649      	mov	r1, r9
 8003640:	eb63 0b01 	sbc.w	fp, r3, r1
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003650:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003654:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003658:	ebb2 040a 	subs.w	r4, r2, sl
 800365c:	eb63 050b 	sbc.w	r5, r3, fp
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	00eb      	lsls	r3, r5, #3
 800366a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800366e:	00e2      	lsls	r2, r4, #3
 8003670:	4614      	mov	r4, r2
 8003672:	461d      	mov	r5, r3
 8003674:	4643      	mov	r3, r8
 8003676:	18e3      	adds	r3, r4, r3
 8003678:	603b      	str	r3, [r7, #0]
 800367a:	464b      	mov	r3, r9
 800367c:	eb45 0303 	adc.w	r3, r5, r3
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800368e:	4629      	mov	r1, r5
 8003690:	028b      	lsls	r3, r1, #10
 8003692:	4621      	mov	r1, r4
 8003694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003698:	4621      	mov	r1, r4
 800369a:	028a      	lsls	r2, r1, #10
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036a4:	2200      	movs	r2, #0
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	61fa      	str	r2, [r7, #28]
 80036aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ae:	f7fd fa49 	bl	8000b44 <__aeabi_uldivmod>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4613      	mov	r3, r2
 80036b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036bc:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	0f1b      	lsrs	r3, r3, #28
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80036ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80036da:	e003      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80036de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80036e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3798      	adds	r7, #152	; 0x98
 80036ec:	46bd      	mov	sp, r7
 80036ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
 80036f8:	00f42400 	.word	0x00f42400
 80036fc:	017d7840 	.word	0x017d7840

08003700 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e28d      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8083 	beq.w	8003826 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003720:	4b94      	ldr	r3, [pc, #592]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b04      	cmp	r3, #4
 800372a:	d019      	beq.n	8003760 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800372c:	4b91      	ldr	r3, [pc, #580]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003734:	2b08      	cmp	r3, #8
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003738:	4b8e      	ldr	r3, [pc, #568]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003744:	d00c      	beq.n	8003760 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003746:	4b8b      	ldr	r3, [pc, #556]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d112      	bne.n	8003778 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003752:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375e:	d10b      	bne.n	8003778 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	4b84      	ldr	r3, [pc, #528]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05b      	beq.n	8003824 <HAL_RCC_OscConfig+0x124>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d157      	bne.n	8003824 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e25a      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d106      	bne.n	8003790 <HAL_RCC_OscConfig+0x90>
 8003782:	4b7c      	ldr	r3, [pc, #496]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7b      	ldr	r2, [pc, #492]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e01d      	b.n	80037cc <HAL_RCC_OscConfig+0xcc>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0xb4>
 800379a:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a75      	ldr	r2, [pc, #468]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4b73      	ldr	r3, [pc, #460]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a72      	ldr	r2, [pc, #456]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0xcc>
 80037b4:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a6e      	ldr	r2, [pc, #440]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a6b      	ldr	r2, [pc, #428]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fd fe5c 	bl	8001490 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fd fe58 	bl	8001490 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e21f      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	4b61      	ldr	r3, [pc, #388]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0xdc>
 80037fa:	e014      	b.n	8003826 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd fe48 	bl	8001490 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003804:	f7fd fe44 	bl	8001490 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	; 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e20b      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003816:	4b57      	ldr	r3, [pc, #348]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x104>
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d06f      	beq.n	8003912 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003832:	4b50      	ldr	r3, [pc, #320]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b00      	cmp	r3, #0
 800383c:	d017      	beq.n	800386e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800383e:	4b4d      	ldr	r3, [pc, #308]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003846:	2b08      	cmp	r3, #8
 8003848:	d105      	bne.n	8003856 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800384a:	4b4a      	ldr	r3, [pc, #296]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003856:	4b47      	ldr	r3, [pc, #284]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d11c      	bne.n	800389c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003862:	4b44      	ldr	r3, [pc, #272]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d116      	bne.n	800389c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386e:	4b41      	ldr	r3, [pc, #260]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_RCC_OscConfig+0x186>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1d3      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4937      	ldr	r1, [pc, #220]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	e03a      	b.n	8003912 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a4:	4b34      	ldr	r3, [pc, #208]	; (8003978 <HAL_RCC_OscConfig+0x278>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fd fdf1 	bl	8001490 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b2:	f7fd fded 	bl	8001490 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e1b4      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	4b2b      	ldr	r3, [pc, #172]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b28      	ldr	r3, [pc, #160]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4925      	ldr	r1, [pc, #148]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_OscConfig+0x278>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd fdd0 	bl	8001490 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fd fdcc 	bl	8001490 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e193      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d036      	beq.n	800398c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_RCC_OscConfig+0x27c>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fd fdb0 	bl	8001490 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003934:	f7fd fdac 	bl	8001490 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e173      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x234>
 8003952:	e01b      	b.n	800398c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_OscConfig+0x27c>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fd fd99 	bl	8001490 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003960:	e00e      	b.n	8003980 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003962:	f7fd fd95 	bl	8001490 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d907      	bls.n	8003980 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e15c      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
 8003974:	40023800 	.word	0x40023800
 8003978:	42470000 	.word	0x42470000
 800397c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	4b8a      	ldr	r3, [pc, #552]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ea      	bne.n	8003962 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8097 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399e:	4b83      	ldr	r3, [pc, #524]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	4b7f      	ldr	r3, [pc, #508]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	4a7e      	ldr	r2, [pc, #504]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ba:	4b7c      	ldr	r3, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ca:	4b79      	ldr	r3, [pc, #484]	; (8003bb0 <HAL_RCC_OscConfig+0x4b0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d118      	bne.n	8003a08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <HAL_RCC_OscConfig+0x4b0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a75      	ldr	r2, [pc, #468]	; (8003bb0 <HAL_RCC_OscConfig+0x4b0>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e2:	f7fd fd55 	bl	8001490 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ea:	f7fd fd51 	bl	8001490 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e118      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	4b6c      	ldr	r3, [pc, #432]	; (8003bb0 <HAL_RCC_OscConfig+0x4b0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d106      	bne.n	8003a1e <HAL_RCC_OscConfig+0x31e>
 8003a10:	4b66      	ldr	r3, [pc, #408]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a65      	ldr	r2, [pc, #404]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	e01c      	b.n	8003a58 <HAL_RCC_OscConfig+0x358>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x340>
 8003a26:	4b61      	ldr	r3, [pc, #388]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	4a60      	ldr	r2, [pc, #384]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	6713      	str	r3, [r2, #112]	; 0x70
 8003a32:	4b5e      	ldr	r3, [pc, #376]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a5d      	ldr	r2, [pc, #372]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCC_OscConfig+0x358>
 8003a40:	4b5a      	ldr	r3, [pc, #360]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a59      	ldr	r2, [pc, #356]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4c:	4b57      	ldr	r3, [pc, #348]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	4a56      	ldr	r2, [pc, #344]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	f023 0304 	bic.w	r3, r3, #4
 8003a56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d015      	beq.n	8003a8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fd fd16 	bl	8001490 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a68:	f7fd fd12 	bl	8001490 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e0d7      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0ee      	beq.n	8003a68 <HAL_RCC_OscConfig+0x368>
 8003a8a:	e014      	b.n	8003ab6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fd fd00 	bl	8001490 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f7fd fcfc 	bl	8001490 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0c1      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aaa:	4b40      	ldr	r3, [pc, #256]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1ee      	bne.n	8003a94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abc:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	4a3a      	ldr	r2, [pc, #232]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80ad 	beq.w	8003c2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad2:	4b36      	ldr	r3, [pc, #216]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d060      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d145      	bne.n	8003b72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae6:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <HAL_RCC_OscConfig+0x4b4>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fd fcd0 	bl	8001490 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd fccc 	bl	8001490 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e093      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	4b29      	ldr	r3, [pc, #164]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	019b      	lsls	r3, r3, #6
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	061b      	lsls	r3, r3, #24
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	071b      	lsls	r3, r3, #28
 8003b3e:	491b      	ldr	r1, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x4b4>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fd fca1 	bl	8001490 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b52:	f7fd fc9d 	bl	8001490 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e064      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x452>
 8003b70:	e05c      	b.n	8003c2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x4b4>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd fc8a 	bl	8001490 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fd fc86 	bl	8001490 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e04d      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x480>
 8003b9e:	e045      	b.n	8003c2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e040      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb8:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <HAL_RCC_OscConfig+0x538>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d030      	beq.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d129      	bne.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d122      	bne.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d119      	bne.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	3b01      	subs	r3, #1
 8003c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d10f      	bne.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800

08003c3c <memset>:
 8003c3c:	4402      	add	r2, r0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <__libc_init_array>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	4d0d      	ldr	r5, [pc, #52]	; (8003c84 <__libc_init_array+0x38>)
 8003c50:	4c0d      	ldr	r4, [pc, #52]	; (8003c88 <__libc_init_array+0x3c>)
 8003c52:	1b64      	subs	r4, r4, r5
 8003c54:	10a4      	asrs	r4, r4, #2
 8003c56:	2600      	movs	r6, #0
 8003c58:	42a6      	cmp	r6, r4
 8003c5a:	d109      	bne.n	8003c70 <__libc_init_array+0x24>
 8003c5c:	4d0b      	ldr	r5, [pc, #44]	; (8003c8c <__libc_init_array+0x40>)
 8003c5e:	4c0c      	ldr	r4, [pc, #48]	; (8003c90 <__libc_init_array+0x44>)
 8003c60:	f001 f85a 	bl	8004d18 <_init>
 8003c64:	1b64      	subs	r4, r4, r5
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	2600      	movs	r6, #0
 8003c6a:	42a6      	cmp	r6, r4
 8003c6c:	d105      	bne.n	8003c7a <__libc_init_array+0x2e>
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c74:	4798      	blx	r3
 8003c76:	3601      	adds	r6, #1
 8003c78:	e7ee      	b.n	8003c58 <__libc_init_array+0xc>
 8003c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7e:	4798      	blx	r3
 8003c80:	3601      	adds	r6, #1
 8003c82:	e7f2      	b.n	8003c6a <__libc_init_array+0x1e>
 8003c84:	08004f28 	.word	0x08004f28
 8003c88:	08004f28 	.word	0x08004f28
 8003c8c:	08004f28 	.word	0x08004f28
 8003c90:	08004f2c 	.word	0x08004f2c
 8003c94:	00000000 	.word	0x00000000

08003c98 <sin>:
 8003c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c9a:	ec53 2b10 	vmov	r2, r3, d0
 8003c9e:	4828      	ldr	r0, [pc, #160]	; (8003d40 <sin+0xa8>)
 8003ca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003ca4:	4281      	cmp	r1, r0
 8003ca6:	dc07      	bgt.n	8003cb8 <sin+0x20>
 8003ca8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003d38 <sin+0xa0>
 8003cac:	2000      	movs	r0, #0
 8003cae:	b005      	add	sp, #20
 8003cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cb4:	f000 b910 	b.w	8003ed8 <__kernel_sin>
 8003cb8:	4822      	ldr	r0, [pc, #136]	; (8003d44 <sin+0xac>)
 8003cba:	4281      	cmp	r1, r0
 8003cbc:	dd09      	ble.n	8003cd2 <sin+0x3a>
 8003cbe:	ee10 0a10 	vmov	r0, s0
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f7fc faa4 	bl	8000210 <__aeabi_dsub>
 8003cc8:	ec41 0b10 	vmov	d0, r0, r1
 8003ccc:	b005      	add	sp, #20
 8003cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cd2:	4668      	mov	r0, sp
 8003cd4:	f000 f9c0 	bl	8004058 <__ieee754_rem_pio2>
 8003cd8:	f000 0003 	and.w	r0, r0, #3
 8003cdc:	2801      	cmp	r0, #1
 8003cde:	d00c      	beq.n	8003cfa <sin+0x62>
 8003ce0:	2802      	cmp	r0, #2
 8003ce2:	d011      	beq.n	8003d08 <sin+0x70>
 8003ce4:	b9f0      	cbnz	r0, 8003d24 <sin+0x8c>
 8003ce6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003cea:	ed9d 0b00 	vldr	d0, [sp]
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f000 f8f2 	bl	8003ed8 <__kernel_sin>
 8003cf4:	ec51 0b10 	vmov	r0, r1, d0
 8003cf8:	e7e6      	b.n	8003cc8 <sin+0x30>
 8003cfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003cfe:	ed9d 0b00 	vldr	d0, [sp]
 8003d02:	f000 f821 	bl	8003d48 <__kernel_cos>
 8003d06:	e7f5      	b.n	8003cf4 <sin+0x5c>
 8003d08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d0c:	ed9d 0b00 	vldr	d0, [sp]
 8003d10:	2001      	movs	r0, #1
 8003d12:	f000 f8e1 	bl	8003ed8 <__kernel_sin>
 8003d16:	ec53 2b10 	vmov	r2, r3, d0
 8003d1a:	ee10 0a10 	vmov	r0, s0
 8003d1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003d22:	e7d1      	b.n	8003cc8 <sin+0x30>
 8003d24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d28:	ed9d 0b00 	vldr	d0, [sp]
 8003d2c:	f000 f80c 	bl	8003d48 <__kernel_cos>
 8003d30:	e7f1      	b.n	8003d16 <sin+0x7e>
 8003d32:	bf00      	nop
 8003d34:	f3af 8000 	nop.w
	...
 8003d40:	3fe921fb 	.word	0x3fe921fb
 8003d44:	7fefffff 	.word	0x7fefffff

08003d48 <__kernel_cos>:
 8003d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	ec57 6b10 	vmov	r6, r7, d0
 8003d50:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003d54:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003d58:	ed8d 1b00 	vstr	d1, [sp]
 8003d5c:	da07      	bge.n	8003d6e <__kernel_cos+0x26>
 8003d5e:	ee10 0a10 	vmov	r0, s0
 8003d62:	4639      	mov	r1, r7
 8003d64:	f7fc fea6 	bl	8000ab4 <__aeabi_d2iz>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	f000 8088 	beq.w	8003e7e <__kernel_cos+0x136>
 8003d6e:	4632      	mov	r2, r6
 8003d70:	463b      	mov	r3, r7
 8003d72:	4630      	mov	r0, r6
 8003d74:	4639      	mov	r1, r7
 8003d76:	f7fc fc03 	bl	8000580 <__aeabi_dmul>
 8003d7a:	4b51      	ldr	r3, [pc, #324]	; (8003ec0 <__kernel_cos+0x178>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4604      	mov	r4, r0
 8003d80:	460d      	mov	r5, r1
 8003d82:	f7fc fbfd 	bl	8000580 <__aeabi_dmul>
 8003d86:	a340      	add	r3, pc, #256	; (adr r3, 8003e88 <__kernel_cos+0x140>)
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	4682      	mov	sl, r0
 8003d8e:	468b      	mov	fp, r1
 8003d90:	4620      	mov	r0, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7fc fbf4 	bl	8000580 <__aeabi_dmul>
 8003d98:	a33d      	add	r3, pc, #244	; (adr r3, 8003e90 <__kernel_cos+0x148>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fa39 	bl	8000214 <__adddf3>
 8003da2:	4622      	mov	r2, r4
 8003da4:	462b      	mov	r3, r5
 8003da6:	f7fc fbeb 	bl	8000580 <__aeabi_dmul>
 8003daa:	a33b      	add	r3, pc, #236	; (adr r3, 8003e98 <__kernel_cos+0x150>)
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	f7fc fa2e 	bl	8000210 <__aeabi_dsub>
 8003db4:	4622      	mov	r2, r4
 8003db6:	462b      	mov	r3, r5
 8003db8:	f7fc fbe2 	bl	8000580 <__aeabi_dmul>
 8003dbc:	a338      	add	r3, pc, #224	; (adr r3, 8003ea0 <__kernel_cos+0x158>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f7fc fa27 	bl	8000214 <__adddf3>
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	462b      	mov	r3, r5
 8003dca:	f7fc fbd9 	bl	8000580 <__aeabi_dmul>
 8003dce:	a336      	add	r3, pc, #216	; (adr r3, 8003ea8 <__kernel_cos+0x160>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f7fc fa1c 	bl	8000210 <__aeabi_dsub>
 8003dd8:	4622      	mov	r2, r4
 8003dda:	462b      	mov	r3, r5
 8003ddc:	f7fc fbd0 	bl	8000580 <__aeabi_dmul>
 8003de0:	a333      	add	r3, pc, #204	; (adr r3, 8003eb0 <__kernel_cos+0x168>)
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f7fc fa15 	bl	8000214 <__adddf3>
 8003dea:	4622      	mov	r2, r4
 8003dec:	462b      	mov	r3, r5
 8003dee:	f7fc fbc7 	bl	8000580 <__aeabi_dmul>
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	f7fc fbc3 	bl	8000580 <__aeabi_dmul>
 8003dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dfe:	4604      	mov	r4, r0
 8003e00:	460d      	mov	r5, r1
 8003e02:	4630      	mov	r0, r6
 8003e04:	4639      	mov	r1, r7
 8003e06:	f7fc fbbb 	bl	8000580 <__aeabi_dmul>
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4629      	mov	r1, r5
 8003e10:	4620      	mov	r0, r4
 8003e12:	f7fc f9fd 	bl	8000210 <__aeabi_dsub>
 8003e16:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <__kernel_cos+0x17c>)
 8003e18:	4598      	cmp	r8, r3
 8003e1a:	4606      	mov	r6, r0
 8003e1c:	460f      	mov	r7, r1
 8003e1e:	dc10      	bgt.n	8003e42 <__kernel_cos+0xfa>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4650      	mov	r0, sl
 8003e26:	4659      	mov	r1, fp
 8003e28:	f7fc f9f2 	bl	8000210 <__aeabi_dsub>
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4926      	ldr	r1, [pc, #152]	; (8003ec8 <__kernel_cos+0x180>)
 8003e30:	4602      	mov	r2, r0
 8003e32:	2000      	movs	r0, #0
 8003e34:	f7fc f9ec 	bl	8000210 <__aeabi_dsub>
 8003e38:	ec41 0b10 	vmov	d0, r0, r1
 8003e3c:	b003      	add	sp, #12
 8003e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e42:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <__kernel_cos+0x184>)
 8003e44:	4920      	ldr	r1, [pc, #128]	; (8003ec8 <__kernel_cos+0x180>)
 8003e46:	4598      	cmp	r8, r3
 8003e48:	bfcc      	ite	gt
 8003e4a:	4d21      	ldrgt	r5, [pc, #132]	; (8003ed0 <__kernel_cos+0x188>)
 8003e4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003e50:	2400      	movs	r4, #0
 8003e52:	4622      	mov	r2, r4
 8003e54:	462b      	mov	r3, r5
 8003e56:	2000      	movs	r0, #0
 8003e58:	f7fc f9da 	bl	8000210 <__aeabi_dsub>
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	4680      	mov	r8, r0
 8003e60:	4689      	mov	r9, r1
 8003e62:	462b      	mov	r3, r5
 8003e64:	4650      	mov	r0, sl
 8003e66:	4659      	mov	r1, fp
 8003e68:	f7fc f9d2 	bl	8000210 <__aeabi_dsub>
 8003e6c:	4632      	mov	r2, r6
 8003e6e:	463b      	mov	r3, r7
 8003e70:	f7fc f9ce 	bl	8000210 <__aeabi_dsub>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4640      	mov	r0, r8
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	e7da      	b.n	8003e34 <__kernel_cos+0xec>
 8003e7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003eb8 <__kernel_cos+0x170>
 8003e82:	e7db      	b.n	8003e3c <__kernel_cos+0xf4>
 8003e84:	f3af 8000 	nop.w
 8003e88:	be8838d4 	.word	0xbe8838d4
 8003e8c:	bda8fae9 	.word	0xbda8fae9
 8003e90:	bdb4b1c4 	.word	0xbdb4b1c4
 8003e94:	3e21ee9e 	.word	0x3e21ee9e
 8003e98:	809c52ad 	.word	0x809c52ad
 8003e9c:	3e927e4f 	.word	0x3e927e4f
 8003ea0:	19cb1590 	.word	0x19cb1590
 8003ea4:	3efa01a0 	.word	0x3efa01a0
 8003ea8:	16c15177 	.word	0x16c15177
 8003eac:	3f56c16c 	.word	0x3f56c16c
 8003eb0:	5555554c 	.word	0x5555554c
 8003eb4:	3fa55555 	.word	0x3fa55555
 8003eb8:	00000000 	.word	0x00000000
 8003ebc:	3ff00000 	.word	0x3ff00000
 8003ec0:	3fe00000 	.word	0x3fe00000
 8003ec4:	3fd33332 	.word	0x3fd33332
 8003ec8:	3ff00000 	.word	0x3ff00000
 8003ecc:	3fe90000 	.word	0x3fe90000
 8003ed0:	3fd20000 	.word	0x3fd20000
 8003ed4:	00000000 	.word	0x00000000

08003ed8 <__kernel_sin>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	ed2d 8b04 	vpush	{d8-d9}
 8003ee0:	eeb0 8a41 	vmov.f32	s16, s2
 8003ee4:	eef0 8a61 	vmov.f32	s17, s3
 8003ee8:	ec55 4b10 	vmov	r4, r5, d0
 8003eec:	b083      	sub	sp, #12
 8003eee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003ef2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003ef6:	9001      	str	r0, [sp, #4]
 8003ef8:	da06      	bge.n	8003f08 <__kernel_sin+0x30>
 8003efa:	ee10 0a10 	vmov	r0, s0
 8003efe:	4629      	mov	r1, r5
 8003f00:	f7fc fdd8 	bl	8000ab4 <__aeabi_d2iz>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d051      	beq.n	8003fac <__kernel_sin+0xd4>
 8003f08:	4622      	mov	r2, r4
 8003f0a:	462b      	mov	r3, r5
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	4629      	mov	r1, r5
 8003f10:	f7fc fb36 	bl	8000580 <__aeabi_dmul>
 8003f14:	4682      	mov	sl, r0
 8003f16:	468b      	mov	fp, r1
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc fb2e 	bl	8000580 <__aeabi_dmul>
 8003f24:	a341      	add	r3, pc, #260	; (adr r3, 800402c <__kernel_sin+0x154>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	4680      	mov	r8, r0
 8003f2c:	4689      	mov	r9, r1
 8003f2e:	4650      	mov	r0, sl
 8003f30:	4659      	mov	r1, fp
 8003f32:	f7fc fb25 	bl	8000580 <__aeabi_dmul>
 8003f36:	a33f      	add	r3, pc, #252	; (adr r3, 8004034 <__kernel_sin+0x15c>)
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f7fc f968 	bl	8000210 <__aeabi_dsub>
 8003f40:	4652      	mov	r2, sl
 8003f42:	465b      	mov	r3, fp
 8003f44:	f7fc fb1c 	bl	8000580 <__aeabi_dmul>
 8003f48:	a33c      	add	r3, pc, #240	; (adr r3, 800403c <__kernel_sin+0x164>)
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f7fc f961 	bl	8000214 <__adddf3>
 8003f52:	4652      	mov	r2, sl
 8003f54:	465b      	mov	r3, fp
 8003f56:	f7fc fb13 	bl	8000580 <__aeabi_dmul>
 8003f5a:	a33a      	add	r3, pc, #232	; (adr r3, 8004044 <__kernel_sin+0x16c>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc f956 	bl	8000210 <__aeabi_dsub>
 8003f64:	4652      	mov	r2, sl
 8003f66:	465b      	mov	r3, fp
 8003f68:	f7fc fb0a 	bl	8000580 <__aeabi_dmul>
 8003f6c:	a337      	add	r3, pc, #220	; (adr r3, 800404c <__kernel_sin+0x174>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f7fc f94f 	bl	8000214 <__adddf3>
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	4606      	mov	r6, r0
 8003f7a:	460f      	mov	r7, r1
 8003f7c:	b9eb      	cbnz	r3, 8003fba <__kernel_sin+0xe2>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4650      	mov	r0, sl
 8003f84:	4659      	mov	r1, fp
 8003f86:	f7fc fafb 	bl	8000580 <__aeabi_dmul>
 8003f8a:	a325      	add	r3, pc, #148	; (adr r3, 8004020 <__kernel_sin+0x148>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f7fc f93e 	bl	8000210 <__aeabi_dsub>
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	f7fc faf2 	bl	8000580 <__aeabi_dmul>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	f7fc f936 	bl	8000214 <__adddf3>
 8003fa8:	4604      	mov	r4, r0
 8003faa:	460d      	mov	r5, r1
 8003fac:	ec45 4b10 	vmov	d0, r4, r5
 8003fb0:	b003      	add	sp, #12
 8003fb2:	ecbd 8b04 	vpop	{d8-d9}
 8003fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <__kernel_sin+0x150>)
 8003fbc:	ec51 0b18 	vmov	r0, r1, d8
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f7fc fadd 	bl	8000580 <__aeabi_dmul>
 8003fc6:	4632      	mov	r2, r6
 8003fc8:	ec41 0b19 	vmov	d9, r0, r1
 8003fcc:	463b      	mov	r3, r7
 8003fce:	4640      	mov	r0, r8
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	f7fc fad5 	bl	8000580 <__aeabi_dmul>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	ec51 0b19 	vmov	r0, r1, d9
 8003fde:	f7fc f917 	bl	8000210 <__aeabi_dsub>
 8003fe2:	4652      	mov	r2, sl
 8003fe4:	465b      	mov	r3, fp
 8003fe6:	f7fc facb 	bl	8000580 <__aeabi_dmul>
 8003fea:	ec53 2b18 	vmov	r2, r3, d8
 8003fee:	f7fc f90f 	bl	8000210 <__aeabi_dsub>
 8003ff2:	a30b      	add	r3, pc, #44	; (adr r3, 8004020 <__kernel_sin+0x148>)
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	460f      	mov	r7, r1
 8003ffc:	4640      	mov	r0, r8
 8003ffe:	4649      	mov	r1, r9
 8004000:	f7fc fabe 	bl	8000580 <__aeabi_dmul>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4630      	mov	r0, r6
 800400a:	4639      	mov	r1, r7
 800400c:	f7fc f902 	bl	8000214 <__adddf3>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4620      	mov	r0, r4
 8004016:	4629      	mov	r1, r5
 8004018:	f7fc f8fa 	bl	8000210 <__aeabi_dsub>
 800401c:	e7c4      	b.n	8003fa8 <__kernel_sin+0xd0>
 800401e:	bf00      	nop
 8004020:	55555549 	.word	0x55555549
 8004024:	3fc55555 	.word	0x3fc55555
 8004028:	3fe00000 	.word	0x3fe00000
 800402c:	5acfd57c 	.word	0x5acfd57c
 8004030:	3de5d93a 	.word	0x3de5d93a
 8004034:	8a2b9ceb 	.word	0x8a2b9ceb
 8004038:	3e5ae5e6 	.word	0x3e5ae5e6
 800403c:	57b1fe7d 	.word	0x57b1fe7d
 8004040:	3ec71de3 	.word	0x3ec71de3
 8004044:	19c161d5 	.word	0x19c161d5
 8004048:	3f2a01a0 	.word	0x3f2a01a0
 800404c:	1110f8a6 	.word	0x1110f8a6
 8004050:	3f811111 	.word	0x3f811111
 8004054:	00000000 	.word	0x00000000

08004058 <__ieee754_rem_pio2>:
 8004058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	ed2d 8b02 	vpush	{d8}
 8004060:	ec55 4b10 	vmov	r4, r5, d0
 8004064:	4bca      	ldr	r3, [pc, #808]	; (8004390 <__ieee754_rem_pio2+0x338>)
 8004066:	b08b      	sub	sp, #44	; 0x2c
 8004068:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800406c:	4598      	cmp	r8, r3
 800406e:	4682      	mov	sl, r0
 8004070:	9502      	str	r5, [sp, #8]
 8004072:	dc08      	bgt.n	8004086 <__ieee754_rem_pio2+0x2e>
 8004074:	2200      	movs	r2, #0
 8004076:	2300      	movs	r3, #0
 8004078:	ed80 0b00 	vstr	d0, [r0]
 800407c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004080:	f04f 0b00 	mov.w	fp, #0
 8004084:	e028      	b.n	80040d8 <__ieee754_rem_pio2+0x80>
 8004086:	4bc3      	ldr	r3, [pc, #780]	; (8004394 <__ieee754_rem_pio2+0x33c>)
 8004088:	4598      	cmp	r8, r3
 800408a:	dc78      	bgt.n	800417e <__ieee754_rem_pio2+0x126>
 800408c:	9b02      	ldr	r3, [sp, #8]
 800408e:	4ec2      	ldr	r6, [pc, #776]	; (8004398 <__ieee754_rem_pio2+0x340>)
 8004090:	2b00      	cmp	r3, #0
 8004092:	ee10 0a10 	vmov	r0, s0
 8004096:	a3b0      	add	r3, pc, #704	; (adr r3, 8004358 <__ieee754_rem_pio2+0x300>)
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	4629      	mov	r1, r5
 800409e:	dd39      	ble.n	8004114 <__ieee754_rem_pio2+0xbc>
 80040a0:	f7fc f8b6 	bl	8000210 <__aeabi_dsub>
 80040a4:	45b0      	cmp	r8, r6
 80040a6:	4604      	mov	r4, r0
 80040a8:	460d      	mov	r5, r1
 80040aa:	d01b      	beq.n	80040e4 <__ieee754_rem_pio2+0x8c>
 80040ac:	a3ac      	add	r3, pc, #688	; (adr r3, 8004360 <__ieee754_rem_pio2+0x308>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f7fc f8ad 	bl	8000210 <__aeabi_dsub>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	e9ca 2300 	strd	r2, r3, [sl]
 80040be:	4620      	mov	r0, r4
 80040c0:	4629      	mov	r1, r5
 80040c2:	f7fc f8a5 	bl	8000210 <__aeabi_dsub>
 80040c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004360 <__ieee754_rem_pio2+0x308>)
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f7fc f8a0 	bl	8000210 <__aeabi_dsub>
 80040d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80040d4:	f04f 0b01 	mov.w	fp, #1
 80040d8:	4658      	mov	r0, fp
 80040da:	b00b      	add	sp, #44	; 0x2c
 80040dc:	ecbd 8b02 	vpop	{d8}
 80040e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004368 <__ieee754_rem_pio2+0x310>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc f891 	bl	8000210 <__aeabi_dsub>
 80040ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8004370 <__ieee754_rem_pio2+0x318>)
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	4604      	mov	r4, r0
 80040f6:	460d      	mov	r5, r1
 80040f8:	f7fc f88a 	bl	8000210 <__aeabi_dsub>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	e9ca 2300 	strd	r2, r3, [sl]
 8004104:	4620      	mov	r0, r4
 8004106:	4629      	mov	r1, r5
 8004108:	f7fc f882 	bl	8000210 <__aeabi_dsub>
 800410c:	a398      	add	r3, pc, #608	; (adr r3, 8004370 <__ieee754_rem_pio2+0x318>)
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	e7db      	b.n	80040cc <__ieee754_rem_pio2+0x74>
 8004114:	f7fc f87e 	bl	8000214 <__adddf3>
 8004118:	45b0      	cmp	r8, r6
 800411a:	4604      	mov	r4, r0
 800411c:	460d      	mov	r5, r1
 800411e:	d016      	beq.n	800414e <__ieee754_rem_pio2+0xf6>
 8004120:	a38f      	add	r3, pc, #572	; (adr r3, 8004360 <__ieee754_rem_pio2+0x308>)
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	f7fc f875 	bl	8000214 <__adddf3>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	e9ca 2300 	strd	r2, r3, [sl]
 8004132:	4620      	mov	r0, r4
 8004134:	4629      	mov	r1, r5
 8004136:	f7fc f86b 	bl	8000210 <__aeabi_dsub>
 800413a:	a389      	add	r3, pc, #548	; (adr r3, 8004360 <__ieee754_rem_pio2+0x308>)
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f7fc f868 	bl	8000214 <__adddf3>
 8004144:	f04f 3bff 	mov.w	fp, #4294967295
 8004148:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800414c:	e7c4      	b.n	80040d8 <__ieee754_rem_pio2+0x80>
 800414e:	a386      	add	r3, pc, #536	; (adr r3, 8004368 <__ieee754_rem_pio2+0x310>)
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f7fc f85e 	bl	8000214 <__adddf3>
 8004158:	a385      	add	r3, pc, #532	; (adr r3, 8004370 <__ieee754_rem_pio2+0x318>)
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	4604      	mov	r4, r0
 8004160:	460d      	mov	r5, r1
 8004162:	f7fc f857 	bl	8000214 <__adddf3>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	e9ca 2300 	strd	r2, r3, [sl]
 800416e:	4620      	mov	r0, r4
 8004170:	4629      	mov	r1, r5
 8004172:	f7fc f84d 	bl	8000210 <__aeabi_dsub>
 8004176:	a37e      	add	r3, pc, #504	; (adr r3, 8004370 <__ieee754_rem_pio2+0x318>)
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	e7e0      	b.n	8004140 <__ieee754_rem_pio2+0xe8>
 800417e:	4b87      	ldr	r3, [pc, #540]	; (800439c <__ieee754_rem_pio2+0x344>)
 8004180:	4598      	cmp	r8, r3
 8004182:	f300 80d8 	bgt.w	8004336 <__ieee754_rem_pio2+0x2de>
 8004186:	f000 f96d 	bl	8004464 <fabs>
 800418a:	ec55 4b10 	vmov	r4, r5, d0
 800418e:	ee10 0a10 	vmov	r0, s0
 8004192:	a379      	add	r3, pc, #484	; (adr r3, 8004378 <__ieee754_rem_pio2+0x320>)
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	4629      	mov	r1, r5
 800419a:	f7fc f9f1 	bl	8000580 <__aeabi_dmul>
 800419e:	4b80      	ldr	r3, [pc, #512]	; (80043a0 <__ieee754_rem_pio2+0x348>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	f7fc f837 	bl	8000214 <__adddf3>
 80041a6:	f7fc fc85 	bl	8000ab4 <__aeabi_d2iz>
 80041aa:	4683      	mov	fp, r0
 80041ac:	f7fc f97e 	bl	80004ac <__aeabi_i2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	ec43 2b18 	vmov	d8, r2, r3
 80041b8:	a367      	add	r3, pc, #412	; (adr r3, 8004358 <__ieee754_rem_pio2+0x300>)
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f7fc f9df 	bl	8000580 <__aeabi_dmul>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4620      	mov	r0, r4
 80041c8:	4629      	mov	r1, r5
 80041ca:	f7fc f821 	bl	8000210 <__aeabi_dsub>
 80041ce:	a364      	add	r3, pc, #400	; (adr r3, 8004360 <__ieee754_rem_pio2+0x308>)
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	4606      	mov	r6, r0
 80041d6:	460f      	mov	r7, r1
 80041d8:	ec51 0b18 	vmov	r0, r1, d8
 80041dc:	f7fc f9d0 	bl	8000580 <__aeabi_dmul>
 80041e0:	f1bb 0f1f 	cmp.w	fp, #31
 80041e4:	4604      	mov	r4, r0
 80041e6:	460d      	mov	r5, r1
 80041e8:	dc0d      	bgt.n	8004206 <__ieee754_rem_pio2+0x1ae>
 80041ea:	4b6e      	ldr	r3, [pc, #440]	; (80043a4 <__ieee754_rem_pio2+0x34c>)
 80041ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 80041f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f4:	4543      	cmp	r3, r8
 80041f6:	d006      	beq.n	8004206 <__ieee754_rem_pio2+0x1ae>
 80041f8:	4622      	mov	r2, r4
 80041fa:	462b      	mov	r3, r5
 80041fc:	4630      	mov	r0, r6
 80041fe:	4639      	mov	r1, r7
 8004200:	f7fc f806 	bl	8000210 <__aeabi_dsub>
 8004204:	e00e      	b.n	8004224 <__ieee754_rem_pio2+0x1cc>
 8004206:	462b      	mov	r3, r5
 8004208:	4622      	mov	r2, r4
 800420a:	4630      	mov	r0, r6
 800420c:	4639      	mov	r1, r7
 800420e:	f7fb ffff 	bl	8000210 <__aeabi_dsub>
 8004212:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004216:	9303      	str	r3, [sp, #12]
 8004218:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800421c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004220:	2b10      	cmp	r3, #16
 8004222:	dc02      	bgt.n	800422a <__ieee754_rem_pio2+0x1d2>
 8004224:	e9ca 0100 	strd	r0, r1, [sl]
 8004228:	e039      	b.n	800429e <__ieee754_rem_pio2+0x246>
 800422a:	a34f      	add	r3, pc, #316	; (adr r3, 8004368 <__ieee754_rem_pio2+0x310>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	ec51 0b18 	vmov	r0, r1, d8
 8004234:	f7fc f9a4 	bl	8000580 <__aeabi_dmul>
 8004238:	4604      	mov	r4, r0
 800423a:	460d      	mov	r5, r1
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4630      	mov	r0, r6
 8004242:	4639      	mov	r1, r7
 8004244:	f7fb ffe4 	bl	8000210 <__aeabi_dsub>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4680      	mov	r8, r0
 800424e:	4689      	mov	r9, r1
 8004250:	4630      	mov	r0, r6
 8004252:	4639      	mov	r1, r7
 8004254:	f7fb ffdc 	bl	8000210 <__aeabi_dsub>
 8004258:	4622      	mov	r2, r4
 800425a:	462b      	mov	r3, r5
 800425c:	f7fb ffd8 	bl	8000210 <__aeabi_dsub>
 8004260:	a343      	add	r3, pc, #268	; (adr r3, 8004370 <__ieee754_rem_pio2+0x318>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	4604      	mov	r4, r0
 8004268:	460d      	mov	r5, r1
 800426a:	ec51 0b18 	vmov	r0, r1, d8
 800426e:	f7fc f987 	bl	8000580 <__aeabi_dmul>
 8004272:	4622      	mov	r2, r4
 8004274:	462b      	mov	r3, r5
 8004276:	f7fb ffcb 	bl	8000210 <__aeabi_dsub>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4604      	mov	r4, r0
 8004280:	460d      	mov	r5, r1
 8004282:	4640      	mov	r0, r8
 8004284:	4649      	mov	r1, r9
 8004286:	f7fb ffc3 	bl	8000210 <__aeabi_dsub>
 800428a:	9a03      	ldr	r2, [sp, #12]
 800428c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b31      	cmp	r3, #49	; 0x31
 8004294:	dc24      	bgt.n	80042e0 <__ieee754_rem_pio2+0x288>
 8004296:	e9ca 0100 	strd	r0, r1, [sl]
 800429a:	4646      	mov	r6, r8
 800429c:	464f      	mov	r7, r9
 800429e:	e9da 8900 	ldrd	r8, r9, [sl]
 80042a2:	4630      	mov	r0, r6
 80042a4:	4642      	mov	r2, r8
 80042a6:	464b      	mov	r3, r9
 80042a8:	4639      	mov	r1, r7
 80042aa:	f7fb ffb1 	bl	8000210 <__aeabi_dsub>
 80042ae:	462b      	mov	r3, r5
 80042b0:	4622      	mov	r2, r4
 80042b2:	f7fb ffad 	bl	8000210 <__aeabi_dsub>
 80042b6:	9b02      	ldr	r3, [sp, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80042be:	f6bf af0b 	bge.w	80040d8 <__ieee754_rem_pio2+0x80>
 80042c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80042c6:	f8ca 3004 	str.w	r3, [sl, #4]
 80042ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042ce:	f8ca 8000 	str.w	r8, [sl]
 80042d2:	f8ca 0008 	str.w	r0, [sl, #8]
 80042d6:	f8ca 300c 	str.w	r3, [sl, #12]
 80042da:	f1cb 0b00 	rsb	fp, fp, #0
 80042de:	e6fb      	b.n	80040d8 <__ieee754_rem_pio2+0x80>
 80042e0:	a327      	add	r3, pc, #156	; (adr r3, 8004380 <__ieee754_rem_pio2+0x328>)
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	ec51 0b18 	vmov	r0, r1, d8
 80042ea:	f7fc f949 	bl	8000580 <__aeabi_dmul>
 80042ee:	4604      	mov	r4, r0
 80042f0:	460d      	mov	r5, r1
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4640      	mov	r0, r8
 80042f8:	4649      	mov	r1, r9
 80042fa:	f7fb ff89 	bl	8000210 <__aeabi_dsub>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4606      	mov	r6, r0
 8004304:	460f      	mov	r7, r1
 8004306:	4640      	mov	r0, r8
 8004308:	4649      	mov	r1, r9
 800430a:	f7fb ff81 	bl	8000210 <__aeabi_dsub>
 800430e:	4622      	mov	r2, r4
 8004310:	462b      	mov	r3, r5
 8004312:	f7fb ff7d 	bl	8000210 <__aeabi_dsub>
 8004316:	a31c      	add	r3, pc, #112	; (adr r3, 8004388 <__ieee754_rem_pio2+0x330>)
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	4604      	mov	r4, r0
 800431e:	460d      	mov	r5, r1
 8004320:	ec51 0b18 	vmov	r0, r1, d8
 8004324:	f7fc f92c 	bl	8000580 <__aeabi_dmul>
 8004328:	4622      	mov	r2, r4
 800432a:	462b      	mov	r3, r5
 800432c:	f7fb ff70 	bl	8000210 <__aeabi_dsub>
 8004330:	4604      	mov	r4, r0
 8004332:	460d      	mov	r5, r1
 8004334:	e760      	b.n	80041f8 <__ieee754_rem_pio2+0x1a0>
 8004336:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <__ieee754_rem_pio2+0x350>)
 8004338:	4598      	cmp	r8, r3
 800433a:	dd37      	ble.n	80043ac <__ieee754_rem_pio2+0x354>
 800433c:	ee10 2a10 	vmov	r2, s0
 8004340:	462b      	mov	r3, r5
 8004342:	4620      	mov	r0, r4
 8004344:	4629      	mov	r1, r5
 8004346:	f7fb ff63 	bl	8000210 <__aeabi_dsub>
 800434a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800434e:	e9ca 0100 	strd	r0, r1, [sl]
 8004352:	e695      	b.n	8004080 <__ieee754_rem_pio2+0x28>
 8004354:	f3af 8000 	nop.w
 8004358:	54400000 	.word	0x54400000
 800435c:	3ff921fb 	.word	0x3ff921fb
 8004360:	1a626331 	.word	0x1a626331
 8004364:	3dd0b461 	.word	0x3dd0b461
 8004368:	1a600000 	.word	0x1a600000
 800436c:	3dd0b461 	.word	0x3dd0b461
 8004370:	2e037073 	.word	0x2e037073
 8004374:	3ba3198a 	.word	0x3ba3198a
 8004378:	6dc9c883 	.word	0x6dc9c883
 800437c:	3fe45f30 	.word	0x3fe45f30
 8004380:	2e000000 	.word	0x2e000000
 8004384:	3ba3198a 	.word	0x3ba3198a
 8004388:	252049c1 	.word	0x252049c1
 800438c:	397b839a 	.word	0x397b839a
 8004390:	3fe921fb 	.word	0x3fe921fb
 8004394:	4002d97b 	.word	0x4002d97b
 8004398:	3ff921fb 	.word	0x3ff921fb
 800439c:	413921fb 	.word	0x413921fb
 80043a0:	3fe00000 	.word	0x3fe00000
 80043a4:	08004d48 	.word	0x08004d48
 80043a8:	7fefffff 	.word	0x7fefffff
 80043ac:	ea4f 5628 	mov.w	r6, r8, asr #20
 80043b0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80043b4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80043b8:	4620      	mov	r0, r4
 80043ba:	460d      	mov	r5, r1
 80043bc:	f7fc fb7a 	bl	8000ab4 <__aeabi_d2iz>
 80043c0:	f7fc f874 	bl	80004ac <__aeabi_i2d>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4620      	mov	r0, r4
 80043ca:	4629      	mov	r1, r5
 80043cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043d0:	f7fb ff1e 	bl	8000210 <__aeabi_dsub>
 80043d4:	4b21      	ldr	r3, [pc, #132]	; (800445c <__ieee754_rem_pio2+0x404>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	f7fc f8d2 	bl	8000580 <__aeabi_dmul>
 80043dc:	460d      	mov	r5, r1
 80043de:	4604      	mov	r4, r0
 80043e0:	f7fc fb68 	bl	8000ab4 <__aeabi_d2iz>
 80043e4:	f7fc f862 	bl	80004ac <__aeabi_i2d>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4620      	mov	r0, r4
 80043ee:	4629      	mov	r1, r5
 80043f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80043f4:	f7fb ff0c 	bl	8000210 <__aeabi_dsub>
 80043f8:	4b18      	ldr	r3, [pc, #96]	; (800445c <__ieee754_rem_pio2+0x404>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	f7fc f8c0 	bl	8000580 <__aeabi_dmul>
 8004400:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004404:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8004408:	2703      	movs	r7, #3
 800440a:	2400      	movs	r4, #0
 800440c:	2500      	movs	r5, #0
 800440e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8004412:	4622      	mov	r2, r4
 8004414:	462b      	mov	r3, r5
 8004416:	46b9      	mov	r9, r7
 8004418:	3f01      	subs	r7, #1
 800441a:	f7fc fb19 	bl	8000a50 <__aeabi_dcmpeq>
 800441e:	2800      	cmp	r0, #0
 8004420:	d1f5      	bne.n	800440e <__ieee754_rem_pio2+0x3b6>
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <__ieee754_rem_pio2+0x408>)
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	2302      	movs	r3, #2
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	4632      	mov	r2, r6
 800442c:	464b      	mov	r3, r9
 800442e:	4651      	mov	r1, sl
 8004430:	a804      	add	r0, sp, #16
 8004432:	f000 f821 	bl	8004478 <__kernel_rem_pio2>
 8004436:	9b02      	ldr	r3, [sp, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	4683      	mov	fp, r0
 800443c:	f6bf ae4c 	bge.w	80040d8 <__ieee754_rem_pio2+0x80>
 8004440:	e9da 2100 	ldrd	r2, r1, [sl]
 8004444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004448:	e9ca 2300 	strd	r2, r3, [sl]
 800444c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004450:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004454:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004458:	e73f      	b.n	80042da <__ieee754_rem_pio2+0x282>
 800445a:	bf00      	nop
 800445c:	41700000 	.word	0x41700000
 8004460:	08004dc8 	.word	0x08004dc8

08004464 <fabs>:
 8004464:	ec51 0b10 	vmov	r0, r1, d0
 8004468:	ee10 2a10 	vmov	r2, s0
 800446c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004470:	ec43 2b10 	vmov	d0, r2, r3
 8004474:	4770      	bx	lr
	...

08004478 <__kernel_rem_pio2>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	ed2d 8b02 	vpush	{d8}
 8004480:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004484:	f112 0f14 	cmn.w	r2, #20
 8004488:	9306      	str	r3, [sp, #24]
 800448a:	9104      	str	r1, [sp, #16]
 800448c:	4bc2      	ldr	r3, [pc, #776]	; (8004798 <__kernel_rem_pio2+0x320>)
 800448e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004490:	9009      	str	r0, [sp, #36]	; 0x24
 8004492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	9b06      	ldr	r3, [sp, #24]
 800449a:	f103 33ff 	add.w	r3, r3, #4294967295
 800449e:	bfa8      	it	ge
 80044a0:	1ed4      	subge	r4, r2, #3
 80044a2:	9305      	str	r3, [sp, #20]
 80044a4:	bfb2      	itee	lt
 80044a6:	2400      	movlt	r4, #0
 80044a8:	2318      	movge	r3, #24
 80044aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80044ae:	f06f 0317 	mvn.w	r3, #23
 80044b2:	fb04 3303 	mla	r3, r4, r3, r3
 80044b6:	eb03 0a02 	add.w	sl, r3, r2
 80044ba:	9b00      	ldr	r3, [sp, #0]
 80044bc:	9a05      	ldr	r2, [sp, #20]
 80044be:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004788 <__kernel_rem_pio2+0x310>
 80044c2:	eb03 0802 	add.w	r8, r3, r2
 80044c6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80044c8:	1aa7      	subs	r7, r4, r2
 80044ca:	ae20      	add	r6, sp, #128	; 0x80
 80044cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80044d0:	2500      	movs	r5, #0
 80044d2:	4545      	cmp	r5, r8
 80044d4:	dd13      	ble.n	80044fe <__kernel_rem_pio2+0x86>
 80044d6:	9b06      	ldr	r3, [sp, #24]
 80044d8:	aa20      	add	r2, sp, #128	; 0x80
 80044da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80044de:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80044e2:	f04f 0800 	mov.w	r8, #0
 80044e6:	9b00      	ldr	r3, [sp, #0]
 80044e8:	4598      	cmp	r8, r3
 80044ea:	dc31      	bgt.n	8004550 <__kernel_rem_pio2+0xd8>
 80044ec:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004788 <__kernel_rem_pio2+0x310>
 80044f0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80044f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80044f8:	462f      	mov	r7, r5
 80044fa:	2600      	movs	r6, #0
 80044fc:	e01b      	b.n	8004536 <__kernel_rem_pio2+0xbe>
 80044fe:	42ef      	cmn	r7, r5
 8004500:	d407      	bmi.n	8004512 <__kernel_rem_pio2+0x9a>
 8004502:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004506:	f7fb ffd1 	bl	80004ac <__aeabi_i2d>
 800450a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800450e:	3501      	adds	r5, #1
 8004510:	e7df      	b.n	80044d2 <__kernel_rem_pio2+0x5a>
 8004512:	ec51 0b18 	vmov	r0, r1, d8
 8004516:	e7f8      	b.n	800450a <__kernel_rem_pio2+0x92>
 8004518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800451c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004520:	f7fc f82e 	bl	8000580 <__aeabi_dmul>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800452c:	f7fb fe72 	bl	8000214 <__adddf3>
 8004530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004534:	3601      	adds	r6, #1
 8004536:	9b05      	ldr	r3, [sp, #20]
 8004538:	429e      	cmp	r6, r3
 800453a:	f1a7 0708 	sub.w	r7, r7, #8
 800453e:	ddeb      	ble.n	8004518 <__kernel_rem_pio2+0xa0>
 8004540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004544:	f108 0801 	add.w	r8, r8, #1
 8004548:	ecab 7b02 	vstmia	fp!, {d7}
 800454c:	3508      	adds	r5, #8
 800454e:	e7ca      	b.n	80044e6 <__kernel_rem_pio2+0x6e>
 8004550:	9b00      	ldr	r3, [sp, #0]
 8004552:	aa0c      	add	r2, sp, #48	; 0x30
 8004554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004558:	930b      	str	r3, [sp, #44]	; 0x2c
 800455a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800455c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004560:	9c00      	ldr	r4, [sp, #0]
 8004562:	930a      	str	r3, [sp, #40]	; 0x28
 8004564:	00e3      	lsls	r3, r4, #3
 8004566:	9308      	str	r3, [sp, #32]
 8004568:	ab98      	add	r3, sp, #608	; 0x260
 800456a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800456e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004572:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8004576:	ab70      	add	r3, sp, #448	; 0x1c0
 8004578:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800457c:	46c3      	mov	fp, r8
 800457e:	46a1      	mov	r9, r4
 8004580:	f1b9 0f00 	cmp.w	r9, #0
 8004584:	f1a5 0508 	sub.w	r5, r5, #8
 8004588:	dc77      	bgt.n	800467a <__kernel_rem_pio2+0x202>
 800458a:	ec47 6b10 	vmov	d0, r6, r7
 800458e:	4650      	mov	r0, sl
 8004590:	f000 fac2 	bl	8004b18 <scalbn>
 8004594:	ec57 6b10 	vmov	r6, r7, d0
 8004598:	2200      	movs	r2, #0
 800459a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800459e:	ee10 0a10 	vmov	r0, s0
 80045a2:	4639      	mov	r1, r7
 80045a4:	f7fb ffec 	bl	8000580 <__aeabi_dmul>
 80045a8:	ec41 0b10 	vmov	d0, r0, r1
 80045ac:	f000 fb34 	bl	8004c18 <floor>
 80045b0:	4b7a      	ldr	r3, [pc, #488]	; (800479c <__kernel_rem_pio2+0x324>)
 80045b2:	ec51 0b10 	vmov	r0, r1, d0
 80045b6:	2200      	movs	r2, #0
 80045b8:	f7fb ffe2 	bl	8000580 <__aeabi_dmul>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4630      	mov	r0, r6
 80045c2:	4639      	mov	r1, r7
 80045c4:	f7fb fe24 	bl	8000210 <__aeabi_dsub>
 80045c8:	460f      	mov	r7, r1
 80045ca:	4606      	mov	r6, r0
 80045cc:	f7fc fa72 	bl	8000ab4 <__aeabi_d2iz>
 80045d0:	9002      	str	r0, [sp, #8]
 80045d2:	f7fb ff6b 	bl	80004ac <__aeabi_i2d>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4630      	mov	r0, r6
 80045dc:	4639      	mov	r1, r7
 80045de:	f7fb fe17 	bl	8000210 <__aeabi_dsub>
 80045e2:	f1ba 0f00 	cmp.w	sl, #0
 80045e6:	4606      	mov	r6, r0
 80045e8:	460f      	mov	r7, r1
 80045ea:	dd6d      	ble.n	80046c8 <__kernel_rem_pio2+0x250>
 80045ec:	1e61      	subs	r1, r4, #1
 80045ee:	ab0c      	add	r3, sp, #48	; 0x30
 80045f0:	9d02      	ldr	r5, [sp, #8]
 80045f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80045f6:	f1ca 0018 	rsb	r0, sl, #24
 80045fa:	fa43 f200 	asr.w	r2, r3, r0
 80045fe:	4415      	add	r5, r2
 8004600:	4082      	lsls	r2, r0
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	aa0c      	add	r2, sp, #48	; 0x30
 8004606:	9502      	str	r5, [sp, #8]
 8004608:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800460c:	f1ca 0217 	rsb	r2, sl, #23
 8004610:	fa43 fb02 	asr.w	fp, r3, r2
 8004614:	f1bb 0f00 	cmp.w	fp, #0
 8004618:	dd65      	ble.n	80046e6 <__kernel_rem_pio2+0x26e>
 800461a:	9b02      	ldr	r3, [sp, #8]
 800461c:	2200      	movs	r2, #0
 800461e:	3301      	adds	r3, #1
 8004620:	9302      	str	r3, [sp, #8]
 8004622:	4615      	mov	r5, r2
 8004624:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004628:	4294      	cmp	r4, r2
 800462a:	f300 809f 	bgt.w	800476c <__kernel_rem_pio2+0x2f4>
 800462e:	f1ba 0f00 	cmp.w	sl, #0
 8004632:	dd07      	ble.n	8004644 <__kernel_rem_pio2+0x1cc>
 8004634:	f1ba 0f01 	cmp.w	sl, #1
 8004638:	f000 80c1 	beq.w	80047be <__kernel_rem_pio2+0x346>
 800463c:	f1ba 0f02 	cmp.w	sl, #2
 8004640:	f000 80c7 	beq.w	80047d2 <__kernel_rem_pio2+0x35a>
 8004644:	f1bb 0f02 	cmp.w	fp, #2
 8004648:	d14d      	bne.n	80046e6 <__kernel_rem_pio2+0x26e>
 800464a:	4632      	mov	r2, r6
 800464c:	463b      	mov	r3, r7
 800464e:	4954      	ldr	r1, [pc, #336]	; (80047a0 <__kernel_rem_pio2+0x328>)
 8004650:	2000      	movs	r0, #0
 8004652:	f7fb fddd 	bl	8000210 <__aeabi_dsub>
 8004656:	4606      	mov	r6, r0
 8004658:	460f      	mov	r7, r1
 800465a:	2d00      	cmp	r5, #0
 800465c:	d043      	beq.n	80046e6 <__kernel_rem_pio2+0x26e>
 800465e:	4650      	mov	r0, sl
 8004660:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8004790 <__kernel_rem_pio2+0x318>
 8004664:	f000 fa58 	bl	8004b18 <scalbn>
 8004668:	4630      	mov	r0, r6
 800466a:	4639      	mov	r1, r7
 800466c:	ec53 2b10 	vmov	r2, r3, d0
 8004670:	f7fb fdce 	bl	8000210 <__aeabi_dsub>
 8004674:	4606      	mov	r6, r0
 8004676:	460f      	mov	r7, r1
 8004678:	e035      	b.n	80046e6 <__kernel_rem_pio2+0x26e>
 800467a:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <__kernel_rem_pio2+0x32c>)
 800467c:	2200      	movs	r2, #0
 800467e:	4630      	mov	r0, r6
 8004680:	4639      	mov	r1, r7
 8004682:	f7fb ff7d 	bl	8000580 <__aeabi_dmul>
 8004686:	f7fc fa15 	bl	8000ab4 <__aeabi_d2iz>
 800468a:	f7fb ff0f 	bl	80004ac <__aeabi_i2d>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	ec43 2b18 	vmov	d8, r2, r3
 8004696:	4b44      	ldr	r3, [pc, #272]	; (80047a8 <__kernel_rem_pio2+0x330>)
 8004698:	2200      	movs	r2, #0
 800469a:	f7fb ff71 	bl	8000580 <__aeabi_dmul>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4630      	mov	r0, r6
 80046a4:	4639      	mov	r1, r7
 80046a6:	f7fb fdb3 	bl	8000210 <__aeabi_dsub>
 80046aa:	f7fc fa03 	bl	8000ab4 <__aeabi_d2iz>
 80046ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046b2:	f84b 0b04 	str.w	r0, [fp], #4
 80046b6:	ec51 0b18 	vmov	r0, r1, d8
 80046ba:	f7fb fdab 	bl	8000214 <__adddf3>
 80046be:	f109 39ff 	add.w	r9, r9, #4294967295
 80046c2:	4606      	mov	r6, r0
 80046c4:	460f      	mov	r7, r1
 80046c6:	e75b      	b.n	8004580 <__kernel_rem_pio2+0x108>
 80046c8:	d106      	bne.n	80046d8 <__kernel_rem_pio2+0x260>
 80046ca:	1e63      	subs	r3, r4, #1
 80046cc:	aa0c      	add	r2, sp, #48	; 0x30
 80046ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80046d6:	e79d      	b.n	8004614 <__kernel_rem_pio2+0x19c>
 80046d8:	4b34      	ldr	r3, [pc, #208]	; (80047ac <__kernel_rem_pio2+0x334>)
 80046da:	2200      	movs	r2, #0
 80046dc:	f7fc f9d6 	bl	8000a8c <__aeabi_dcmpge>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d140      	bne.n	8004766 <__kernel_rem_pio2+0x2ee>
 80046e4:	4683      	mov	fp, r0
 80046e6:	2200      	movs	r2, #0
 80046e8:	2300      	movs	r3, #0
 80046ea:	4630      	mov	r0, r6
 80046ec:	4639      	mov	r1, r7
 80046ee:	f7fc f9af 	bl	8000a50 <__aeabi_dcmpeq>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f000 80c1 	beq.w	800487a <__kernel_rem_pio2+0x402>
 80046f8:	1e65      	subs	r5, r4, #1
 80046fa:	462b      	mov	r3, r5
 80046fc:	2200      	movs	r2, #0
 80046fe:	9900      	ldr	r1, [sp, #0]
 8004700:	428b      	cmp	r3, r1
 8004702:	da6d      	bge.n	80047e0 <__kernel_rem_pio2+0x368>
 8004704:	2a00      	cmp	r2, #0
 8004706:	f000 808a 	beq.w	800481e <__kernel_rem_pio2+0x3a6>
 800470a:	ab0c      	add	r3, sp, #48	; 0x30
 800470c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004710:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80ae 	beq.w	8004876 <__kernel_rem_pio2+0x3fe>
 800471a:	4650      	mov	r0, sl
 800471c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004790 <__kernel_rem_pio2+0x318>
 8004720:	f000 f9fa 	bl	8004b18 <scalbn>
 8004724:	1c6b      	adds	r3, r5, #1
 8004726:	00da      	lsls	r2, r3, #3
 8004728:	9205      	str	r2, [sp, #20]
 800472a:	ec57 6b10 	vmov	r6, r7, d0
 800472e:	aa70      	add	r2, sp, #448	; 0x1c0
 8004730:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80047a4 <__kernel_rem_pio2+0x32c>
 8004734:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004738:	462c      	mov	r4, r5
 800473a:	f04f 0800 	mov.w	r8, #0
 800473e:	2c00      	cmp	r4, #0
 8004740:	f280 80d4 	bge.w	80048ec <__kernel_rem_pio2+0x474>
 8004744:	462c      	mov	r4, r5
 8004746:	2c00      	cmp	r4, #0
 8004748:	f2c0 8102 	blt.w	8004950 <__kernel_rem_pio2+0x4d8>
 800474c:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <__kernel_rem_pio2+0x338>)
 800474e:	461e      	mov	r6, r3
 8004750:	ab70      	add	r3, sp, #448	; 0x1c0
 8004752:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8004756:	1b2b      	subs	r3, r5, r4
 8004758:	f04f 0900 	mov.w	r9, #0
 800475c:	f04f 0a00 	mov.w	sl, #0
 8004760:	2700      	movs	r7, #0
 8004762:	9306      	str	r3, [sp, #24]
 8004764:	e0e6      	b.n	8004934 <__kernel_rem_pio2+0x4bc>
 8004766:	f04f 0b02 	mov.w	fp, #2
 800476a:	e756      	b.n	800461a <__kernel_rem_pio2+0x1a2>
 800476c:	f8d8 3000 	ldr.w	r3, [r8]
 8004770:	bb05      	cbnz	r5, 80047b4 <__kernel_rem_pio2+0x33c>
 8004772:	b123      	cbz	r3, 800477e <__kernel_rem_pio2+0x306>
 8004774:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004778:	f8c8 3000 	str.w	r3, [r8]
 800477c:	2301      	movs	r3, #1
 800477e:	3201      	adds	r2, #1
 8004780:	f108 0804 	add.w	r8, r8, #4
 8004784:	461d      	mov	r5, r3
 8004786:	e74f      	b.n	8004628 <__kernel_rem_pio2+0x1b0>
	...
 8004794:	3ff00000 	.word	0x3ff00000
 8004798:	08004f10 	.word	0x08004f10
 800479c:	40200000 	.word	0x40200000
 80047a0:	3ff00000 	.word	0x3ff00000
 80047a4:	3e700000 	.word	0x3e700000
 80047a8:	41700000 	.word	0x41700000
 80047ac:	3fe00000 	.word	0x3fe00000
 80047b0:	08004ed0 	.word	0x08004ed0
 80047b4:	1acb      	subs	r3, r1, r3
 80047b6:	f8c8 3000 	str.w	r3, [r8]
 80047ba:	462b      	mov	r3, r5
 80047bc:	e7df      	b.n	800477e <__kernel_rem_pio2+0x306>
 80047be:	1e62      	subs	r2, r4, #1
 80047c0:	ab0c      	add	r3, sp, #48	; 0x30
 80047c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80047ca:	a90c      	add	r1, sp, #48	; 0x30
 80047cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80047d0:	e738      	b.n	8004644 <__kernel_rem_pio2+0x1cc>
 80047d2:	1e62      	subs	r2, r4, #1
 80047d4:	ab0c      	add	r3, sp, #48	; 0x30
 80047d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047da:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80047de:	e7f4      	b.n	80047ca <__kernel_rem_pio2+0x352>
 80047e0:	a90c      	add	r1, sp, #48	; 0x30
 80047e2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	430a      	orrs	r2, r1
 80047ea:	e788      	b.n	80046fe <__kernel_rem_pio2+0x286>
 80047ec:	3301      	adds	r3, #1
 80047ee:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80047f2:	2900      	cmp	r1, #0
 80047f4:	d0fa      	beq.n	80047ec <__kernel_rem_pio2+0x374>
 80047f6:	9a08      	ldr	r2, [sp, #32]
 80047f8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80047fc:	446a      	add	r2, sp
 80047fe:	3a98      	subs	r2, #152	; 0x98
 8004800:	9208      	str	r2, [sp, #32]
 8004802:	9a06      	ldr	r2, [sp, #24]
 8004804:	a920      	add	r1, sp, #128	; 0x80
 8004806:	18a2      	adds	r2, r4, r2
 8004808:	18e3      	adds	r3, r4, r3
 800480a:	f104 0801 	add.w	r8, r4, #1
 800480e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8004812:	9302      	str	r3, [sp, #8]
 8004814:	9b02      	ldr	r3, [sp, #8]
 8004816:	4543      	cmp	r3, r8
 8004818:	da04      	bge.n	8004824 <__kernel_rem_pio2+0x3ac>
 800481a:	461c      	mov	r4, r3
 800481c:	e6a2      	b.n	8004564 <__kernel_rem_pio2+0xec>
 800481e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004820:	2301      	movs	r3, #1
 8004822:	e7e4      	b.n	80047ee <__kernel_rem_pio2+0x376>
 8004824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004826:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800482a:	f7fb fe3f 	bl	80004ac <__aeabi_i2d>
 800482e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004834:	46ab      	mov	fp, r5
 8004836:	461c      	mov	r4, r3
 8004838:	f04f 0900 	mov.w	r9, #0
 800483c:	2600      	movs	r6, #0
 800483e:	2700      	movs	r7, #0
 8004840:	9b05      	ldr	r3, [sp, #20]
 8004842:	4599      	cmp	r9, r3
 8004844:	dd06      	ble.n	8004854 <__kernel_rem_pio2+0x3dc>
 8004846:	9b08      	ldr	r3, [sp, #32]
 8004848:	e8e3 6702 	strd	r6, r7, [r3], #8
 800484c:	f108 0801 	add.w	r8, r8, #1
 8004850:	9308      	str	r3, [sp, #32]
 8004852:	e7df      	b.n	8004814 <__kernel_rem_pio2+0x39c>
 8004854:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004858:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800485c:	f7fb fe90 	bl	8000580 <__aeabi_dmul>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4630      	mov	r0, r6
 8004866:	4639      	mov	r1, r7
 8004868:	f7fb fcd4 	bl	8000214 <__adddf3>
 800486c:	f109 0901 	add.w	r9, r9, #1
 8004870:	4606      	mov	r6, r0
 8004872:	460f      	mov	r7, r1
 8004874:	e7e4      	b.n	8004840 <__kernel_rem_pio2+0x3c8>
 8004876:	3d01      	subs	r5, #1
 8004878:	e747      	b.n	800470a <__kernel_rem_pio2+0x292>
 800487a:	ec47 6b10 	vmov	d0, r6, r7
 800487e:	f1ca 0000 	rsb	r0, sl, #0
 8004882:	f000 f949 	bl	8004b18 <scalbn>
 8004886:	ec57 6b10 	vmov	r6, r7, d0
 800488a:	4ba0      	ldr	r3, [pc, #640]	; (8004b0c <__kernel_rem_pio2+0x694>)
 800488c:	ee10 0a10 	vmov	r0, s0
 8004890:	2200      	movs	r2, #0
 8004892:	4639      	mov	r1, r7
 8004894:	f7fc f8fa 	bl	8000a8c <__aeabi_dcmpge>
 8004898:	b1f8      	cbz	r0, 80048da <__kernel_rem_pio2+0x462>
 800489a:	4b9d      	ldr	r3, [pc, #628]	; (8004b10 <__kernel_rem_pio2+0x698>)
 800489c:	2200      	movs	r2, #0
 800489e:	4630      	mov	r0, r6
 80048a0:	4639      	mov	r1, r7
 80048a2:	f7fb fe6d 	bl	8000580 <__aeabi_dmul>
 80048a6:	f7fc f905 	bl	8000ab4 <__aeabi_d2iz>
 80048aa:	4680      	mov	r8, r0
 80048ac:	f7fb fdfe 	bl	80004ac <__aeabi_i2d>
 80048b0:	4b96      	ldr	r3, [pc, #600]	; (8004b0c <__kernel_rem_pio2+0x694>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	f7fb fe64 	bl	8000580 <__aeabi_dmul>
 80048b8:	460b      	mov	r3, r1
 80048ba:	4602      	mov	r2, r0
 80048bc:	4639      	mov	r1, r7
 80048be:	4630      	mov	r0, r6
 80048c0:	f7fb fca6 	bl	8000210 <__aeabi_dsub>
 80048c4:	f7fc f8f6 	bl	8000ab4 <__aeabi_d2iz>
 80048c8:	1c65      	adds	r5, r4, #1
 80048ca:	ab0c      	add	r3, sp, #48	; 0x30
 80048cc:	f10a 0a18 	add.w	sl, sl, #24
 80048d0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80048d4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80048d8:	e71f      	b.n	800471a <__kernel_rem_pio2+0x2a2>
 80048da:	4630      	mov	r0, r6
 80048dc:	4639      	mov	r1, r7
 80048de:	f7fc f8e9 	bl	8000ab4 <__aeabi_d2iz>
 80048e2:	ab0c      	add	r3, sp, #48	; 0x30
 80048e4:	4625      	mov	r5, r4
 80048e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80048ea:	e716      	b.n	800471a <__kernel_rem_pio2+0x2a2>
 80048ec:	ab0c      	add	r3, sp, #48	; 0x30
 80048ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80048f2:	f7fb fddb 	bl	80004ac <__aeabi_i2d>
 80048f6:	4632      	mov	r2, r6
 80048f8:	463b      	mov	r3, r7
 80048fa:	f7fb fe41 	bl	8000580 <__aeabi_dmul>
 80048fe:	4642      	mov	r2, r8
 8004900:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004904:	464b      	mov	r3, r9
 8004906:	4630      	mov	r0, r6
 8004908:	4639      	mov	r1, r7
 800490a:	f7fb fe39 	bl	8000580 <__aeabi_dmul>
 800490e:	3c01      	subs	r4, #1
 8004910:	4606      	mov	r6, r0
 8004912:	460f      	mov	r7, r1
 8004914:	e713      	b.n	800473e <__kernel_rem_pio2+0x2c6>
 8004916:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800491a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800491e:	f7fb fe2f 	bl	8000580 <__aeabi_dmul>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4648      	mov	r0, r9
 8004928:	4651      	mov	r1, sl
 800492a:	f7fb fc73 	bl	8000214 <__adddf3>
 800492e:	3701      	adds	r7, #1
 8004930:	4681      	mov	r9, r0
 8004932:	468a      	mov	sl, r1
 8004934:	9b00      	ldr	r3, [sp, #0]
 8004936:	429f      	cmp	r7, r3
 8004938:	dc02      	bgt.n	8004940 <__kernel_rem_pio2+0x4c8>
 800493a:	9b06      	ldr	r3, [sp, #24]
 800493c:	429f      	cmp	r7, r3
 800493e:	ddea      	ble.n	8004916 <__kernel_rem_pio2+0x49e>
 8004940:	9a06      	ldr	r2, [sp, #24]
 8004942:	ab48      	add	r3, sp, #288	; 0x120
 8004944:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004948:	e9c6 9a00 	strd	r9, sl, [r6]
 800494c:	3c01      	subs	r4, #1
 800494e:	e6fa      	b.n	8004746 <__kernel_rem_pio2+0x2ce>
 8004950:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004952:	2b02      	cmp	r3, #2
 8004954:	dc0b      	bgt.n	800496e <__kernel_rem_pio2+0x4f6>
 8004956:	2b00      	cmp	r3, #0
 8004958:	dc39      	bgt.n	80049ce <__kernel_rem_pio2+0x556>
 800495a:	d05d      	beq.n	8004a18 <__kernel_rem_pio2+0x5a0>
 800495c:	9b02      	ldr	r3, [sp, #8]
 800495e:	f003 0007 	and.w	r0, r3, #7
 8004962:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004966:	ecbd 8b02 	vpop	{d8}
 800496a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800496e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004970:	2b03      	cmp	r3, #3
 8004972:	d1f3      	bne.n	800495c <__kernel_rem_pio2+0x4e4>
 8004974:	9b05      	ldr	r3, [sp, #20]
 8004976:	9500      	str	r5, [sp, #0]
 8004978:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800497c:	eb0d 0403 	add.w	r4, sp, r3
 8004980:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8004984:	46a2      	mov	sl, r4
 8004986:	9b00      	ldr	r3, [sp, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f1aa 0a08 	sub.w	sl, sl, #8
 800498e:	dc69      	bgt.n	8004a64 <__kernel_rem_pio2+0x5ec>
 8004990:	46aa      	mov	sl, r5
 8004992:	f1ba 0f01 	cmp.w	sl, #1
 8004996:	f1a4 0408 	sub.w	r4, r4, #8
 800499a:	f300 8083 	bgt.w	8004aa4 <__kernel_rem_pio2+0x62c>
 800499e:	9c05      	ldr	r4, [sp, #20]
 80049a0:	ab48      	add	r3, sp, #288	; 0x120
 80049a2:	441c      	add	r4, r3
 80049a4:	2000      	movs	r0, #0
 80049a6:	2100      	movs	r1, #0
 80049a8:	2d01      	cmp	r5, #1
 80049aa:	f300 809a 	bgt.w	8004ae2 <__kernel_rem_pio2+0x66a>
 80049ae:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80049b2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80049b6:	f1bb 0f00 	cmp.w	fp, #0
 80049ba:	f040 8098 	bne.w	8004aee <__kernel_rem_pio2+0x676>
 80049be:	9b04      	ldr	r3, [sp, #16]
 80049c0:	e9c3 7800 	strd	r7, r8, [r3]
 80049c4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80049c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80049cc:	e7c6      	b.n	800495c <__kernel_rem_pio2+0x4e4>
 80049ce:	9e05      	ldr	r6, [sp, #20]
 80049d0:	ab48      	add	r3, sp, #288	; 0x120
 80049d2:	441e      	add	r6, r3
 80049d4:	462c      	mov	r4, r5
 80049d6:	2000      	movs	r0, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	2c00      	cmp	r4, #0
 80049dc:	da33      	bge.n	8004a46 <__kernel_rem_pio2+0x5ce>
 80049de:	f1bb 0f00 	cmp.w	fp, #0
 80049e2:	d036      	beq.n	8004a52 <__kernel_rem_pio2+0x5da>
 80049e4:	4602      	mov	r2, r0
 80049e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049ea:	9c04      	ldr	r4, [sp, #16]
 80049ec:	e9c4 2300 	strd	r2, r3, [r4]
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80049f8:	f7fb fc0a 	bl	8000210 <__aeabi_dsub>
 80049fc:	ae4a      	add	r6, sp, #296	; 0x128
 80049fe:	2401      	movs	r4, #1
 8004a00:	42a5      	cmp	r5, r4
 8004a02:	da29      	bge.n	8004a58 <__kernel_rem_pio2+0x5e0>
 8004a04:	f1bb 0f00 	cmp.w	fp, #0
 8004a08:	d002      	beq.n	8004a10 <__kernel_rem_pio2+0x598>
 8004a0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a0e:	4619      	mov	r1, r3
 8004a10:	9b04      	ldr	r3, [sp, #16]
 8004a12:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004a16:	e7a1      	b.n	800495c <__kernel_rem_pio2+0x4e4>
 8004a18:	9c05      	ldr	r4, [sp, #20]
 8004a1a:	ab48      	add	r3, sp, #288	; 0x120
 8004a1c:	441c      	add	r4, r3
 8004a1e:	2000      	movs	r0, #0
 8004a20:	2100      	movs	r1, #0
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	da09      	bge.n	8004a3a <__kernel_rem_pio2+0x5c2>
 8004a26:	f1bb 0f00 	cmp.w	fp, #0
 8004a2a:	d002      	beq.n	8004a32 <__kernel_rem_pio2+0x5ba>
 8004a2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a30:	4619      	mov	r1, r3
 8004a32:	9b04      	ldr	r3, [sp, #16]
 8004a34:	e9c3 0100 	strd	r0, r1, [r3]
 8004a38:	e790      	b.n	800495c <__kernel_rem_pio2+0x4e4>
 8004a3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004a3e:	f7fb fbe9 	bl	8000214 <__adddf3>
 8004a42:	3d01      	subs	r5, #1
 8004a44:	e7ed      	b.n	8004a22 <__kernel_rem_pio2+0x5aa>
 8004a46:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004a4a:	f7fb fbe3 	bl	8000214 <__adddf3>
 8004a4e:	3c01      	subs	r4, #1
 8004a50:	e7c3      	b.n	80049da <__kernel_rem_pio2+0x562>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	e7c8      	b.n	80049ea <__kernel_rem_pio2+0x572>
 8004a58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004a5c:	f7fb fbda 	bl	8000214 <__adddf3>
 8004a60:	3401      	adds	r4, #1
 8004a62:	e7cd      	b.n	8004a00 <__kernel_rem_pio2+0x588>
 8004a64:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004a6c:	9b00      	ldr	r3, [sp, #0]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	4632      	mov	r2, r6
 8004a74:	463b      	mov	r3, r7
 8004a76:	4640      	mov	r0, r8
 8004a78:	4649      	mov	r1, r9
 8004a7a:	f7fb fbcb 	bl	8000214 <__adddf3>
 8004a7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4640      	mov	r0, r8
 8004a88:	4649      	mov	r1, r9
 8004a8a:	f7fb fbc1 	bl	8000210 <__aeabi_dsub>
 8004a8e:	4632      	mov	r2, r6
 8004a90:	463b      	mov	r3, r7
 8004a92:	f7fb fbbf 	bl	8000214 <__adddf3>
 8004a96:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004a9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004a9e:	ed8a 7b00 	vstr	d7, [sl]
 8004aa2:	e770      	b.n	8004986 <__kernel_rem_pio2+0x50e>
 8004aa4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004aa8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004aac:	4640      	mov	r0, r8
 8004aae:	4632      	mov	r2, r6
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	f7fb fbae 	bl	8000214 <__adddf3>
 8004ab8:	e9cd 0100 	strd	r0, r1, [sp]
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	f7fb fba4 	bl	8000210 <__aeabi_dsub>
 8004ac8:	4632      	mov	r2, r6
 8004aca:	463b      	mov	r3, r7
 8004acc:	f7fb fba2 	bl	8000214 <__adddf3>
 8004ad0:	ed9d 7b00 	vldr	d7, [sp]
 8004ad4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ad8:	ed84 7b00 	vstr	d7, [r4]
 8004adc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ae0:	e757      	b.n	8004992 <__kernel_rem_pio2+0x51a>
 8004ae2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004ae6:	f7fb fb95 	bl	8000214 <__adddf3>
 8004aea:	3d01      	subs	r5, #1
 8004aec:	e75c      	b.n	80049a8 <__kernel_rem_pio2+0x530>
 8004aee:	9b04      	ldr	r3, [sp, #16]
 8004af0:	9a04      	ldr	r2, [sp, #16]
 8004af2:	601f      	str	r7, [r3, #0]
 8004af4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004af8:	605c      	str	r4, [r3, #4]
 8004afa:	609d      	str	r5, [r3, #8]
 8004afc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004b00:	60d3      	str	r3, [r2, #12]
 8004b02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b06:	6110      	str	r0, [r2, #16]
 8004b08:	6153      	str	r3, [r2, #20]
 8004b0a:	e727      	b.n	800495c <__kernel_rem_pio2+0x4e4>
 8004b0c:	41700000 	.word	0x41700000
 8004b10:	3e700000 	.word	0x3e700000
 8004b14:	00000000 	.word	0x00000000

08004b18 <scalbn>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	ec55 4b10 	vmov	r4, r5, d0
 8004b1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004b22:	4606      	mov	r6, r0
 8004b24:	462b      	mov	r3, r5
 8004b26:	b999      	cbnz	r1, 8004b50 <scalbn+0x38>
 8004b28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004b2c:	4323      	orrs	r3, r4
 8004b2e:	d03f      	beq.n	8004bb0 <scalbn+0x98>
 8004b30:	4b35      	ldr	r3, [pc, #212]	; (8004c08 <scalbn+0xf0>)
 8004b32:	4629      	mov	r1, r5
 8004b34:	ee10 0a10 	vmov	r0, s0
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f7fb fd21 	bl	8000580 <__aeabi_dmul>
 8004b3e:	4b33      	ldr	r3, [pc, #204]	; (8004c0c <scalbn+0xf4>)
 8004b40:	429e      	cmp	r6, r3
 8004b42:	4604      	mov	r4, r0
 8004b44:	460d      	mov	r5, r1
 8004b46:	da10      	bge.n	8004b6a <scalbn+0x52>
 8004b48:	a327      	add	r3, pc, #156	; (adr r3, 8004be8 <scalbn+0xd0>)
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	e01f      	b.n	8004b90 <scalbn+0x78>
 8004b50:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b54:	4291      	cmp	r1, r2
 8004b56:	d10c      	bne.n	8004b72 <scalbn+0x5a>
 8004b58:	ee10 2a10 	vmov	r2, s0
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7fb fb58 	bl	8000214 <__adddf3>
 8004b64:	4604      	mov	r4, r0
 8004b66:	460d      	mov	r5, r1
 8004b68:	e022      	b.n	8004bb0 <scalbn+0x98>
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004b70:	3936      	subs	r1, #54	; 0x36
 8004b72:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004b76:	4296      	cmp	r6, r2
 8004b78:	dd0d      	ble.n	8004b96 <scalbn+0x7e>
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	a11c      	add	r1, pc, #112	; (adr r1, 8004bf0 <scalbn+0xd8>)
 8004b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b82:	da02      	bge.n	8004b8a <scalbn+0x72>
 8004b84:	a11c      	add	r1, pc, #112	; (adr r1, 8004bf8 <scalbn+0xe0>)
 8004b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b8a:	a319      	add	r3, pc, #100	; (adr r3, 8004bf0 <scalbn+0xd8>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fcf6 	bl	8000580 <__aeabi_dmul>
 8004b94:	e7e6      	b.n	8004b64 <scalbn+0x4c>
 8004b96:	1872      	adds	r2, r6, r1
 8004b98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004b9c:	428a      	cmp	r2, r1
 8004b9e:	dcec      	bgt.n	8004b7a <scalbn+0x62>
 8004ba0:	2a00      	cmp	r2, #0
 8004ba2:	dd08      	ble.n	8004bb6 <scalbn+0x9e>
 8004ba4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004ba8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004bb0:	ec45 4b10 	vmov	d0, r4, r5
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
 8004bb6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004bba:	da08      	bge.n	8004bce <scalbn+0xb6>
 8004bbc:	2d00      	cmp	r5, #0
 8004bbe:	a10a      	add	r1, pc, #40	; (adr r1, 8004be8 <scalbn+0xd0>)
 8004bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bc4:	dac0      	bge.n	8004b48 <scalbn+0x30>
 8004bc6:	a10e      	add	r1, pc, #56	; (adr r1, 8004c00 <scalbn+0xe8>)
 8004bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bcc:	e7bc      	b.n	8004b48 <scalbn+0x30>
 8004bce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004bd2:	3236      	adds	r2, #54	; 0x36
 8004bd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bd8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <scalbn+0xf8>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	e7d5      	b.n	8004b90 <scalbn+0x78>
 8004be4:	f3af 8000 	nop.w
 8004be8:	c2f8f359 	.word	0xc2f8f359
 8004bec:	01a56e1f 	.word	0x01a56e1f
 8004bf0:	8800759c 	.word	0x8800759c
 8004bf4:	7e37e43c 	.word	0x7e37e43c
 8004bf8:	8800759c 	.word	0x8800759c
 8004bfc:	fe37e43c 	.word	0xfe37e43c
 8004c00:	c2f8f359 	.word	0xc2f8f359
 8004c04:	81a56e1f 	.word	0x81a56e1f
 8004c08:	43500000 	.word	0x43500000
 8004c0c:	ffff3cb0 	.word	0xffff3cb0
 8004c10:	3c900000 	.word	0x3c900000
 8004c14:	00000000 	.word	0x00000000

08004c18 <floor>:
 8004c18:	ec51 0b10 	vmov	r0, r1, d0
 8004c1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c24:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004c28:	2e13      	cmp	r6, #19
 8004c2a:	ee10 5a10 	vmov	r5, s0
 8004c2e:	ee10 8a10 	vmov	r8, s0
 8004c32:	460c      	mov	r4, r1
 8004c34:	dc31      	bgt.n	8004c9a <floor+0x82>
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	da14      	bge.n	8004c64 <floor+0x4c>
 8004c3a:	a333      	add	r3, pc, #204	; (adr r3, 8004d08 <floor+0xf0>)
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	f7fb fae8 	bl	8000214 <__adddf3>
 8004c44:	2200      	movs	r2, #0
 8004c46:	2300      	movs	r3, #0
 8004c48:	f7fb ff2a 	bl	8000aa0 <__aeabi_dcmpgt>
 8004c4c:	b138      	cbz	r0, 8004c5e <floor+0x46>
 8004c4e:	2c00      	cmp	r4, #0
 8004c50:	da53      	bge.n	8004cfa <floor+0xe2>
 8004c52:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004c56:	4325      	orrs	r5, r4
 8004c58:	d052      	beq.n	8004d00 <floor+0xe8>
 8004c5a:	4c2d      	ldr	r4, [pc, #180]	; (8004d10 <floor+0xf8>)
 8004c5c:	2500      	movs	r5, #0
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4628      	mov	r0, r5
 8004c62:	e024      	b.n	8004cae <floor+0x96>
 8004c64:	4f2b      	ldr	r7, [pc, #172]	; (8004d14 <floor+0xfc>)
 8004c66:	4137      	asrs	r7, r6
 8004c68:	ea01 0307 	and.w	r3, r1, r7
 8004c6c:	4303      	orrs	r3, r0
 8004c6e:	d01e      	beq.n	8004cae <floor+0x96>
 8004c70:	a325      	add	r3, pc, #148	; (adr r3, 8004d08 <floor+0xf0>)
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f7fb facd 	bl	8000214 <__adddf3>
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f7fb ff0f 	bl	8000aa0 <__aeabi_dcmpgt>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d0eb      	beq.n	8004c5e <floor+0x46>
 8004c86:	2c00      	cmp	r4, #0
 8004c88:	bfbe      	ittt	lt
 8004c8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004c8e:	4133      	asrlt	r3, r6
 8004c90:	18e4      	addlt	r4, r4, r3
 8004c92:	ea24 0407 	bic.w	r4, r4, r7
 8004c96:	2500      	movs	r5, #0
 8004c98:	e7e1      	b.n	8004c5e <floor+0x46>
 8004c9a:	2e33      	cmp	r6, #51	; 0x33
 8004c9c:	dd0b      	ble.n	8004cb6 <floor+0x9e>
 8004c9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004ca2:	d104      	bne.n	8004cae <floor+0x96>
 8004ca4:	ee10 2a10 	vmov	r2, s0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	f7fb fab3 	bl	8000214 <__adddf3>
 8004cae:	ec41 0b10 	vmov	d0, r0, r1
 8004cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8004cba:	f04f 37ff 	mov.w	r7, #4294967295
 8004cbe:	40df      	lsrs	r7, r3
 8004cc0:	4238      	tst	r0, r7
 8004cc2:	d0f4      	beq.n	8004cae <floor+0x96>
 8004cc4:	a310      	add	r3, pc, #64	; (adr r3, 8004d08 <floor+0xf0>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	f7fb faa3 	bl	8000214 <__adddf3>
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f7fb fee5 	bl	8000aa0 <__aeabi_dcmpgt>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d0c1      	beq.n	8004c5e <floor+0x46>
 8004cda:	2c00      	cmp	r4, #0
 8004cdc:	da0a      	bge.n	8004cf4 <floor+0xdc>
 8004cde:	2e14      	cmp	r6, #20
 8004ce0:	d101      	bne.n	8004ce6 <floor+0xce>
 8004ce2:	3401      	adds	r4, #1
 8004ce4:	e006      	b.n	8004cf4 <floor+0xdc>
 8004ce6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004cea:	2301      	movs	r3, #1
 8004cec:	40b3      	lsls	r3, r6
 8004cee:	441d      	add	r5, r3
 8004cf0:	45a8      	cmp	r8, r5
 8004cf2:	d8f6      	bhi.n	8004ce2 <floor+0xca>
 8004cf4:	ea25 0507 	bic.w	r5, r5, r7
 8004cf8:	e7b1      	b.n	8004c5e <floor+0x46>
 8004cfa:	2500      	movs	r5, #0
 8004cfc:	462c      	mov	r4, r5
 8004cfe:	e7ae      	b.n	8004c5e <floor+0x46>
 8004d00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004d04:	e7ab      	b.n	8004c5e <floor+0x46>
 8004d06:	bf00      	nop
 8004d08:	8800759c 	.word	0x8800759c
 8004d0c:	7e37e43c 	.word	0x7e37e43c
 8004d10:	bff00000 	.word	0xbff00000
 8004d14:	000fffff 	.word	0x000fffff

08004d18 <_init>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	bf00      	nop
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr

08004d24 <_fini>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr
