
speaker_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004474  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a8  080046a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046b0  080046b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080046b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  20000068  08004720  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a80  08004720  00020a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007bdb  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a9e  00000000  00000000  00027cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00029758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000052a  00000000  00000000  00029e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d56  00000000  00000000  0002a38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009518  00000000  00000000  0004c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c92f0  00000000  00000000  000555f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000234c  00000000  00000000  0011e8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00120c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004620 	.word	0x08004620

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08004620 	.word	0x08004620

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08e      	sub	sp, #56	; 0x38
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fbe5 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f84d 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f907 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 8000512:	f000 f8e5 	bl	80006e0 <MX_DMA_Init>
  MX_I2S1_Init();
 8000516:	f000 f8b5 	bl	8000684 <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */
  const char* filename = "dummy.txt";
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <main+0x94>)
 800051c:	637b      	str	r3, [r7, #52]	; 0x34
  FILE* wavFile = fopen(filename, "r");
 800051e:	491e      	ldr	r1, [pc, #120]	; (8000598 <main+0x98>)
 8000520:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000522:	f003 fb19 	bl	8003b58 <fopen>
 8000526:	6338      	str	r0, [r7, #48]	; 0x30
  if (!wavFile) {
 8000528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d101      	bne.n	8000532 <main+0x32>
//	  fprintf(stderr, "Error opening WAV file\n");
	  return 1;
 800052e:	2301      	movs	r3, #1
 8000530:	e02c      	b.n	800058c <main+0x8c>
  }

      // Read and parse the WAV file header
  WavHeader wavHeader;
  if (readWavHeader(wavFile, &wavHeader) == 0) {
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4619      	mov	r1, r3
 8000536:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000538:	f000 f968 	bl	800080c <readWavHeader>

          // Proceed with reading and processing audio data
  }

      // Close the WAV file
  fclose(wavFile);
 800053c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800053e:	f003 f91b 	bl	8003778 <fclose>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8000542:	2110      	movs	r1, #16
 8000544:	4815      	ldr	r0, [pc, #84]	; (800059c <main+0x9c>)
 8000546:	f001 fa3f 	bl	80019c8 <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d105      	bne.n	800055c <main+0x5c>
	  	             // Button is pressed, turn on the LED
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2120      	movs	r1, #32
 8000554:	4811      	ldr	r0, [pc, #68]	; (800059c <main+0x9c>)
 8000556:	f001 fa4f 	bl	80019f8 <HAL_GPIO_WritePin>
 800055a:	e004      	b.n	8000566 <main+0x66>
	  	  } else {
	  	             // Button is not pressed, turn off the LED
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2120      	movs	r1, #32
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <main+0x9c>)
 8000562:	f001 fa49 	bl	80019f8 <HAL_GPIO_WritePin>
	  	  }

	    // Fill the audio buffer with new data
	  readAudioData(audioBuffer, BUFFER_SIZE, wavFile);
 8000566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <main+0xa0>)
 800056e:	f000 f933 	bl	80007d8 <readAudioData>

	    // Configure DMA for buffer transfer
//	  configureDMA(audioBuffer, BUFFER_SIZE);

	    // Start DMA transfer
	  startDMATransfer(audioBuffer, BUFFER_SIZE);
 8000572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <main+0xa0>)
 8000578:	f000 f990 	bl	800089c <startDMATransfer>

	    // Wait for DMA transfer completion (blocking approach)
	  while (HAL_DMA_GetState(&hdma_spi1_tx) != HAL_DMA_STATE_READY) {
 800057c:	bf00      	nop
 800057e:	4809      	ldr	r0, [pc, #36]	; (80005a4 <main+0xa4>)
 8000580:	f000 ffa0 	bl	80014c4 <HAL_DMA_GetState>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d1f9      	bne.n	800057e <main+0x7e>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) {
 800058a:	e7da      	b.n	8000542 <main+0x42>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800058c:	4618      	mov	r0, r3
 800058e:	3738      	adds	r7, #56	; 0x38
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	08004638 	.word	0x08004638
 8000598:	08004644 	.word	0x08004644
 800059c:	40020400 	.word	0x40020400
 80005a0:	2000012c 	.word	0x2000012c
 80005a4:	200000cc 	.word	0x200000cc

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fdc2 	bl	8004140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b2a      	ldr	r3, [pc, #168]	; (800067c <SystemClock_Config+0xd4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a29      	ldr	r2, [pc, #164]	; (800067c <SystemClock_Config+0xd4>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <SystemClock_Config+0xd4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xd8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <SystemClock_Config+0xd8>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <SystemClock_Config+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000620:	2360      	movs	r3, #96	; 0x60
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fda9 	bl	800318c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000640:	f000 f952 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000650:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2103      	movs	r1, #3
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fd0a 	bl	800207c <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800066e:	f000 f93b 	bl	80008e8 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_I2S1_Init+0x54>)
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <MX_I2S1_Init+0x58>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2S1_Init+0x54>)
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_I2S1_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2S1_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_I2S1_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_I2S1_Init+0x54>)
 80006aa:	f64a 4244 	movw	r2, #44100	; 0xac44
 80006ae:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_HIGH;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2S1_Init+0x54>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_I2S1_Init+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2S1_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_I2S1_Init+0x54>)
 80006c4:	f001 f9b2 	bl	8001a2c <HAL_I2S_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 80006ce:	f000 f90b 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000084 	.word	0x20000084
 80006dc:	40013000 	.word	0x40013000

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_DMA_Init+0x3c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <MX_DMA_Init+0x3c>)
 80006f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_DMA_Init+0x3c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	203b      	movs	r0, #59	; 0x3b
 8000708:	f000 fc31 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800070c:	203b      	movs	r0, #59	; 0x3b
 800070e:	f000 fc4a 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xb0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <MX_GPIO_Init+0xb0>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_GPIO_Init+0xb0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xb0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <MX_GPIO_Init+0xb0>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_GPIO_Init+0xb0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_GPIO_Init+0xb0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MX_GPIO_Init+0xb0>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_GPIO_Init+0xb0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2120      	movs	r1, #32
 800078e:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_GPIO_Init+0xb4>)
 8000790:	f001 f932 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000794:	2310      	movs	r3, #16
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800079c:	2302      	movs	r3, #2
 800079e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0xb4>)
 80007a8:	f000 ff7a 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ac:	2320      	movs	r3, #32
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0xb4>)
 80007c4:	f000 ff6c 	bl	80016a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	bf00      	nop
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400

080007d8 <readAudioData>:

/* USER CODE BEGIN 4 */
void readAudioData(uint16_t* buffer, size_t bufferSize, FILE* audioFile) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
    size_t bytesRead = fread(buffer, sizeof(int16_t), bufferSize, audioFile);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	2102      	movs	r1, #2
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	f003 fa18 	bl	8003c20 <fread>
 80007f0:	6178      	str	r0, [r7, #20]

    // Handle end-of-file or error conditions
    if (bytesRead < bufferSize) {
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d204      	bcs.n	8000804 <readAudioData+0x2c>
        // You might need to handle the end of the file or an error
        // For simplicity, let's assume a simple loop back to the beginning of the file
        fseek(audioFile, 0, SEEK_SET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f003 fa1e 	bl	8003c40 <fseek>
    }
}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <readWavHeader>:

int readWavHeader(FILE* file, WavHeader* header) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
    // Read the WAV file header
    size_t bytesRead = fread(header, sizeof(WavHeader), 1, file);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2201      	movs	r2, #1
 800081a:	212c      	movs	r1, #44	; 0x2c
 800081c:	6838      	ldr	r0, [r7, #0]
 800081e:	f003 f9ff 	bl	8003c20 <fread>
 8000822:	60f8      	str	r0, [r7, #12]

    // Check for successful header read
    if (bytesRead != 1) {
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d00a      	beq.n	8000840 <readWavHeader+0x34>
        fprintf(stderr, "Error reading WAV file header\n");
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <readWavHeader+0x7c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	221e      	movs	r2, #30
 8000832:	2101      	movs	r1, #1
 8000834:	4815      	ldr	r0, [pc, #84]	; (800088c <readWavHeader+0x80>)
 8000836:	f003 fa77 	bl	8003d28 <fwrite>
        return -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	e01e      	b.n	800087e <readWavHeader+0x72>
    }

    // Check if the file is a valid WAV file
    if (strncmp(header->chunkId, "RIFF", 4) != 0 || strncmp(header->format, "WAVE", 4) != 0) {
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2204      	movs	r2, #4
 8000844:	4912      	ldr	r1, [pc, #72]	; (8000890 <readWavHeader+0x84>)
 8000846:	4618      	mov	r0, r3
 8000848:	f003 fc82 	bl	8004150 <strncmp>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d109      	bne.n	8000866 <readWavHeader+0x5a>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	3308      	adds	r3, #8
 8000856:	2204      	movs	r2, #4
 8000858:	490e      	ldr	r1, [pc, #56]	; (8000894 <readWavHeader+0x88>)
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fc78 	bl	8004150 <strncmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00a      	beq.n	800087c <readWavHeader+0x70>
        fprintf(stderr, "Not a valid WAV file\n");
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <readWavHeader+0x7c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	2215      	movs	r2, #21
 800086e:	2101      	movs	r1, #1
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <readWavHeader+0x8c>)
 8000872:	f003 fa59 	bl	8003d28 <fwrite>
        return -1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	e000      	b.n	800087e <readWavHeader+0x72>
    }

    // Additional validation or processing can be added based on your needs

    return 0;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000064 	.word	0x20000064
 800088c:	08004648 	.word	0x08004648
 8000890:	08004668 	.word	0x08004668
 8000894:	08004670 	.word	0x08004670
 8000898:	08004678 	.word	0x08004678

0800089c <startDMATransfer>:


void startDMATransfer(uint16_t* buffer, uint16_t bufferSize) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
    // Configure DMA transfer
    HAL_DMA_Start(&hdma_spi1_tx, (uint32_t)buffer, (uint32_t)&(hi2s1.Instance->DR), bufferSize);
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <startDMATransfer+0x44>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	330c      	adds	r3, #12
 80008b0:	461a      	mov	r2, r3
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <startDMATransfer+0x48>)
 80008b6:	f000 fc3f 	bl	8001138 <HAL_DMA_Start>

    // Enable the I2S DMA request
    __HAL_DMA_ENABLE(&hdma_spi1_tx);
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <startDMATransfer+0x48>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <startDMATransfer+0x48>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f042 0201 	orr.w	r2, r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
//    I2S_DMA_REQ_TX

    // Start the I2S peripheral
    HAL_I2S_Transmit(&hi2s1, buffer, bufferSize, HAL_MAX_DELAY);
 80008ca:	887a      	ldrh	r2, [r7, #2]
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <startDMATransfer+0x44>)
 80008d4:	f001 f9a2 	bl	8001c1c <HAL_I2S_Transmit>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000084 	.word	0x20000084
 80008e4:	200000cc 	.word	0x200000cc

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0a0      	sub	sp, #128	; 0x80
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	225c      	movs	r2, #92	; 0x5c
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f003 fbeb 	bl	8004140 <memset>
  if(hi2s->Instance==SPI1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a43      	ldr	r2, [pc, #268]	; (8000a7c <HAL_I2S_MspInit+0x138>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d17f      	bne.n	8000a74 <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8000974:	2302      	movs	r3, #2
 8000976:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000978:	2332      	movs	r3, #50	; 0x32
 800097a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 8000980:	2304      	movs	r3, #4
 8000982:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8000990:	2300      	movs	r3, #0
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fc55 	bl	8002248 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 80009a4:	f7ff ffa0 	bl	80008e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <HAL_I2S_MspInit+0x13c>)
 80009ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b0:	4a33      	ldr	r2, [pc, #204]	; (8000a80 <HAL_I2S_MspInit+0x13c>)
 80009b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009b6:	6453      	str	r3, [r2, #68]	; 0x44
 80009b8:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <HAL_I2S_MspInit+0x13c>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <HAL_I2S_MspInit+0x13c>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <HAL_I2S_MspInit+0x13c>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <HAL_I2S_MspInit+0x13c>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80009e0:	23b0      	movs	r3, #176	; 0xb0
 80009e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009f0:	2305      	movs	r3, #5
 80009f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009f8:	4619      	mov	r1, r3
 80009fa:	4822      	ldr	r0, [pc, #136]	; (8000a84 <HAL_I2S_MspInit+0x140>)
 80009fc:	f000 fe50 	bl	80016a0 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a02:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <HAL_I2S_MspInit+0x148>)
 8000a04:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a08:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a0c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a20:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a28:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a30:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a38:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a48:	2203      	movs	r2, #3
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a5a:	f000 fabf 	bl	8000fdc <HAL_DMA_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 8000a64:	f7ff ff40 	bl	80008e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a6e:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <HAL_I2S_MspInit+0x144>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3780      	adds	r7, #128	; 0x80
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40013000 	.word	0x40013000
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000
 8000a88:	200000cc 	.word	0x200000cc
 8000a8c:	40026458 	.word	0x40026458

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f94c 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <DMA2_Stream3_IRQHandler+0x10>)
 8000aea:	f000 fb61 	bl	80011b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000cc 	.word	0x200000cc

08000af8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00a      	b.n	8000b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf0      	blt.n	8000b0a <_read+0x12>
  }

  return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	e009      	b.n	8000b58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbf1      	blt.n	8000b44 <_write+0x12>
  }
  return len;
 8000b60:	687b      	ldr	r3, [r7, #4]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_close>:

int _close(int file)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b92:	605a      	str	r2, [r3, #4]
  return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <_isatty>:

int _isatty(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_open>:

int _open(char *path, int flags, ...)
{
 8000bd2:	b40e      	push	{r1, r2, r3}
 8000bd4:	b480      	push	{r7}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	b003      	add	sp, #12
 8000bec:	4770      	bx	lr
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f003 fb00 	bl	8004224 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20020000 	.word	0x20020000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	2000092c 	.word	0x2000092c
 8000c58:	20000a80 	.word	0x20000a80

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd7 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f003 fabf 	bl	8004230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fc25 	bl	8000500 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cc4:	080046b8 	.word	0x080046b8
  ldr r2, =_sbss
 8000cc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ccc:	20000a80 	.word	0x20000a80

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f92b 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	200f      	movs	r0, #15
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fdf4 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f943 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f90b 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000930 	.word	0x20000930

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000930 	.word	0x20000930

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff feda 	bl	8000da0 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e099      	b.n	800112c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001018:	e00f      	b.n	800103a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800101a:	f7ff fec1 	bl	8000da0 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b05      	cmp	r3, #5
 8001026:	d908      	bls.n	800103a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e078      	b.n	800112c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1e8      	bne.n	800101a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <HAL_DMA_Init+0x158>)
 8001054:	4013      	ands	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001066:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800107e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	2b04      	cmp	r3, #4
 8001092:	d107      	bne.n	80010a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4313      	orrs	r3, r2
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f023 0307 	bic.w	r3, r3, #7
 80010ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d117      	bne.n	80010fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00e      	beq.n	80010fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fa61 	bl	80015a8 <DMA_CheckFifoParam>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2240      	movs	r2, #64	; 0x40
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010fa:	2301      	movs	r3, #1
 80010fc:	e016      	b.n	800112c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fa18 	bl	800153c <DMA_CalcBaseAndBitshift>
 800110c:	4603      	mov	r3, r0
 800110e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001114:	223f      	movs	r2, #63	; 0x3f
 8001116:	409a      	lsls	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	f010803f 	.word	0xf010803f

08001138 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <HAL_DMA_Start+0x20>
 8001154:	2302      	movs	r3, #2
 8001156:	e026      	b.n	80011a6 <HAL_DMA_Start+0x6e>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b01      	cmp	r3, #1
 800116a:	d115      	bne.n	8001198 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2202      	movs	r2, #2
 8001170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 f9ad 	bl	80014e0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e005      	b.n	80011a4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011a0:	2302      	movs	r3, #2
 80011a2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011bc:	4b8e      	ldr	r3, [pc, #568]	; (80013f8 <HAL_DMA_IRQHandler+0x248>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a8e      	ldr	r2, [pc, #568]	; (80013fc <HAL_DMA_IRQHandler+0x24c>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	0a9b      	lsrs	r3, r3, #10
 80011c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	2208      	movs	r2, #8
 80011dc:	409a      	lsls	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d01a      	beq.n	800121c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d013      	beq.n	800121c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0204 	bic.w	r2, r2, #4
 8001202:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	2208      	movs	r2, #8
 800120a:	409a      	lsls	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001214:	f043 0201 	orr.w	r2, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001220:	2201      	movs	r2, #1
 8001222:	409a      	lsls	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d012      	beq.n	8001252 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123e:	2201      	movs	r2, #1
 8001240:	409a      	lsls	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124a:	f043 0202 	orr.w	r2, r3, #2
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001256:	2204      	movs	r2, #4
 8001258:	409a      	lsls	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d012      	beq.n	8001288 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00b      	beq.n	8001288 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001274:	2204      	movs	r2, #4
 8001276:	409a      	lsls	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001280:	f043 0204 	orr.w	r2, r3, #4
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128c:	2210      	movs	r2, #16
 800128e:	409a      	lsls	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d043      	beq.n	8001320 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d03c      	beq.n	8001320 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012aa:	2210      	movs	r2, #16
 80012ac:	409a      	lsls	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d018      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d108      	bne.n	80012e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d024      	beq.n	8001320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	4798      	blx	r3
 80012de:	e01f      	b.n	8001320 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01b      	beq.n	8001320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
 80012f0:	e016      	b.n	8001320 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d107      	bne.n	8001310 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0208 	bic.w	r2, r2, #8
 800130e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	2220      	movs	r2, #32
 8001326:	409a      	lsls	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 808f 	beq.w	8001450 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8087 	beq.w	8001450 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001346:	2220      	movs	r2, #32
 8001348:	409a      	lsls	r2, r3
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b05      	cmp	r3, #5
 8001358:	d136      	bne.n	80013c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0216 	bic.w	r2, r2, #22
 8001368:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001378:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	2b00      	cmp	r3, #0
 8001380:	d103      	bne.n	800138a <HAL_DMA_IRQHandler+0x1da>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0208 	bic.w	r2, r2, #8
 8001398:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139e:	223f      	movs	r2, #63	; 0x3f
 80013a0:	409a      	lsls	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d07e      	beq.n	80014bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	4798      	blx	r3
        }
        return;
 80013c6:	e079      	b.n	80014bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d01d      	beq.n	8001412 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10d      	bne.n	8001400 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d031      	beq.n	8001450 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	4798      	blx	r3
 80013f4:	e02c      	b.n	8001450 <HAL_DMA_IRQHandler+0x2a0>
 80013f6:	bf00      	nop
 80013f8:	20000000 	.word	0x20000000
 80013fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001404:	2b00      	cmp	r3, #0
 8001406:	d023      	beq.n	8001450 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	4798      	blx	r3
 8001410:	e01e      	b.n	8001450 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10f      	bne.n	8001440 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0210 	bic.w	r2, r2, #16
 800142e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001454:	2b00      	cmp	r3, #0
 8001456:	d032      	beq.n	80014be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d022      	beq.n	80014aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2205      	movs	r2, #5
 8001468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3301      	adds	r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	429a      	cmp	r2, r3
 8001486:	d307      	bcc.n	8001498 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f2      	bne.n	800147c <HAL_DMA_IRQHandler+0x2cc>
 8001496:	e000      	b.n	800149a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001498:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	4798      	blx	r3
 80014ba:	e000      	b.n	80014be <HAL_DMA_IRQHandler+0x30e>
        return;
 80014bc:	bf00      	nop
    }
  }
}
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b40      	cmp	r3, #64	; 0x40
 800150c:	d108      	bne.n	8001520 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800151e:	e007      	b.n	8001530 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	60da      	str	r2, [r3, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3b10      	subs	r3, #16
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <DMA_CalcBaseAndBitshift+0x64>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001556:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <DMA_CalcBaseAndBitshift+0x68>)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b03      	cmp	r3, #3
 8001568:	d909      	bls.n	800157e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001572:	f023 0303 	bic.w	r3, r3, #3
 8001576:	1d1a      	adds	r2, r3, #4
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	659a      	str	r2, [r3, #88]	; 0x58
 800157c:	e007      	b.n	800158e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	aaaaaaab 	.word	0xaaaaaaab
 80015a4:	080046a0 	.word	0x080046a0

080015a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d11f      	bne.n	8001602 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d856      	bhi.n	8001676 <DMA_CheckFifoParam+0xce>
 80015c8:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <DMA_CheckFifoParam+0x28>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015f3 	.word	0x080015f3
 80015d8:	080015e1 	.word	0x080015e1
 80015dc:	08001677 	.word	0x08001677
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d046      	beq.n	800167a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015f0:	e043      	b.n	800167a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015fa:	d140      	bne.n	800167e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001600:	e03d      	b.n	800167e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800160a:	d121      	bne.n	8001650 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d837      	bhi.n	8001682 <DMA_CheckFifoParam+0xda>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <DMA_CheckFifoParam+0x70>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001629 	.word	0x08001629
 800161c:	0800162f 	.word	0x0800162f
 8001620:	08001629 	.word	0x08001629
 8001624:	08001641 	.word	0x08001641
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
      break;
 800162c:	e030      	b.n	8001690 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d025      	beq.n	8001686 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800163e:	e022      	b.n	8001686 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001648:	d11f      	bne.n	800168a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800164e:	e01c      	b.n	800168a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d903      	bls.n	800165e <DMA_CheckFifoParam+0xb6>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b03      	cmp	r3, #3
 800165a:	d003      	beq.n	8001664 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800165c:	e018      	b.n	8001690 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
      break;
 8001662:	e015      	b.n	8001690 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00e      	beq.n	800168e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
      break;
 8001674:	e00b      	b.n	800168e <DMA_CheckFifoParam+0xe6>
      break;
 8001676:	bf00      	nop
 8001678:	e00a      	b.n	8001690 <DMA_CheckFifoParam+0xe8>
      break;
 800167a:	bf00      	nop
 800167c:	e008      	b.n	8001690 <DMA_CheckFifoParam+0xe8>
      break;
 800167e:	bf00      	nop
 8001680:	e006      	b.n	8001690 <DMA_CheckFifoParam+0xe8>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <DMA_CheckFifoParam+0xe8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <DMA_CheckFifoParam+0xe8>
      break;   
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <DMA_CheckFifoParam+0xe8>
      break;
 800168e:	bf00      	nop
    }
  } 
  
  return status; 
 8001690:	7bfb      	ldrb	r3, [r7, #15]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	e165      	b.n	8001988 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f040 8154 	bne.w	8001982 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d005      	beq.n	80016f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d130      	bne.n	8001754 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	2203      	movs	r2, #3
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	f003 0201 	and.w	r2, r3, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b03      	cmp	r3, #3
 800175e:	d017      	beq.n	8001790 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d123      	bne.n	80017e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	08da      	lsrs	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3208      	adds	r2, #8
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	69b9      	ldr	r1, [r7, #24]
 80017e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0203 	and.w	r2, r3, #3
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80ae 	beq.w	8001982 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_GPIO_Init+0x300>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a5c      	ldr	r2, [pc, #368]	; (80019a0 <HAL_GPIO_Init+0x300>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b5a      	ldr	r3, [pc, #360]	; (80019a0 <HAL_GPIO_Init+0x300>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001842:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_GPIO_Init+0x304>)
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4f      	ldr	r2, [pc, #316]	; (80019a8 <HAL_GPIO_Init+0x308>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d025      	beq.n	80018ba <HAL_GPIO_Init+0x21a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4e      	ldr	r2, [pc, #312]	; (80019ac <HAL_GPIO_Init+0x30c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01f      	beq.n	80018b6 <HAL_GPIO_Init+0x216>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4d      	ldr	r2, [pc, #308]	; (80019b0 <HAL_GPIO_Init+0x310>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d019      	beq.n	80018b2 <HAL_GPIO_Init+0x212>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4c      	ldr	r2, [pc, #304]	; (80019b4 <HAL_GPIO_Init+0x314>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0x20e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4b      	ldr	r2, [pc, #300]	; (80019b8 <HAL_GPIO_Init+0x318>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00d      	beq.n	80018aa <HAL_GPIO_Init+0x20a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4a      	ldr	r2, [pc, #296]	; (80019bc <HAL_GPIO_Init+0x31c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d007      	beq.n	80018a6 <HAL_GPIO_Init+0x206>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a49      	ldr	r2, [pc, #292]	; (80019c0 <HAL_GPIO_Init+0x320>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d101      	bne.n	80018a2 <HAL_GPIO_Init+0x202>
 800189e:	2306      	movs	r3, #6
 80018a0:	e00c      	b.n	80018bc <HAL_GPIO_Init+0x21c>
 80018a2:	2307      	movs	r3, #7
 80018a4:	e00a      	b.n	80018bc <HAL_GPIO_Init+0x21c>
 80018a6:	2305      	movs	r3, #5
 80018a8:	e008      	b.n	80018bc <HAL_GPIO_Init+0x21c>
 80018aa:	2304      	movs	r3, #4
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x21c>
 80018ae:	2303      	movs	r3, #3
 80018b0:	e004      	b.n	80018bc <HAL_GPIO_Init+0x21c>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_Init+0x21c>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_GPIO_Init+0x21c>
 80018ba:	2300      	movs	r3, #0
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	f002 0203 	and.w	r2, r2, #3
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	4093      	lsls	r3, r2
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018cc:	4935      	ldr	r1, [pc, #212]	; (80019a4 <HAL_GPIO_Init+0x304>)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <HAL_GPIO_Init+0x324>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fe:	4a31      	ldr	r2, [pc, #196]	; (80019c4 <HAL_GPIO_Init+0x324>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_GPIO_Init+0x324>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001928:	4a26      	ldr	r2, [pc, #152]	; (80019c4 <HAL_GPIO_Init+0x324>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_GPIO_Init+0x324>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001952:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <HAL_GPIO_Init+0x324>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_GPIO_Init+0x324>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <HAL_GPIO_Init+0x324>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3301      	adds	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	f67f ae96 	bls.w	80016bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40013800 	.word	0x40013800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020c00 	.word	0x40020c00
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40021400 	.word	0x40021400
 80019c0:	40021800 	.word	0x40021800
 80019c4:	40013c00 	.word	0x40013c00

080019c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e001      	b.n	80019ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a14:	e003      	b.n	8001a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0e1      	b.n	8001c02 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a6d      	ldr	r2, [pc, #436]	; (8001c0c <HAL_I2S_Init+0x1e0>)
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7fe ff73 	bl	8000944 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2202      	movs	r2, #2
 8001a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a74:	f023 030f 	bic.w	r3, r3, #15
 8001a78:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d06f      	beq.n	8001b6a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a92:	2310      	movs	r3, #16
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e001      	b.n	8001a9c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a98:	2320      	movs	r3, #32
 8001a9a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d802      	bhi.n	8001aaa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <HAL_I2S_Init+0x1e4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d004      	beq.n	8001abe <HAL_I2S_Init+0x92>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a56      	ldr	r2, [pc, #344]	; (8001c14 <HAL_I2S_Init+0x1e8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d104      	bne.n	8001ac8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f000 feec 	bl	800289c <HAL_RCCEx_GetPeriphCLKFreq>
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	e003      	b.n	8001ad0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f000 fee7 	bl	800289c <HAL_RCCEx_GetPeriphCLKFreq>
 8001ace:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad8:	d125      	bne.n	8001b26 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d010      	beq.n	8001b04 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	461a      	mov	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afe:	3305      	adds	r3, #5
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	e01f      	b.n	8001b44 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	3305      	adds	r3, #5
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	e00e      	b.n	8001b44 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	3305      	adds	r3, #5
 8001b42:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4a34      	ldr	r2, [pc, #208]	; (8001c18 <HAL_I2S_Init+0x1ec>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	e003      	b.n	8001b72 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d902      	bls.n	8001b7e <HAL_I2S_Init+0x152>
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d907      	bls.n	8001b8e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f043 0210 	orr.w	r2, r3, #16
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e039      	b.n	8001c02 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	ea42 0103 	orr.w	r1, r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bac:	f023 030f 	bic.w	r3, r3, #15
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6851      	ldr	r1, [r2, #4]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6892      	ldr	r2, [r2, #8]
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68d2      	ldr	r2, [r2, #12]
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6992      	ldr	r2, [r2, #24]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bd0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b30      	cmp	r3, #48	; 0x30
 8001bd8:	d003      	beq.n	8001be2 <HAL_I2S_Init+0x1b6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2bb0      	cmp	r3, #176	; 0xb0
 8001be0:	d107      	bne.n	8001bf2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	69da      	ldr	r2, [r3, #28]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bf0:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	08001ef5 	.word	0x08001ef5
 8001c10:	40003800 	.word	0x40003800
 8001c14:	40003c00 	.word	0x40003c00
 8001c18:	cccccccd 	.word	0xcccccccd

08001c1c <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_I2S_Transmit+0x1c>
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0dc      	b.n	8001df6 <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_I2S_Transmit+0x30>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e0d4      	b.n	8001df6 <HAL_I2S_Transmit+0x1da>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d005      	beq.n	8001c6c <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e0c4      	b.n	8001df6 <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d002      	beq.n	8001c98 <HAL_I2S_Transmit+0x7c>
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d10a      	bne.n	8001cae <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cac:	e005      	b.n	8001cba <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	88fa      	ldrh	r2, [r7, #6]
 8001cb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	88fa      	ldrh	r2, [r7, #6]
 8001cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d007      	beq.n	8001ce2 <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	69da      	ldr	r2, [r3, #28]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ce0:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f98d 	bl	8002008 <I2S_WaitFlagStateUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d04e      	beq.n	8001d92 <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e070      	b.n	8001df6 <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	881a      	ldrh	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	1c9a      	adds	r2, r3, #2
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f962 	bl	8002008 <I2S_WaitFlagStateUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00f      	beq.n	8001d6a <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f043 0201 	orr.w	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e045      	b.n	8001df6 <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d10c      	bne.n	8001d92 <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f043 0204 	orr.w	r2, r3, #4
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->TxXferCount > 0U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1bb      	bne.n	8001d14 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db0:	d118      	bne.n	8001de4 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2200      	movs	r2, #0
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f925 	bl	8002008 <I2S_WaitFlagStateUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00f      	beq.n	8001de4 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e008      	b.n	8001df6 <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	881a      	ldrh	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	1c9a      	adds	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10e      	bne.n	8001e8e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ffb8 	bl	8001dfe <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	1c9a      	adds	r2, r3, #2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10e      	bne.n	8001eec <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001edc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ff93 	bl	8001e12 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d13a      	bne.n	8001f86 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d109      	bne.n	8001f2e <I2S_IRQHandler+0x3a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d102      	bne.n	8001f2e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ffb4 	bl	8001e96 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	2b40      	cmp	r3, #64	; 0x40
 8001f36:	d126      	bne.n	8001f86 <I2S_IRQHandler+0x92>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d11f      	bne.n	8001f86 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f54:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f043 0202 	orr.w	r2, r3, #2
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff50 	bl	8001e26 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d136      	bne.n	8002000 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d109      	bne.n	8001fb0 <I2S_IRQHandler+0xbc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa6:	2b80      	cmp	r3, #128	; 0x80
 8001fa8:	d102      	bne.n	8001fb0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff45 	bl	8001e3a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d122      	bne.n	8002000 <I2S_IRQHandler+0x10c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d11b      	bne.n	8002000 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f043 0204 	orr.w	r2, r3, #4
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ff13 	bl	8001e26 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002000:	bf00      	nop
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002018:	f7fe fec2 	bl	8000da0 <HAL_GetTick>
 800201c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800201e:	e018      	b.n	8002052 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d014      	beq.n	8002052 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002028:	f7fe feba 	bl	8000da0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d902      	bls.n	800203e <I2S_WaitFlagStateUntilTimeout+0x36>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e00f      	b.n	8002072 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4013      	ands	r3, r2
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	bf0c      	ite	eq
 8002062:	2301      	moveq	r3, #1
 8002064:	2300      	movne	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	429a      	cmp	r2, r3
 800206e:	d1d7      	bne.n	8002020 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0cc      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d90c      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b65      	ldr	r3, [pc, #404]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b63      	ldr	r3, [pc, #396]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b8      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a58      	ldr	r2, [pc, #352]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	494d      	ldr	r1, [pc, #308]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d044      	beq.n	800219c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d119      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e07f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d003      	beq.n	800213a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002136:	2b03      	cmp	r3, #3
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e067      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4934      	ldr	r1, [pc, #208]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7fe fe18 	bl	8000da0 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7fe fe14 	bl	8000da0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e04f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d20c      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b22      	ldr	r3, [pc, #136]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e032      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4916      	ldr	r1, [pc, #88]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	490e      	ldr	r1, [pc, #56]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002202:	f000 fd93 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002206:	4602      	mov	r2, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	490a      	ldr	r1, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	5ccb      	ldrb	r3, [r1, r3]
 8002216:	fa22 f303 	lsr.w	r3, r2, r3
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fd78 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00
 8002238:	40023800 	.word	0x40023800
 800223c:	08004690 	.word	0x08004690
 8002240:	20000000 	.word	0x20000000
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d010      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002280:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002286:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	496c      	ldr	r1, [pc, #432]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800229e:	2301      	movs	r3, #1
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d010      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80022ae:	4b64      	ldr	r3, [pc, #400]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	4960      	ldr	r1, [pc, #384]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80022cc:	2301      	movs	r3, #1
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d017      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022dc:	4b58      	ldr	r3, [pc, #352]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4955      	ldr	r1, [pc, #340]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022fa:	d101      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002308:	2301      	movs	r3, #1
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d017      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002318:	4b49      	ldr	r3, [pc, #292]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800231a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800231e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	4946      	ldr	r1, [pc, #280]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002336:	d101      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002338:	2301      	movs	r3, #1
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002344:	2301      	movs	r3, #1
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 808a 	beq.w	800246a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a38      	ldr	r2, [pc, #224]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002372:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a33      	ldr	r2, [pc, #204]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800237e:	f7fe fd0f 	bl	8000da0 <HAL_GetTick>
 8002382:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002386:	f7fe fd0b 	bl	8000da0 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e278      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a4:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ac:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d02f      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023bc:	6a3a      	ldr	r2, [r7, #32]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d028      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023c2:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ca:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80023d8:	4a19      	ldr	r2, [pc, #100]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d114      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fe fcd9 	bl	8000da0 <HAL_GetTick>
 80023ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fcd5 	bl	8000da0 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e240      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ee      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002420:	d114      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002436:	4902      	ldr	r1, [pc, #8]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]
 800243c:	e00c      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40007000 	.word	0x40007000
 8002448:	42470e40 	.word	0x42470e40
 800244c:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a49      	ldr	r2, [pc, #292]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002452:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800245a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002464:	4944      	ldr	r1, [pc, #272]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002466:	4313      	orrs	r3, r2
 8002468:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	d004      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800247c:	4b3f      	ldr	r3, [pc, #252]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800247e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800248c:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800248e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002492:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	4937      	ldr	r1, [pc, #220]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024bc:	492e      	ldr	r1, [pc, #184]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d011      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024d0:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	4926      	ldr	r1, [pc, #152]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ee:	d101      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80024f0:	2301      	movs	r3, #1
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002506:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	491a      	ldr	r1, [pc, #104]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251e:	2b00      	cmp	r3, #0
 8002520:	d011      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002528:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	4911      	ldr	r1, [pc, #68]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002540:	d101      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002542:	2301      	movs	r3, #1
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d005      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002554:	f040 80ff 	bne.w	8002756 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800255e:	f7fe fc1f 	bl	8000da0 <HAL_GetTick>
 8002562:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002564:	e00e      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002566:	f7fe fc1b 	bl	8000da0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d907      	bls.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e188      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002578:	40023800 	.word	0x40023800
 800257c:	424711e0 	.word	0x424711e0
 8002580:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002584:	4b7e      	ldr	r3, [pc, #504]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ea      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d028      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d124      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80025b8:	4b71      	ldr	r3, [pc, #452]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	3301      	adds	r3, #1
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d0:	0e1b      	lsrs	r3, r3, #24
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	431a      	orrs	r2, r3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	3b01      	subs	r3, #1
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	431a      	orrs	r2, r3
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	071b      	lsls	r3, r3, #28
 80025fa:	4961      	ldr	r1, [pc, #388]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002620:	2b00      	cmp	r3, #0
 8002622:	d035      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262c:	d130      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800262e:	4b54      	ldr	r3, [pc, #336]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002646:	0f1b      	lsrs	r3, r3, #28
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	019b      	lsls	r3, r3, #6
 8002658:	431a      	orrs	r2, r3
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	3b01      	subs	r3, #1
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	061b      	lsls	r3, r3, #24
 800266a:	431a      	orrs	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	071b      	lsls	r3, r3, #28
 8002670:	4943      	ldr	r1, [pc, #268]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002678:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800267a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800267e:	f023 021f 	bic.w	r2, r3, #31
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	493d      	ldr	r1, [pc, #244]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d029      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a4:	d124      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026a6:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026be:	0f1b      	lsrs	r3, r3, #28
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	019b      	lsls	r3, r3, #6
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	3b01      	subs	r3, #1
 80026da:	041b      	lsls	r3, r3, #16
 80026dc:	431a      	orrs	r2, r3
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	431a      	orrs	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	071b      	lsls	r3, r3, #28
 80026e8:	4925      	ldr	r1, [pc, #148]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d016      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	3b01      	subs	r3, #1
 8002710:	041b      	lsls	r3, r3, #16
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	071b      	lsls	r3, r3, #28
 8002722:	4917      	ldr	r1, [pc, #92]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002730:	f7fe fb36 	bl	8000da0 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002738:	f7fe fb32 	bl	8000da0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e09f      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	2b01      	cmp	r3, #1
 800275a:	f040 8095 	bne.w	8002888 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002764:	f7fe fb1c 	bl	8000da0 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800276a:	e00f      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800276c:	f7fe fb18 	bl	8000da0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d908      	bls.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e085      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	42470068 	.word	0x42470068
 8002788:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800278c:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002798:	d0e8      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x566>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d02b      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d127      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80027c2:	4b34      	ldr	r3, [pc, #208]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	431a      	orrs	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	3b01      	subs	r3, #1
 80027e6:	041b      	lsls	r3, r3, #16
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	061b      	lsls	r3, r3, #24
 80027f0:	4928      	ldr	r1, [pc, #160]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027f8:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027fe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	3b01      	subs	r3, #1
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	4922      	ldr	r1, [pc, #136]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01d      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002826:	d118      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	0e1b      	lsrs	r3, r3, #24
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	019b      	lsls	r3, r3, #6
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	3b01      	subs	r3, #1
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	431a      	orrs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	4910      	ldr	r1, [pc, #64]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002860:	f7fe fa9e 	bl	8000da0 <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002868:	f7fe fa9a 	bl	8000da0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e007      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002886:	d1ef      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3730      	adds	r7, #48	; 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	42470070 	.word	0x42470070

0800289c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	2b07      	cmp	r3, #7
 80028c2:	f200 8224 	bhi.w	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80028c6:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80028c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028cc:	08002acf 	.word	0x08002acf
 80028d0:	08002bf9 	.word	0x08002bf9
 80028d4:	08002d0f 	.word	0x08002d0f
 80028d8:	080028ed 	.word	0x080028ed
 80028dc:	08002d0f 	.word	0x08002d0f
 80028e0:	08002d0f 	.word	0x08002d0f
 80028e4:	08002d0f 	.word	0x08002d0f
 80028e8:	080028ed 	.word	0x080028ed
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80028ec:	4ba8      	ldr	r3, [pc, #672]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002902:	f000 80d6 	beq.w	8002ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800290c:	f200 80dd 	bhi.w	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002916:	f000 809f 	beq.w	8002a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002920:	f200 80d3 	bhi.w	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292a:	d05b      	beq.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002932:	f200 80ca 	bhi.w	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800293c:	f000 80b6 	beq.w	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002946:	f200 80c0 	bhi.w	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002950:	f000 8082 	beq.w	8002a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800295a:	f200 80b6 	bhi.w	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800296a:	d03b      	beq.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800296c:	e0ad      	b.n	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800296e:	4b88      	ldr	r3, [pc, #544]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800297a:	4b85      	ldr	r3, [pc, #532]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002984:	4a83      	ldr	r2, [pc, #524]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002986:	fbb2 f3f3 	udiv	r3, r2, r3
 800298a:	61bb      	str	r3, [r7, #24]
 800298c:	e008      	b.n	80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800298e:	4b80      	ldr	r3, [pc, #512]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80029a0:	4b7b      	ldr	r3, [pc, #492]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	0e1b      	lsrs	r3, r3, #24
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80029ae:	4b78      	ldr	r3, [pc, #480]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	fb03 f202 	mul.w	r2, r3, r2
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80029c8:	4b71      	ldr	r3, [pc, #452]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	3301      	adds	r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	61fb      	str	r3, [r7, #28]
          break;
 80029e2:	e073      	b.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80029e4:	4b6a      	ldr	r3, [pc, #424]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80029f0:	4b67      	ldr	r3, [pc, #412]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029fa:	4a66      	ldr	r2, [pc, #408]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	e008      	b.n	8002a16 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8002a04:	4b62      	ldr	r3, [pc, #392]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a0e:	4a62      	ldr	r2, [pc, #392]	; (8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a14:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8002a16:	4b5e      	ldr	r3, [pc, #376]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1c:	0e1b      	lsrs	r3, r3, #24
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8002a24:	4b5a      	ldr	r3, [pc, #360]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2a:	099b      	lsrs	r3, r3, #6
 8002a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	fb03 f202 	mul.w	r2, r3, r2
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	61fb      	str	r3, [r7, #28]
          break;
 8002a56:	e039      	b.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002a58:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d108      	bne.n	8002a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a64:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a6c:	4a49      	ldr	r2, [pc, #292]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	e007      	b.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002a76:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a7e:	4a46      	ldr	r2, [pc, #280]	; (8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8002a86:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	0f1b      	lsrs	r3, r3, #28
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8002a92:	4b3f      	ldr	r3, [pc, #252]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	fb03 f202 	mul.w	r2, r3, r2
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	61fb      	str	r3, [r7, #28]
          break;
 8002aaa:	e00f      	b.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002aac:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002aae:	61fb      	str	r3, [r7, #28]
          break;
 8002ab0:	e00c      	b.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002ab2:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8002abe:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002ac0:	61fb      	str	r3, [r7, #28]
          break;
 8002ac2:	e003      	b.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8002ac4:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002ac6:	61fb      	str	r3, [r7, #28]
          break;
 8002ac8:	e000      	b.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8002aca:	bf00      	nop
        }
      }
      break;
 8002acc:	e11f      	b.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002ae0:	d079      	beq.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002ae8:	f200 8082 	bhi.w	8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af2:	d03c      	beq.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002afa:	d879      	bhi.n	8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b08:	d172      	bne.n	8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002b0c:	61fb      	str	r3, [r7, #28]
          break;
 8002b0e:	e072      	b.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	e008      	b.n	8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002b32:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b3c:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b42:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5e:	0f1b      	lsrs	r3, r3, #28
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	61fb      	str	r3, [r7, #28]
          break;
 8002b6c:	e043      	b.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7a:	d111      	bne.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	61bb      	str	r3, [r7, #24]
 8002b8c:	e010      	b.n	8002bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	007a1200 	.word	0x007a1200
 8002b9c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ba0:	4b5e      	ldr	r3, [pc, #376]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba8:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002bb0:	4b5a      	ldr	r3, [pc, #360]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	fb02 f303 	mul.w	r3, r2, r3
 8002bc0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002bc2:	4b56      	ldr	r3, [pc, #344]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0f1b      	lsrs	r3, r3, #28
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	61fb      	str	r3, [r7, #28]
          break;
 8002bd4:	e00f      	b.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be2:	d102      	bne.n	8002bea <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8002be4:	4b4f      	ldr	r3, [pc, #316]	; (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002be6:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002be8:	e005      	b.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8002bea:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002bec:	61fb      	str	r3, [r7, #28]
          break;
 8002bee:	e002      	b.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
          break;
 8002bf4:	bf00      	nop
        }
      }
      break;
 8002bf6:	e08a      	b.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8002bf8:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfe:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002c0a:	d06f      	beq.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002c12:	d878      	bhi.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c1a:	d03c      	beq.n	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c22:	d870      	bhi.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d006      	beq.n	8002c38 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c30:	d169      	bne.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8002c34:	61fb      	str	r3, [r7, #28]
          break;
 8002c36:	e069      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c38:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c44:	d109      	bne.n	8002c5a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c46:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c50:	4a34      	ldr	r2, [pc, #208]	; (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	e008      	b.n	8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c5a:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c64:	4a2e      	ldr	r2, [pc, #184]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002c80:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c86:	0f1b      	lsrs	r3, r3, #28
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	61fb      	str	r3, [r7, #28]
          break;
 8002c94:	e03a      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d108      	bne.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cac:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	e007      	b.n	8002cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cbe:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	099b      	lsrs	r3, r3, #6
 8002ccc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	0f1b      	lsrs	r3, r3, #28
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	61fb      	str	r3, [r7, #28]
          break;
 8002cea:	e00f      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf8:	d102      	bne.n	8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002cfc:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002cfe:	e005      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002d02:	61fb      	str	r3, [r7, #28]
          break;
 8002d04:	e002      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
          break;
 8002d0a:	bf00      	nop
        }
      }
      break;
 8002d0c:	bf00      	nop
    }
  }
  return frequency;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3724      	adds	r7, #36	; 0x24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	007a1200 	.word	0x007a1200
 8002d28:	00bb8000 	.word	0x00bb8000

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b0ae      	sub	sp, #184	; 0xb8
 8002d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d52:	4bcb      	ldr	r3, [pc, #812]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	f200 8206 	bhi.w	800316c <HAL_RCC_GetSysClockFreq+0x440>
 8002d60:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	0800316d 	.word	0x0800316d
 8002d70:	0800316d 	.word	0x0800316d
 8002d74:	0800316d 	.word	0x0800316d
 8002d78:	08002da5 	.word	0x08002da5
 8002d7c:	0800316d 	.word	0x0800316d
 8002d80:	0800316d 	.word	0x0800316d
 8002d84:	0800316d 	.word	0x0800316d
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	0800316d 	.word	0x0800316d
 8002d90:	0800316d 	.word	0x0800316d
 8002d94:	0800316d 	.word	0x0800316d
 8002d98:	08002f9d 	.word	0x08002f9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4bb9      	ldr	r3, [pc, #740]	; (8003084 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002da2:	e1e7      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da4:	4bb8      	ldr	r3, [pc, #736]	; (8003088 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002daa:	e1e3      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dac:	4bb4      	ldr	r3, [pc, #720]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db8:	4bb1      	ldr	r3, [pc, #708]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d071      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc4:	4bae      	ldr	r3, [pc, #696]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dea:	4622      	mov	r2, r4
 8002dec:	462b      	mov	r3, r5
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfc:	0150      	lsls	r0, r2, #5
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4621      	mov	r1, r4
 8002e04:	1a51      	subs	r1, r2, r1
 8002e06:	6439      	str	r1, [r7, #64]	; 0x40
 8002e08:	4629      	mov	r1, r5
 8002e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	018b      	lsls	r3, r1, #6
 8002e20:	4641      	mov	r1, r8
 8002e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e26:	4641      	mov	r1, r8
 8002e28:	018a      	lsls	r2, r1, #6
 8002e2a:	4641      	mov	r1, r8
 8002e2c:	1a51      	subs	r1, r2, r1
 8002e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e30:	4649      	mov	r1, r9
 8002e32:	eb63 0301 	sbc.w	r3, r3, r1
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e44:	4649      	mov	r1, r9
 8002e46:	00cb      	lsls	r3, r1, #3
 8002e48:	4641      	mov	r1, r8
 8002e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e4e:	4641      	mov	r1, r8
 8002e50:	00ca      	lsls	r2, r1, #3
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	4622      	mov	r2, r4
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5e:	462b      	mov	r3, r5
 8002e60:	460a      	mov	r2, r1
 8002e62:	eb42 0303 	adc.w	r3, r2, r3
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e74:	4629      	mov	r1, r5
 8002e76:	024b      	lsls	r3, r1, #9
 8002e78:	4621      	mov	r1, r4
 8002e7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e7e:	4621      	mov	r1, r4
 8002e80:	024a      	lsls	r2, r1, #9
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e98:	f7fd f9b4 	bl	8000204 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea6:	e067      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea8:	4b75      	ldr	r3, [pc, #468]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ec6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	f04f 0000 	mov.w	r0, #0
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	0159      	lsls	r1, r3, #5
 8002ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002edc:	0150      	lsls	r0, r2, #5
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	1a51      	subs	r1, r2, r1
 8002ee6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ee8:	4629      	mov	r1, r5
 8002eea:	eb63 0301 	sbc.w	r3, r3, r1
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002efc:	4649      	mov	r1, r9
 8002efe:	018b      	lsls	r3, r1, #6
 8002f00:	4641      	mov	r1, r8
 8002f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f06:	4641      	mov	r1, r8
 8002f08:	018a      	lsls	r2, r1, #6
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f10:	4649      	mov	r1, r9
 8002f12:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f2a:	4692      	mov	sl, r2
 8002f2c:	469b      	mov	fp, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	eb1a 0303 	adds.w	r3, sl, r3
 8002f34:	623b      	str	r3, [r7, #32]
 8002f36:	462b      	mov	r3, r5
 8002f38:	eb4b 0303 	adc.w	r3, fp, r3
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	028b      	lsls	r3, r1, #10
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f54:	4621      	mov	r1, r4
 8002f56:	028a      	lsls	r2, r1, #10
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f60:	2200      	movs	r2, #0
 8002f62:	673b      	str	r3, [r7, #112]	; 0x70
 8002f64:	677a      	str	r2, [r7, #116]	; 0x74
 8002f66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f6a:	f7fd f94b 	bl	8000204 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4613      	mov	r3, r2
 8002f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f9a:	e0eb      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f9c:	4b38      	ldr	r3, [pc, #224]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d06b      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	2200      	movs	r2, #0
 8002fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc8:	2300      	movs	r3, #0
 8002fca:	667b      	str	r3, [r7, #100]	; 0x64
 8002fcc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fd0:	4622      	mov	r2, r4
 8002fd2:	462b      	mov	r3, r5
 8002fd4:	f04f 0000 	mov.w	r0, #0
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	0159      	lsls	r1, r3, #5
 8002fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe2:	0150      	lsls	r0, r2, #5
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4621      	mov	r1, r4
 8002fea:	1a51      	subs	r1, r2, r1
 8002fec:	61b9      	str	r1, [r7, #24]
 8002fee:	4629      	mov	r1, r5
 8002ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003002:	4659      	mov	r1, fp
 8003004:	018b      	lsls	r3, r1, #6
 8003006:	4651      	mov	r1, sl
 8003008:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300c:	4651      	mov	r1, sl
 800300e:	018a      	lsls	r2, r1, #6
 8003010:	4651      	mov	r1, sl
 8003012:	ebb2 0801 	subs.w	r8, r2, r1
 8003016:	4659      	mov	r1, fp
 8003018:	eb63 0901 	sbc.w	r9, r3, r1
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003028:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800302c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003030:	4690      	mov	r8, r2
 8003032:	4699      	mov	r9, r3
 8003034:	4623      	mov	r3, r4
 8003036:	eb18 0303 	adds.w	r3, r8, r3
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	462b      	mov	r3, r5
 800303e:	eb49 0303 	adc.w	r3, r9, r3
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003050:	4629      	mov	r1, r5
 8003052:	024b      	lsls	r3, r1, #9
 8003054:	4621      	mov	r1, r4
 8003056:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800305a:	4621      	mov	r1, r4
 800305c:	024a      	lsls	r2, r1, #9
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003066:	2200      	movs	r2, #0
 8003068:	65bb      	str	r3, [r7, #88]	; 0x58
 800306a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800306c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003070:	f7fd f8c8 	bl	8000204 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800307e:	e065      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x420>
 8003080:	40023800 	.word	0x40023800
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308c:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <HAL_RCC_GetSysClockFreq+0x458>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	2200      	movs	r2, #0
 8003094:	4618      	mov	r0, r3
 8003096:	4611      	mov	r1, r2
 8003098:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800309c:	653b      	str	r3, [r7, #80]	; 0x50
 800309e:	2300      	movs	r3, #0
 80030a0:	657b      	str	r3, [r7, #84]	; 0x54
 80030a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030a6:	4642      	mov	r2, r8
 80030a8:	464b      	mov	r3, r9
 80030aa:	f04f 0000 	mov.w	r0, #0
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	0159      	lsls	r1, r3, #5
 80030b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b8:	0150      	lsls	r0, r2, #5
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4641      	mov	r1, r8
 80030c0:	1a51      	subs	r1, r2, r1
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	4649      	mov	r1, r9
 80030c6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030d8:	4659      	mov	r1, fp
 80030da:	018b      	lsls	r3, r1, #6
 80030dc:	4651      	mov	r1, sl
 80030de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e2:	4651      	mov	r1, sl
 80030e4:	018a      	lsls	r2, r1, #6
 80030e6:	4651      	mov	r1, sl
 80030e8:	1a54      	subs	r4, r2, r1
 80030ea:	4659      	mov	r1, fp
 80030ec:	eb63 0501 	sbc.w	r5, r3, r1
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	00eb      	lsls	r3, r5, #3
 80030fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fe:	00e2      	lsls	r2, r4, #3
 8003100:	4614      	mov	r4, r2
 8003102:	461d      	mov	r5, r3
 8003104:	4643      	mov	r3, r8
 8003106:	18e3      	adds	r3, r4, r3
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	464b      	mov	r3, r9
 800310c:	eb45 0303 	adc.w	r3, r5, r3
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311e:	4629      	mov	r1, r5
 8003120:	028b      	lsls	r3, r1, #10
 8003122:	4621      	mov	r1, r4
 8003124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003128:	4621      	mov	r1, r4
 800312a:	028a      	lsls	r2, r1, #10
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003134:	2200      	movs	r2, #0
 8003136:	64bb      	str	r3, [r7, #72]	; 0x48
 8003138:	64fa      	str	r2, [r7, #76]	; 0x4c
 800313a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800313e:	f7fd f861 	bl	8000204 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4613      	mov	r3, r2
 8003148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_RCC_GetSysClockFreq+0x458>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0f1b      	lsrs	r3, r3, #28
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800315a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800315e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800316a:	e003      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_GetSysClockFreq+0x45c>)
 800316e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003172:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003178:	4618      	mov	r0, r3
 800317a:	37b8      	adds	r7, #184	; 0xb8
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400

0800318c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e28d      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8083 	beq.w	80032b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031ac:	4b94      	ldr	r3, [pc, #592]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d019      	beq.n	80031ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031b8:	4b91      	ldr	r3, [pc, #580]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031c4:	4b8e      	ldr	r3, [pc, #568]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d0:	d00c      	beq.n	80031ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d2:	4b8b      	ldr	r3, [pc, #556]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d112      	bne.n	8003204 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b88      	ldr	r3, [pc, #544]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ea:	d10b      	bne.n	8003204 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	4b84      	ldr	r3, [pc, #528]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x124>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d157      	bne.n	80032b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e25a      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x90>
 800320e:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7b      	ldr	r2, [pc, #492]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0xcc>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0xb4>
 8003226:	4b76      	ldr	r3, [pc, #472]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a75      	ldr	r2, [pc, #468]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b73      	ldr	r3, [pc, #460]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a72      	ldr	r2, [pc, #456]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0xcc>
 8003240:	4b6f      	ldr	r3, [pc, #444]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6e      	ldr	r2, [pc, #440]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b6c      	ldr	r3, [pc, #432]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6b      	ldr	r2, [pc, #428]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fd fd9e 	bl	8000da0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003268:	f7fd fd9a 	bl	8000da0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e21f      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b61      	ldr	r3, [pc, #388]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0xdc>
 8003286:	e014      	b.n	80032b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fd fd8a 	bl	8000da0 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003290:	f7fd fd86 	bl	8000da0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e20b      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b57      	ldr	r3, [pc, #348]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x104>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d06f      	beq.n	800339e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032be:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ca:	4b4d      	ldr	r3, [pc, #308]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d105      	bne.n	80032e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b47      	ldr	r3, [pc, #284]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d11c      	bne.n	8003328 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ee:	4b44      	ldr	r3, [pc, #272]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d116      	bne.n	8003328 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_RCC_OscConfig+0x186>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1d3      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4937      	ldr	r1, [pc, #220]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	e03a      	b.n	800339e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003330:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_OscConfig+0x278>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fd fd33 	bl	8000da0 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333e:	f7fd fd2f 	bl	8000da0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1b4      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	4b2b      	ldr	r3, [pc, #172]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4925      	ldr	r1, [pc, #148]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	e015      	b.n	800339e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_OscConfig+0x278>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fd fd12 	bl	8000da0 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003380:	f7fd fd0e 	bl	8000da0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e193      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d036      	beq.n	8003418 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b2:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fd fcf2 	bl	8000da0 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fd fcee 	bl	8000da0 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e173      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80033d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x234>
 80033de:	e01b      	b.n	8003418 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x27c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e6:	f7fd fcdb 	bl	8000da0 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	e00e      	b.n	800340c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ee:	f7fd fcd7 	bl	8000da0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d907      	bls.n	800340c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e15c      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
 8003400:	40023800 	.word	0x40023800
 8003404:	42470000 	.word	0x42470000
 8003408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	4b8a      	ldr	r3, [pc, #552]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800340e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ea      	bne.n	80033ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8097 	beq.w	8003554 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342a:	4b83      	ldr	r3, [pc, #524]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	4b7f      	ldr	r3, [pc, #508]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	4a7e      	ldr	r2, [pc, #504]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003444:	6413      	str	r3, [r2, #64]	; 0x40
 8003446:	4b7c      	ldr	r3, [pc, #496]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b79      	ldr	r3, [pc, #484]	; (800363c <HAL_RCC_OscConfig+0x4b0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d118      	bne.n	8003494 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003462:	4b76      	ldr	r3, [pc, #472]	; (800363c <HAL_RCC_OscConfig+0x4b0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a75      	ldr	r2, [pc, #468]	; (800363c <HAL_RCC_OscConfig+0x4b0>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346e:	f7fd fc97 	bl	8000da0 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003476:	f7fd fc93 	bl	8000da0 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e118      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	4b6c      	ldr	r3, [pc, #432]	; (800363c <HAL_RCC_OscConfig+0x4b0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x31e>
 800349c:	4b66      	ldr	r3, [pc, #408]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	4a65      	ldr	r2, [pc, #404]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6713      	str	r3, [r2, #112]	; 0x70
 80034a8:	e01c      	b.n	80034e4 <HAL_RCC_OscConfig+0x358>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x340>
 80034b2:	4b61      	ldr	r3, [pc, #388]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a60      	ldr	r2, [pc, #384]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	4b5e      	ldr	r3, [pc, #376]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a5d      	ldr	r2, [pc, #372]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0x358>
 80034cc:	4b5a      	ldr	r3, [pc, #360]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4a59      	ldr	r2, [pc, #356]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
 80034d8:	4b57      	ldr	r3, [pc, #348]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a56      	ldr	r2, [pc, #344]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fd fc58 	bl	8000da0 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f2:	e00a      	b.n	800350a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7fd fc54 	bl	8000da0 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e0d7      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350a:	4b4b      	ldr	r3, [pc, #300]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0ee      	beq.n	80034f4 <HAL_RCC_OscConfig+0x368>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003518:	f7fd fc42 	bl	8000da0 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fd fc3e 	bl	8000da0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0c1      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003536:	4b40      	ldr	r3, [pc, #256]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ee      	bne.n	8003520 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003548:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800354e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80ad 	beq.w	80036b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b08      	cmp	r3, #8
 8003568:	d060      	beq.n	800362c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d145      	bne.n	80035fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b33      	ldr	r3, [pc, #204]	; (8003640 <HAL_RCC_OscConfig+0x4b4>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fd fc12 	bl	8000da0 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003580:	f7fd fc0e 	bl	8000da0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e093      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b29      	ldr	r3, [pc, #164]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69da      	ldr	r2, [r3, #28]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	3b01      	subs	r3, #1
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	061b      	lsls	r3, r3, #24
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	071b      	lsls	r3, r3, #28
 80035ca:	491b      	ldr	r1, [pc, #108]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x4b4>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fd fbe3 	bl	8000da0 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035de:	f7fd fbdf 	bl	8000da0 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e064      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f0:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x452>
 80035fc:	e05c      	b.n	80036b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_RCC_OscConfig+0x4b4>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd fbcc 	bl	8000da0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fbc8 	bl	8000da0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e04d      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x480>
 800362a:	e045      	b.n	80036b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d107      	bne.n	8003644 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e040      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
 8003638:	40023800 	.word	0x40023800
 800363c:	40007000 	.word	0x40007000
 8003640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003644:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <HAL_RCC_OscConfig+0x538>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d030      	beq.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d129      	bne.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d122      	bne.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003674:	4013      	ands	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800367c:	4293      	cmp	r3, r2
 800367e:	d119      	bne.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	3b01      	subs	r3, #1
 800368e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d10f      	bne.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d107      	bne.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800

080036c8 <_fclose_r>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	4606      	mov	r6, r0
 80036cc:	460c      	mov	r4, r1
 80036ce:	b911      	cbnz	r1, 80036d6 <_fclose_r+0xe>
 80036d0:	2500      	movs	r5, #0
 80036d2:	4628      	mov	r0, r5
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	b118      	cbz	r0, 80036e0 <_fclose_r+0x18>
 80036d8:	6a03      	ldr	r3, [r0, #32]
 80036da:	b90b      	cbnz	r3, 80036e0 <_fclose_r+0x18>
 80036dc:	f000 f9d0 	bl	8003a80 <__sinit>
 80036e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036e2:	07d8      	lsls	r0, r3, #31
 80036e4:	d405      	bmi.n	80036f2 <_fclose_r+0x2a>
 80036e6:	89a3      	ldrh	r3, [r4, #12]
 80036e8:	0599      	lsls	r1, r3, #22
 80036ea:	d402      	bmi.n	80036f2 <_fclose_r+0x2a>
 80036ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ee:	f000 fdc5 	bl	800427c <__retarget_lock_acquire_recursive>
 80036f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f6:	b93b      	cbnz	r3, 8003708 <_fclose_r+0x40>
 80036f8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80036fa:	f015 0501 	ands.w	r5, r5, #1
 80036fe:	d1e7      	bne.n	80036d0 <_fclose_r+0x8>
 8003700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003702:	f000 fdbc 	bl	800427e <__retarget_lock_release_recursive>
 8003706:	e7e4      	b.n	80036d2 <_fclose_r+0xa>
 8003708:	4621      	mov	r1, r4
 800370a:	4630      	mov	r0, r6
 800370c:	f000 f83c 	bl	8003788 <__sflush_r>
 8003710:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003712:	4605      	mov	r5, r0
 8003714:	b133      	cbz	r3, 8003724 <_fclose_r+0x5c>
 8003716:	6a21      	ldr	r1, [r4, #32]
 8003718:	4630      	mov	r0, r6
 800371a:	4798      	blx	r3
 800371c:	2800      	cmp	r0, #0
 800371e:	bfb8      	it	lt
 8003720:	f04f 35ff 	movlt.w	r5, #4294967295
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	061a      	lsls	r2, r3, #24
 8003728:	d503      	bpl.n	8003732 <_fclose_r+0x6a>
 800372a:	6921      	ldr	r1, [r4, #16]
 800372c:	4630      	mov	r0, r6
 800372e:	f000 fdb5 	bl	800429c <_free_r>
 8003732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003734:	b141      	cbz	r1, 8003748 <_fclose_r+0x80>
 8003736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800373a:	4299      	cmp	r1, r3
 800373c:	d002      	beq.n	8003744 <_fclose_r+0x7c>
 800373e:	4630      	mov	r0, r6
 8003740:	f000 fdac 	bl	800429c <_free_r>
 8003744:	2300      	movs	r3, #0
 8003746:	6363      	str	r3, [r4, #52]	; 0x34
 8003748:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800374a:	b121      	cbz	r1, 8003756 <_fclose_r+0x8e>
 800374c:	4630      	mov	r0, r6
 800374e:	f000 fda5 	bl	800429c <_free_r>
 8003752:	2300      	movs	r3, #0
 8003754:	64a3      	str	r3, [r4, #72]	; 0x48
 8003756:	f000 f933 	bl	80039c0 <__sfp_lock_acquire>
 800375a:	2300      	movs	r3, #0
 800375c:	81a3      	strh	r3, [r4, #12]
 800375e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003760:	07db      	lsls	r3, r3, #31
 8003762:	d402      	bmi.n	800376a <_fclose_r+0xa2>
 8003764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003766:	f000 fd8a 	bl	800427e <__retarget_lock_release_recursive>
 800376a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376c:	f000 fd85 	bl	800427a <__retarget_lock_close_recursive>
 8003770:	f000 f92c 	bl	80039cc <__sfp_lock_release>
 8003774:	e7ad      	b.n	80036d2 <_fclose_r+0xa>
	...

08003778 <fclose>:
 8003778:	4b02      	ldr	r3, [pc, #8]	; (8003784 <fclose+0xc>)
 800377a:	4601      	mov	r1, r0
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	f7ff bfa3 	b.w	80036c8 <_fclose_r>
 8003782:	bf00      	nop
 8003784:	20000064 	.word	0x20000064

08003788 <__sflush_r>:
 8003788:	898a      	ldrh	r2, [r1, #12]
 800378a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800378e:	4605      	mov	r5, r0
 8003790:	0710      	lsls	r0, r2, #28
 8003792:	460c      	mov	r4, r1
 8003794:	d458      	bmi.n	8003848 <__sflush_r+0xc0>
 8003796:	684b      	ldr	r3, [r1, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	dc05      	bgt.n	80037a8 <__sflush_r+0x20>
 800379c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	dc02      	bgt.n	80037a8 <__sflush_r+0x20>
 80037a2:	2000      	movs	r0, #0
 80037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037aa:	2e00      	cmp	r6, #0
 80037ac:	d0f9      	beq.n	80037a2 <__sflush_r+0x1a>
 80037ae:	2300      	movs	r3, #0
 80037b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037b4:	682f      	ldr	r7, [r5, #0]
 80037b6:	6a21      	ldr	r1, [r4, #32]
 80037b8:	602b      	str	r3, [r5, #0]
 80037ba:	d032      	beq.n	8003822 <__sflush_r+0x9a>
 80037bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037be:	89a3      	ldrh	r3, [r4, #12]
 80037c0:	075a      	lsls	r2, r3, #29
 80037c2:	d505      	bpl.n	80037d0 <__sflush_r+0x48>
 80037c4:	6863      	ldr	r3, [r4, #4]
 80037c6:	1ac0      	subs	r0, r0, r3
 80037c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037ca:	b10b      	cbz	r3, 80037d0 <__sflush_r+0x48>
 80037cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037ce:	1ac0      	subs	r0, r0, r3
 80037d0:	2300      	movs	r3, #0
 80037d2:	4602      	mov	r2, r0
 80037d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037d6:	6a21      	ldr	r1, [r4, #32]
 80037d8:	4628      	mov	r0, r5
 80037da:	47b0      	blx	r6
 80037dc:	1c43      	adds	r3, r0, #1
 80037de:	89a3      	ldrh	r3, [r4, #12]
 80037e0:	d106      	bne.n	80037f0 <__sflush_r+0x68>
 80037e2:	6829      	ldr	r1, [r5, #0]
 80037e4:	291d      	cmp	r1, #29
 80037e6:	d82b      	bhi.n	8003840 <__sflush_r+0xb8>
 80037e8:	4a29      	ldr	r2, [pc, #164]	; (8003890 <__sflush_r+0x108>)
 80037ea:	410a      	asrs	r2, r1
 80037ec:	07d6      	lsls	r6, r2, #31
 80037ee:	d427      	bmi.n	8003840 <__sflush_r+0xb8>
 80037f0:	2200      	movs	r2, #0
 80037f2:	6062      	str	r2, [r4, #4]
 80037f4:	04d9      	lsls	r1, r3, #19
 80037f6:	6922      	ldr	r2, [r4, #16]
 80037f8:	6022      	str	r2, [r4, #0]
 80037fa:	d504      	bpl.n	8003806 <__sflush_r+0x7e>
 80037fc:	1c42      	adds	r2, r0, #1
 80037fe:	d101      	bne.n	8003804 <__sflush_r+0x7c>
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	b903      	cbnz	r3, 8003806 <__sflush_r+0x7e>
 8003804:	6560      	str	r0, [r4, #84]	; 0x54
 8003806:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003808:	602f      	str	r7, [r5, #0]
 800380a:	2900      	cmp	r1, #0
 800380c:	d0c9      	beq.n	80037a2 <__sflush_r+0x1a>
 800380e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003812:	4299      	cmp	r1, r3
 8003814:	d002      	beq.n	800381c <__sflush_r+0x94>
 8003816:	4628      	mov	r0, r5
 8003818:	f000 fd40 	bl	800429c <_free_r>
 800381c:	2000      	movs	r0, #0
 800381e:	6360      	str	r0, [r4, #52]	; 0x34
 8003820:	e7c0      	b.n	80037a4 <__sflush_r+0x1c>
 8003822:	2301      	movs	r3, #1
 8003824:	4628      	mov	r0, r5
 8003826:	47b0      	blx	r6
 8003828:	1c41      	adds	r1, r0, #1
 800382a:	d1c8      	bne.n	80037be <__sflush_r+0x36>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0c5      	beq.n	80037be <__sflush_r+0x36>
 8003832:	2b1d      	cmp	r3, #29
 8003834:	d001      	beq.n	800383a <__sflush_r+0xb2>
 8003836:	2b16      	cmp	r3, #22
 8003838:	d101      	bne.n	800383e <__sflush_r+0xb6>
 800383a:	602f      	str	r7, [r5, #0]
 800383c:	e7b1      	b.n	80037a2 <__sflush_r+0x1a>
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003844:	81a3      	strh	r3, [r4, #12]
 8003846:	e7ad      	b.n	80037a4 <__sflush_r+0x1c>
 8003848:	690f      	ldr	r7, [r1, #16]
 800384a:	2f00      	cmp	r7, #0
 800384c:	d0a9      	beq.n	80037a2 <__sflush_r+0x1a>
 800384e:	0793      	lsls	r3, r2, #30
 8003850:	680e      	ldr	r6, [r1, #0]
 8003852:	bf08      	it	eq
 8003854:	694b      	ldreq	r3, [r1, #20]
 8003856:	600f      	str	r7, [r1, #0]
 8003858:	bf18      	it	ne
 800385a:	2300      	movne	r3, #0
 800385c:	eba6 0807 	sub.w	r8, r6, r7
 8003860:	608b      	str	r3, [r1, #8]
 8003862:	f1b8 0f00 	cmp.w	r8, #0
 8003866:	dd9c      	ble.n	80037a2 <__sflush_r+0x1a>
 8003868:	6a21      	ldr	r1, [r4, #32]
 800386a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800386c:	4643      	mov	r3, r8
 800386e:	463a      	mov	r2, r7
 8003870:	4628      	mov	r0, r5
 8003872:	47b0      	blx	r6
 8003874:	2800      	cmp	r0, #0
 8003876:	dc06      	bgt.n	8003886 <__sflush_r+0xfe>
 8003878:	89a3      	ldrh	r3, [r4, #12]
 800387a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800387e:	81a3      	strh	r3, [r4, #12]
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	e78e      	b.n	80037a4 <__sflush_r+0x1c>
 8003886:	4407      	add	r7, r0
 8003888:	eba8 0800 	sub.w	r8, r8, r0
 800388c:	e7e9      	b.n	8003862 <__sflush_r+0xda>
 800388e:	bf00      	nop
 8003890:	dfbffffe 	.word	0xdfbffffe

08003894 <_fflush_r>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	690b      	ldr	r3, [r1, #16]
 8003898:	4605      	mov	r5, r0
 800389a:	460c      	mov	r4, r1
 800389c:	b913      	cbnz	r3, 80038a4 <_fflush_r+0x10>
 800389e:	2500      	movs	r5, #0
 80038a0:	4628      	mov	r0, r5
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	b118      	cbz	r0, 80038ae <_fflush_r+0x1a>
 80038a6:	6a03      	ldr	r3, [r0, #32]
 80038a8:	b90b      	cbnz	r3, 80038ae <_fflush_r+0x1a>
 80038aa:	f000 f8e9 	bl	8003a80 <__sinit>
 80038ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f3      	beq.n	800389e <_fflush_r+0xa>
 80038b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038b8:	07d0      	lsls	r0, r2, #31
 80038ba:	d404      	bmi.n	80038c6 <_fflush_r+0x32>
 80038bc:	0599      	lsls	r1, r3, #22
 80038be:	d402      	bmi.n	80038c6 <_fflush_r+0x32>
 80038c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038c2:	f000 fcdb 	bl	800427c <__retarget_lock_acquire_recursive>
 80038c6:	4628      	mov	r0, r5
 80038c8:	4621      	mov	r1, r4
 80038ca:	f7ff ff5d 	bl	8003788 <__sflush_r>
 80038ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038d0:	07da      	lsls	r2, r3, #31
 80038d2:	4605      	mov	r5, r0
 80038d4:	d4e4      	bmi.n	80038a0 <_fflush_r+0xc>
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	059b      	lsls	r3, r3, #22
 80038da:	d4e1      	bmi.n	80038a0 <_fflush_r+0xc>
 80038dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038de:	f000 fcce 	bl	800427e <__retarget_lock_release_recursive>
 80038e2:	e7dd      	b.n	80038a0 <_fflush_r+0xc>

080038e4 <std>:
 80038e4:	2300      	movs	r3, #0
 80038e6:	b510      	push	{r4, lr}
 80038e8:	4604      	mov	r4, r0
 80038ea:	e9c0 3300 	strd	r3, r3, [r0]
 80038ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038f2:	6083      	str	r3, [r0, #8]
 80038f4:	8181      	strh	r1, [r0, #12]
 80038f6:	6643      	str	r3, [r0, #100]	; 0x64
 80038f8:	81c2      	strh	r2, [r0, #14]
 80038fa:	6183      	str	r3, [r0, #24]
 80038fc:	4619      	mov	r1, r3
 80038fe:	2208      	movs	r2, #8
 8003900:	305c      	adds	r0, #92	; 0x5c
 8003902:	f000 fc1d 	bl	8004140 <memset>
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <std+0x38>)
 8003908:	6263      	str	r3, [r4, #36]	; 0x24
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <std+0x3c>)
 800390c:	62a3      	str	r3, [r4, #40]	; 0x28
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <std+0x40>)
 8003910:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <std+0x44>)
 8003914:	6224      	str	r4, [r4, #32]
 8003916:	6323      	str	r3, [r4, #48]	; 0x30
 8003918:	bd10      	pop	{r4, pc}
 800391a:	bf00      	nop
 800391c:	08003e51 	.word	0x08003e51
 8003920:	08003e73 	.word	0x08003e73
 8003924:	08003eab 	.word	0x08003eab
 8003928:	08003ecf 	.word	0x08003ecf

0800392c <stdio_exit_handler>:
 800392c:	4a02      	ldr	r2, [pc, #8]	; (8003938 <stdio_exit_handler+0xc>)
 800392e:	4903      	ldr	r1, [pc, #12]	; (800393c <stdio_exit_handler+0x10>)
 8003930:	4803      	ldr	r0, [pc, #12]	; (8003940 <stdio_exit_handler+0x14>)
 8003932:	f000 b98f 	b.w	8003c54 <_fwalk_sglue>
 8003936:	bf00      	nop
 8003938:	2000000c 	.word	0x2000000c
 800393c:	08003895 	.word	0x08003895
 8003940:	20000018 	.word	0x20000018

08003944 <cleanup_stdio>:
 8003944:	6841      	ldr	r1, [r0, #4]
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <cleanup_stdio+0x34>)
 8003948:	4299      	cmp	r1, r3
 800394a:	b510      	push	{r4, lr}
 800394c:	4604      	mov	r4, r0
 800394e:	d001      	beq.n	8003954 <cleanup_stdio+0x10>
 8003950:	f7ff ffa0 	bl	8003894 <_fflush_r>
 8003954:	68a1      	ldr	r1, [r4, #8]
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <cleanup_stdio+0x38>)
 8003958:	4299      	cmp	r1, r3
 800395a:	d002      	beq.n	8003962 <cleanup_stdio+0x1e>
 800395c:	4620      	mov	r0, r4
 800395e:	f7ff ff99 	bl	8003894 <_fflush_r>
 8003962:	68e1      	ldr	r1, [r4, #12]
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <cleanup_stdio+0x3c>)
 8003966:	4299      	cmp	r1, r3
 8003968:	d004      	beq.n	8003974 <cleanup_stdio+0x30>
 800396a:	4620      	mov	r0, r4
 800396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003970:	f7ff bf90 	b.w	8003894 <_fflush_r>
 8003974:	bd10      	pop	{r4, pc}
 8003976:	bf00      	nop
 8003978:	20000934 	.word	0x20000934
 800397c:	2000099c 	.word	0x2000099c
 8003980:	20000a04 	.word	0x20000a04

08003984 <global_stdio_init.part.0>:
 8003984:	b510      	push	{r4, lr}
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <global_stdio_init.part.0+0x30>)
 8003988:	4c0b      	ldr	r4, [pc, #44]	; (80039b8 <global_stdio_init.part.0+0x34>)
 800398a:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <global_stdio_init.part.0+0x38>)
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	4620      	mov	r0, r4
 8003990:	2200      	movs	r2, #0
 8003992:	2104      	movs	r1, #4
 8003994:	f7ff ffa6 	bl	80038e4 <std>
 8003998:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800399c:	2201      	movs	r2, #1
 800399e:	2109      	movs	r1, #9
 80039a0:	f7ff ffa0 	bl	80038e4 <std>
 80039a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80039a8:	2202      	movs	r2, #2
 80039aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ae:	2112      	movs	r1, #18
 80039b0:	f7ff bf98 	b.w	80038e4 <std>
 80039b4:	20000a6c 	.word	0x20000a6c
 80039b8:	20000934 	.word	0x20000934
 80039bc:	0800392d 	.word	0x0800392d

080039c0 <__sfp_lock_acquire>:
 80039c0:	4801      	ldr	r0, [pc, #4]	; (80039c8 <__sfp_lock_acquire+0x8>)
 80039c2:	f000 bc5b 	b.w	800427c <__retarget_lock_acquire_recursive>
 80039c6:	bf00      	nop
 80039c8:	20000a75 	.word	0x20000a75

080039cc <__sfp_lock_release>:
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <__sfp_lock_release+0x8>)
 80039ce:	f000 bc56 	b.w	800427e <__retarget_lock_release_recursive>
 80039d2:	bf00      	nop
 80039d4:	20000a75 	.word	0x20000a75

080039d8 <__sfp>:
 80039d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039dc:	4607      	mov	r7, r0
 80039de:	f7ff ffef 	bl	80039c0 <__sfp_lock_acquire>
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <__sfp+0x9c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b90b      	cbnz	r3, 80039ec <__sfp+0x14>
 80039e8:	f7ff ffcc 	bl	8003984 <global_stdio_init.part.0>
 80039ec:	4e22      	ldr	r6, [pc, #136]	; (8003a78 <__sfp+0xa0>)
 80039ee:	f04f 0804 	mov.w	r8, #4
 80039f2:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	d50f      	bpl.n	8003a1a <__sfp+0x42>
 80039fa:	6835      	ldr	r5, [r6, #0]
 80039fc:	2d00      	cmp	r5, #0
 80039fe:	d137      	bne.n	8003a70 <__sfp+0x98>
 8003a00:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003a04:	4638      	mov	r0, r7
 8003a06:	f000 fcb5 	bl	8004374 <_malloc_r>
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	bb30      	cbnz	r0, 8003a5c <__sfp+0x84>
 8003a0e:	6030      	str	r0, [r6, #0]
 8003a10:	f7ff ffdc 	bl	80039cc <__sfp_lock_release>
 8003a14:	230c      	movs	r3, #12
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	e01b      	b.n	8003a52 <__sfp+0x7a>
 8003a1a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a1e:	b9dd      	cbnz	r5, 8003a58 <__sfp+0x80>
 8003a20:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <__sfp+0xa4>)
 8003a22:	60e3      	str	r3, [r4, #12]
 8003a24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a28:	6665      	str	r5, [r4, #100]	; 0x64
 8003a2a:	f000 fc25 	bl	8004278 <__retarget_lock_init_recursive>
 8003a2e:	f7ff ffcd 	bl	80039cc <__sfp_lock_release>
 8003a32:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a36:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a3a:	6025      	str	r5, [r4, #0]
 8003a3c:	61a5      	str	r5, [r4, #24]
 8003a3e:	2208      	movs	r2, #8
 8003a40:	4629      	mov	r1, r5
 8003a42:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a46:	f000 fb7b 	bl	8004140 <memset>
 8003a4a:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a4e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a52:	4620      	mov	r0, r4
 8003a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a58:	3468      	adds	r4, #104	; 0x68
 8003a5a:	e7cc      	b.n	80039f6 <__sfp+0x1e>
 8003a5c:	e9c0 5800 	strd	r5, r8, [r0]
 8003a60:	300c      	adds	r0, #12
 8003a62:	60a0      	str	r0, [r4, #8]
 8003a64:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8003a68:	4629      	mov	r1, r5
 8003a6a:	f000 fb69 	bl	8004140 <memset>
 8003a6e:	6034      	str	r4, [r6, #0]
 8003a70:	6836      	ldr	r6, [r6, #0]
 8003a72:	e7be      	b.n	80039f2 <__sfp+0x1a>
 8003a74:	20000a6c 	.word	0x20000a6c
 8003a78:	2000000c 	.word	0x2000000c
 8003a7c:	ffff0001 	.word	0xffff0001

08003a80 <__sinit>:
 8003a80:	b510      	push	{r4, lr}
 8003a82:	4604      	mov	r4, r0
 8003a84:	f7ff ff9c 	bl	80039c0 <__sfp_lock_acquire>
 8003a88:	6a23      	ldr	r3, [r4, #32]
 8003a8a:	b11b      	cbz	r3, 8003a94 <__sinit+0x14>
 8003a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a90:	f7ff bf9c 	b.w	80039cc <__sfp_lock_release>
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <__sinit+0x28>)
 8003a96:	6223      	str	r3, [r4, #32]
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <__sinit+0x2c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f5      	bne.n	8003a8c <__sinit+0xc>
 8003aa0:	f7ff ff70 	bl	8003984 <global_stdio_init.part.0>
 8003aa4:	e7f2      	b.n	8003a8c <__sinit+0xc>
 8003aa6:	bf00      	nop
 8003aa8:	08003945 	.word	0x08003945
 8003aac:	20000a6c 	.word	0x20000a6c

08003ab0 <_fopen_r>:
 8003ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ab2:	460f      	mov	r7, r1
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	aa01      	add	r2, sp, #4
 8003ab8:	4605      	mov	r5, r0
 8003aba:	f000 fce7 	bl	800448c <__sflags>
 8003abe:	4606      	mov	r6, r0
 8003ac0:	b918      	cbnz	r0, 8003aca <_fopen_r+0x1a>
 8003ac2:	2400      	movs	r4, #0
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	b003      	add	sp, #12
 8003ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aca:	4628      	mov	r0, r5
 8003acc:	f7ff ff84 	bl	80039d8 <__sfp>
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d0f5      	beq.n	8003ac2 <_fopen_r+0x12>
 8003ad6:	4639      	mov	r1, r7
 8003ad8:	9a01      	ldr	r2, [sp, #4]
 8003ada:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f000 fb6a 	bl	80041b8 <_open_r>
 8003ae4:	1e07      	subs	r7, r0, #0
 8003ae6:	da09      	bge.n	8003afc <_fopen_r+0x4c>
 8003ae8:	2500      	movs	r5, #0
 8003aea:	f7ff ff69 	bl	80039c0 <__sfp_lock_acquire>
 8003aee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003af0:	81a5      	strh	r5, [r4, #12]
 8003af2:	f000 fbc2 	bl	800427a <__retarget_lock_close_recursive>
 8003af6:	f7ff ff69 	bl	80039cc <__sfp_lock_release>
 8003afa:	e7e2      	b.n	8003ac2 <_fopen_r+0x12>
 8003afc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003afe:	07db      	lsls	r3, r3, #31
 8003b00:	d405      	bmi.n	8003b0e <_fopen_r+0x5e>
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	0598      	lsls	r0, r3, #22
 8003b06:	d402      	bmi.n	8003b0e <_fopen_r+0x5e>
 8003b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b0a:	f000 fbb7 	bl	800427c <__retarget_lock_acquire_recursive>
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <_fopen_r+0x98>)
 8003b10:	6263      	str	r3, [r4, #36]	; 0x24
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <_fopen_r+0x9c>)
 8003b14:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b16:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <_fopen_r+0xa0>)
 8003b18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b1a:	05f1      	lsls	r1, r6, #23
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <_fopen_r+0xa4>)
 8003b1e:	81e7      	strh	r7, [r4, #14]
 8003b20:	81a6      	strh	r6, [r4, #12]
 8003b22:	6224      	str	r4, [r4, #32]
 8003b24:	6323      	str	r3, [r4, #48]	; 0x30
 8003b26:	d505      	bpl.n	8003b34 <_fopen_r+0x84>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 f884 	bl	8003c3c <_fseek_r>
 8003b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b36:	07da      	lsls	r2, r3, #31
 8003b38:	d4c4      	bmi.n	8003ac4 <_fopen_r+0x14>
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	059b      	lsls	r3, r3, #22
 8003b3e:	d4c1      	bmi.n	8003ac4 <_fopen_r+0x14>
 8003b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b42:	f000 fb9c 	bl	800427e <__retarget_lock_release_recursive>
 8003b46:	e7bd      	b.n	8003ac4 <_fopen_r+0x14>
 8003b48:	08003e51 	.word	0x08003e51
 8003b4c:	08003e73 	.word	0x08003e73
 8003b50:	08003eab 	.word	0x08003eab
 8003b54:	08003ecf 	.word	0x08003ecf

08003b58 <fopen>:
 8003b58:	4b02      	ldr	r3, [pc, #8]	; (8003b64 <fopen+0xc>)
 8003b5a:	460a      	mov	r2, r1
 8003b5c:	4601      	mov	r1, r0
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	f7ff bfa6 	b.w	8003ab0 <_fopen_r>
 8003b64:	20000064 	.word	0x20000064

08003b68 <_fread_r>:
 8003b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6c:	461e      	mov	r6, r3
 8003b6e:	4613      	mov	r3, r2
 8003b70:	4373      	muls	r3, r6
 8003b72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003b74:	4682      	mov	sl, r0
 8003b76:	4688      	mov	r8, r1
 8003b78:	4691      	mov	r9, r2
 8003b7a:	469b      	mov	fp, r3
 8003b7c:	d04e      	beq.n	8003c1c <_fread_r+0xb4>
 8003b7e:	b118      	cbz	r0, 8003b88 <_fread_r+0x20>
 8003b80:	6a03      	ldr	r3, [r0, #32]
 8003b82:	b90b      	cbnz	r3, 8003b88 <_fread_r+0x20>
 8003b84:	f7ff ff7c 	bl	8003a80 <__sinit>
 8003b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b8a:	07df      	lsls	r7, r3, #31
 8003b8c:	d405      	bmi.n	8003b9a <_fread_r+0x32>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	059d      	lsls	r5, r3, #22
 8003b92:	d402      	bmi.n	8003b9a <_fread_r+0x32>
 8003b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b96:	f000 fb71 	bl	800427c <__retarget_lock_acquire_recursive>
 8003b9a:	6863      	ldr	r3, [r4, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	da01      	bge.n	8003ba4 <_fread_r+0x3c>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	6063      	str	r3, [r4, #4]
 8003ba4:	465f      	mov	r7, fp
 8003ba6:	e9d4 1500 	ldrd	r1, r5, [r4]
 8003baa:	42bd      	cmp	r5, r7
 8003bac:	d313      	bcc.n	8003bd6 <_fread_r+0x6e>
 8003bae:	463a      	mov	r2, r7
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	f000 fb65 	bl	8004280 <memcpy>
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	6821      	ldr	r1, [r4, #0]
 8003bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bbc:	1bd2      	subs	r2, r2, r7
 8003bbe:	6062      	str	r2, [r4, #4]
 8003bc0:	4439      	add	r1, r7
 8003bc2:	07da      	lsls	r2, r3, #31
 8003bc4:	6021      	str	r1, [r4, #0]
 8003bc6:	d423      	bmi.n	8003c10 <_fread_r+0xa8>
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	059b      	lsls	r3, r3, #22
 8003bcc:	d420      	bmi.n	8003c10 <_fread_r+0xa8>
 8003bce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bd0:	f000 fb55 	bl	800427e <__retarget_lock_release_recursive>
 8003bd4:	e01c      	b.n	8003c10 <_fread_r+0xa8>
 8003bd6:	462a      	mov	r2, r5
 8003bd8:	4640      	mov	r0, r8
 8003bda:	f000 fb51 	bl	8004280 <memcpy>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	442b      	add	r3, r5
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	4621      	mov	r1, r4
 8003be6:	1b7b      	subs	r3, r7, r5
 8003be8:	4650      	mov	r0, sl
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	f000 f8b8 	bl	8003d60 <__srefill_r>
 8003bf0:	44a8      	add	r8, r5
 8003bf2:	9b01      	ldr	r3, [sp, #4]
 8003bf4:	b180      	cbz	r0, 8003c18 <_fread_r+0xb0>
 8003bf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bf8:	07d8      	lsls	r0, r3, #31
 8003bfa:	d405      	bmi.n	8003c08 <_fread_r+0xa0>
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	0599      	lsls	r1, r3, #22
 8003c00:	d402      	bmi.n	8003c08 <_fread_r+0xa0>
 8003c02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c04:	f000 fb3b 	bl	800427e <__retarget_lock_release_recursive>
 8003c08:	445d      	add	r5, fp
 8003c0a:	1beb      	subs	r3, r5, r7
 8003c0c:	fbb3 f6f9 	udiv	r6, r3, r9
 8003c10:	4630      	mov	r0, r6
 8003c12:	b003      	add	sp, #12
 8003c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c18:	461f      	mov	r7, r3
 8003c1a:	e7c4      	b.n	8003ba6 <_fread_r+0x3e>
 8003c1c:	461e      	mov	r6, r3
 8003c1e:	e7f7      	b.n	8003c10 <_fread_r+0xa8>

08003c20 <fread>:
 8003c20:	b507      	push	{r0, r1, r2, lr}
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	460a      	mov	r2, r1
 8003c28:	4601      	mov	r1, r0
 8003c2a:	4803      	ldr	r0, [pc, #12]	; (8003c38 <fread+0x18>)
 8003c2c:	6800      	ldr	r0, [r0, #0]
 8003c2e:	f7ff ff9b 	bl	8003b68 <_fread_r>
 8003c32:	b003      	add	sp, #12
 8003c34:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c38:	20000064 	.word	0x20000064

08003c3c <_fseek_r>:
 8003c3c:	f000 b9e0 	b.w	8004000 <_fseeko_r>

08003c40 <fseek>:
 8003c40:	4613      	mov	r3, r2
 8003c42:	460a      	mov	r2, r1
 8003c44:	4601      	mov	r1, r0
 8003c46:	4802      	ldr	r0, [pc, #8]	; (8003c50 <fseek+0x10>)
 8003c48:	6800      	ldr	r0, [r0, #0]
 8003c4a:	f000 b9d9 	b.w	8004000 <_fseeko_r>
 8003c4e:	bf00      	nop
 8003c50:	20000064 	.word	0x20000064

08003c54 <_fwalk_sglue>:
 8003c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c58:	4607      	mov	r7, r0
 8003c5a:	4688      	mov	r8, r1
 8003c5c:	4614      	mov	r4, r2
 8003c5e:	2600      	movs	r6, #0
 8003c60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c64:	f1b9 0901 	subs.w	r9, r9, #1
 8003c68:	d505      	bpl.n	8003c76 <_fwalk_sglue+0x22>
 8003c6a:	6824      	ldr	r4, [r4, #0]
 8003c6c:	2c00      	cmp	r4, #0
 8003c6e:	d1f7      	bne.n	8003c60 <_fwalk_sglue+0xc>
 8003c70:	4630      	mov	r0, r6
 8003c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c76:	89ab      	ldrh	r3, [r5, #12]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d907      	bls.n	8003c8c <_fwalk_sglue+0x38>
 8003c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c80:	3301      	adds	r3, #1
 8003c82:	d003      	beq.n	8003c8c <_fwalk_sglue+0x38>
 8003c84:	4629      	mov	r1, r5
 8003c86:	4638      	mov	r0, r7
 8003c88:	47c0      	blx	r8
 8003c8a:	4306      	orrs	r6, r0
 8003c8c:	3568      	adds	r5, #104	; 0x68
 8003c8e:	e7e9      	b.n	8003c64 <_fwalk_sglue+0x10>

08003c90 <_fwrite_r>:
 8003c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c94:	9c08      	ldr	r4, [sp, #32]
 8003c96:	468a      	mov	sl, r1
 8003c98:	4690      	mov	r8, r2
 8003c9a:	fb02 f903 	mul.w	r9, r2, r3
 8003c9e:	4606      	mov	r6, r0
 8003ca0:	b118      	cbz	r0, 8003caa <_fwrite_r+0x1a>
 8003ca2:	6a03      	ldr	r3, [r0, #32]
 8003ca4:	b90b      	cbnz	r3, 8003caa <_fwrite_r+0x1a>
 8003ca6:	f7ff feeb 	bl	8003a80 <__sinit>
 8003caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cac:	07dd      	lsls	r5, r3, #31
 8003cae:	d405      	bmi.n	8003cbc <_fwrite_r+0x2c>
 8003cb0:	89a3      	ldrh	r3, [r4, #12]
 8003cb2:	0598      	lsls	r0, r3, #22
 8003cb4:	d402      	bmi.n	8003cbc <_fwrite_r+0x2c>
 8003cb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cb8:	f000 fae0 	bl	800427c <__retarget_lock_acquire_recursive>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	0719      	lsls	r1, r3, #28
 8003cc0:	d516      	bpl.n	8003cf0 <_fwrite_r+0x60>
 8003cc2:	6923      	ldr	r3, [r4, #16]
 8003cc4:	b1a3      	cbz	r3, 8003cf0 <_fwrite_r+0x60>
 8003cc6:	2500      	movs	r5, #0
 8003cc8:	454d      	cmp	r5, r9
 8003cca:	d01f      	beq.n	8003d0c <_fwrite_r+0x7c>
 8003ccc:	68a7      	ldr	r7, [r4, #8]
 8003cce:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8003cd2:	3f01      	subs	r7, #1
 8003cd4:	2f00      	cmp	r7, #0
 8003cd6:	60a7      	str	r7, [r4, #8]
 8003cd8:	da04      	bge.n	8003ce4 <_fwrite_r+0x54>
 8003cda:	69a3      	ldr	r3, [r4, #24]
 8003cdc:	429f      	cmp	r7, r3
 8003cde:	db0f      	blt.n	8003d00 <_fwrite_r+0x70>
 8003ce0:	290a      	cmp	r1, #10
 8003ce2:	d00d      	beq.n	8003d00 <_fwrite_r+0x70>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	6022      	str	r2, [r4, #0]
 8003cea:	7019      	strb	r1, [r3, #0]
 8003cec:	3501      	adds	r5, #1
 8003cee:	e7eb      	b.n	8003cc8 <_fwrite_r+0x38>
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f000 f92c 	bl	8003f50 <__swsetup_r>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d0e4      	beq.n	8003cc6 <_fwrite_r+0x36>
 8003cfc:	2500      	movs	r5, #0
 8003cfe:	e005      	b.n	8003d0c <_fwrite_r+0x7c>
 8003d00:	4622      	mov	r2, r4
 8003d02:	4630      	mov	r0, r6
 8003d04:	f000 f8e7 	bl	8003ed6 <__swbuf_r>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d1ef      	bne.n	8003cec <_fwrite_r+0x5c>
 8003d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d0e:	07da      	lsls	r2, r3, #31
 8003d10:	d405      	bmi.n	8003d1e <_fwrite_r+0x8e>
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	059b      	lsls	r3, r3, #22
 8003d16:	d402      	bmi.n	8003d1e <_fwrite_r+0x8e>
 8003d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d1a:	f000 fab0 	bl	800427e <__retarget_lock_release_recursive>
 8003d1e:	fbb5 f0f8 	udiv	r0, r5, r8
 8003d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08003d28 <fwrite>:
 8003d28:	b507      	push	{r0, r1, r2, lr}
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	460a      	mov	r2, r1
 8003d30:	4601      	mov	r1, r0
 8003d32:	4803      	ldr	r0, [pc, #12]	; (8003d40 <fwrite+0x18>)
 8003d34:	6800      	ldr	r0, [r0, #0]
 8003d36:	f7ff ffab 	bl	8003c90 <_fwrite_r>
 8003d3a:	b003      	add	sp, #12
 8003d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d40:	20000064 	.word	0x20000064

08003d44 <lflush>:
 8003d44:	898b      	ldrh	r3, [r1, #12]
 8003d46:	f003 0309 	and.w	r3, r3, #9
 8003d4a:	2b09      	cmp	r3, #9
 8003d4c:	d103      	bne.n	8003d56 <lflush+0x12>
 8003d4e:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <lflush+0x18>)
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f7ff bd9f 	b.w	8003894 <_fflush_r>
 8003d56:	2000      	movs	r0, #0
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000064 	.word	0x20000064

08003d60 <__srefill_r>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	460c      	mov	r4, r1
 8003d64:	4605      	mov	r5, r0
 8003d66:	b118      	cbz	r0, 8003d70 <__srefill_r+0x10>
 8003d68:	6a03      	ldr	r3, [r0, #32]
 8003d6a:	b90b      	cbnz	r3, 8003d70 <__srefill_r+0x10>
 8003d6c:	f7ff fe88 	bl	8003a80 <__sinit>
 8003d70:	2300      	movs	r3, #0
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d7a:	069e      	lsls	r6, r3, #26
 8003d7c:	d502      	bpl.n	8003d84 <__srefill_r+0x24>
 8003d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d82:	e05c      	b.n	8003e3e <__srefill_r+0xde>
 8003d84:	0758      	lsls	r0, r3, #29
 8003d86:	d448      	bmi.n	8003e1a <__srefill_r+0xba>
 8003d88:	06d9      	lsls	r1, r3, #27
 8003d8a:	d405      	bmi.n	8003d98 <__srefill_r+0x38>
 8003d8c:	2309      	movs	r3, #9
 8003d8e:	602b      	str	r3, [r5, #0]
 8003d90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	e7f2      	b.n	8003d7e <__srefill_r+0x1e>
 8003d98:	071a      	lsls	r2, r3, #28
 8003d9a:	d50b      	bpl.n	8003db4 <__srefill_r+0x54>
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f7ff fd78 	bl	8003894 <_fflush_r>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d1ea      	bne.n	8003d7e <__srefill_r+0x1e>
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	60a0      	str	r0, [r4, #8]
 8003dac:	f023 0308 	bic.w	r3, r3, #8
 8003db0:	81a3      	strh	r3, [r4, #12]
 8003db2:	61a0      	str	r0, [r4, #24]
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	f043 0304 	orr.w	r3, r3, #4
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	6923      	ldr	r3, [r4, #16]
 8003dbe:	b91b      	cbnz	r3, 8003dc8 <__srefill_r+0x68>
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 fbbe 	bl	8004544 <__smakebuf_r>
 8003dc8:	89a6      	ldrh	r6, [r4, #12]
 8003dca:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003dce:	07b3      	lsls	r3, r6, #30
 8003dd0:	d00f      	beq.n	8003df2 <__srefill_r+0x92>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <__srefill_r+0xe4>)
 8003dd6:	491c      	ldr	r1, [pc, #112]	; (8003e48 <__srefill_r+0xe8>)
 8003dd8:	481c      	ldr	r0, [pc, #112]	; (8003e4c <__srefill_r+0xec>)
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	f006 0609 	and.w	r6, r6, #9
 8003de0:	f7ff ff38 	bl	8003c54 <_fwalk_sglue>
 8003de4:	2e09      	cmp	r6, #9
 8003de6:	81a7      	strh	r7, [r4, #12]
 8003de8:	d103      	bne.n	8003df2 <__srefill_r+0x92>
 8003dea:	4621      	mov	r1, r4
 8003dec:	4628      	mov	r0, r5
 8003dee:	f7ff fccb 	bl	8003788 <__sflush_r>
 8003df2:	6922      	ldr	r2, [r4, #16]
 8003df4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003df6:	6963      	ldr	r3, [r4, #20]
 8003df8:	6a21      	ldr	r1, [r4, #32]
 8003dfa:	6022      	str	r2, [r4, #0]
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	47b0      	blx	r6
 8003e00:	2800      	cmp	r0, #0
 8003e02:	6060      	str	r0, [r4, #4]
 8003e04:	dc1c      	bgt.n	8003e40 <__srefill_r+0xe0>
 8003e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e0a:	bf17      	itett	ne
 8003e0c:	2200      	movne	r2, #0
 8003e0e:	f043 0320 	orreq.w	r3, r3, #32
 8003e12:	6062      	strne	r2, [r4, #4]
 8003e14:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003e18:	e7bc      	b.n	8003d94 <__srefill_r+0x34>
 8003e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e1c:	2900      	cmp	r1, #0
 8003e1e:	d0cd      	beq.n	8003dbc <__srefill_r+0x5c>
 8003e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e24:	4299      	cmp	r1, r3
 8003e26:	d002      	beq.n	8003e2e <__srefill_r+0xce>
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f000 fa37 	bl	800429c <_free_r>
 8003e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e30:	6063      	str	r3, [r4, #4]
 8003e32:	2000      	movs	r0, #0
 8003e34:	6360      	str	r0, [r4, #52]	; 0x34
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0c0      	beq.n	8003dbc <__srefill_r+0x5c>
 8003e3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e40:	2000      	movs	r0, #0
 8003e42:	e7fc      	b.n	8003e3e <__srefill_r+0xde>
 8003e44:	2000000c 	.word	0x2000000c
 8003e48:	08003d45 	.word	0x08003d45
 8003e4c:	20000018 	.word	0x20000018

08003e50 <__sread>:
 8003e50:	b510      	push	{r4, lr}
 8003e52:	460c      	mov	r4, r1
 8003e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e58:	f000 f9c0 	bl	80041dc <_read_r>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	bfab      	itete	ge
 8003e60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e62:	89a3      	ldrhlt	r3, [r4, #12]
 8003e64:	181b      	addge	r3, r3, r0
 8003e66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e6a:	bfac      	ite	ge
 8003e6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e6e:	81a3      	strhlt	r3, [r4, #12]
 8003e70:	bd10      	pop	{r4, pc}

08003e72 <__swrite>:
 8003e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e76:	461f      	mov	r7, r3
 8003e78:	898b      	ldrh	r3, [r1, #12]
 8003e7a:	05db      	lsls	r3, r3, #23
 8003e7c:	4605      	mov	r5, r0
 8003e7e:	460c      	mov	r4, r1
 8003e80:	4616      	mov	r6, r2
 8003e82:	d505      	bpl.n	8003e90 <__swrite+0x1e>
 8003e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e88:	2302      	movs	r3, #2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f000 f982 	bl	8004194 <_lseek_r>
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e9a:	81a3      	strh	r3, [r4, #12]
 8003e9c:	4632      	mov	r2, r6
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea6:	f000 b9ab 	b.w	8004200 <_write_r>

08003eaa <__sseek>:
 8003eaa:	b510      	push	{r4, lr}
 8003eac:	460c      	mov	r4, r1
 8003eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb2:	f000 f96f 	bl	8004194 <_lseek_r>
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	bf15      	itete	ne
 8003ebc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ec6:	81a3      	strheq	r3, [r4, #12]
 8003ec8:	bf18      	it	ne
 8003eca:	81a3      	strhne	r3, [r4, #12]
 8003ecc:	bd10      	pop	{r4, pc}

08003ece <__sclose>:
 8003ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed2:	f000 b94f 	b.w	8004174 <_close_r>

08003ed6 <__swbuf_r>:
 8003ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed8:	460e      	mov	r6, r1
 8003eda:	4614      	mov	r4, r2
 8003edc:	4605      	mov	r5, r0
 8003ede:	b118      	cbz	r0, 8003ee8 <__swbuf_r+0x12>
 8003ee0:	6a03      	ldr	r3, [r0, #32]
 8003ee2:	b90b      	cbnz	r3, 8003ee8 <__swbuf_r+0x12>
 8003ee4:	f7ff fdcc 	bl	8003a80 <__sinit>
 8003ee8:	69a3      	ldr	r3, [r4, #24]
 8003eea:	60a3      	str	r3, [r4, #8]
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	071a      	lsls	r2, r3, #28
 8003ef0:	d525      	bpl.n	8003f3e <__swbuf_r+0x68>
 8003ef2:	6923      	ldr	r3, [r4, #16]
 8003ef4:	b31b      	cbz	r3, 8003f3e <__swbuf_r+0x68>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	6922      	ldr	r2, [r4, #16]
 8003efa:	1a98      	subs	r0, r3, r2
 8003efc:	6963      	ldr	r3, [r4, #20]
 8003efe:	b2f6      	uxtb	r6, r6
 8003f00:	4283      	cmp	r3, r0
 8003f02:	4637      	mov	r7, r6
 8003f04:	dc04      	bgt.n	8003f10 <__swbuf_r+0x3a>
 8003f06:	4621      	mov	r1, r4
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f7ff fcc3 	bl	8003894 <_fflush_r>
 8003f0e:	b9e0      	cbnz	r0, 8003f4a <__swbuf_r+0x74>
 8003f10:	68a3      	ldr	r3, [r4, #8]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	60a3      	str	r3, [r4, #8]
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	6022      	str	r2, [r4, #0]
 8003f1c:	701e      	strb	r6, [r3, #0]
 8003f1e:	6962      	ldr	r2, [r4, #20]
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d004      	beq.n	8003f30 <__swbuf_r+0x5a>
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	07db      	lsls	r3, r3, #31
 8003f2a:	d506      	bpl.n	8003f3a <__swbuf_r+0x64>
 8003f2c:	2e0a      	cmp	r6, #10
 8003f2e:	d104      	bne.n	8003f3a <__swbuf_r+0x64>
 8003f30:	4621      	mov	r1, r4
 8003f32:	4628      	mov	r0, r5
 8003f34:	f7ff fcae 	bl	8003894 <_fflush_r>
 8003f38:	b938      	cbnz	r0, 8003f4a <__swbuf_r+0x74>
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f3e:	4621      	mov	r1, r4
 8003f40:	4628      	mov	r0, r5
 8003f42:	f000 f805 	bl	8003f50 <__swsetup_r>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d0d5      	beq.n	8003ef6 <__swbuf_r+0x20>
 8003f4a:	f04f 37ff 	mov.w	r7, #4294967295
 8003f4e:	e7f4      	b.n	8003f3a <__swbuf_r+0x64>

08003f50 <__swsetup_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <__swsetup_r+0xac>)
 8003f54:	4605      	mov	r5, r0
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	460c      	mov	r4, r1
 8003f5a:	b118      	cbz	r0, 8003f64 <__swsetup_r+0x14>
 8003f5c:	6a03      	ldr	r3, [r0, #32]
 8003f5e:	b90b      	cbnz	r3, 8003f64 <__swsetup_r+0x14>
 8003f60:	f7ff fd8e 	bl	8003a80 <__sinit>
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f6a:	0718      	lsls	r0, r3, #28
 8003f6c:	d422      	bmi.n	8003fb4 <__swsetup_r+0x64>
 8003f6e:	06d9      	lsls	r1, r3, #27
 8003f70:	d407      	bmi.n	8003f82 <__swsetup_r+0x32>
 8003f72:	2309      	movs	r3, #9
 8003f74:	602b      	str	r3, [r5, #0]
 8003f76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f7a:	81a3      	strh	r3, [r4, #12]
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	e034      	b.n	8003fec <__swsetup_r+0x9c>
 8003f82:	0758      	lsls	r0, r3, #29
 8003f84:	d512      	bpl.n	8003fac <__swsetup_r+0x5c>
 8003f86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f88:	b141      	cbz	r1, 8003f9c <__swsetup_r+0x4c>
 8003f8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f8e:	4299      	cmp	r1, r3
 8003f90:	d002      	beq.n	8003f98 <__swsetup_r+0x48>
 8003f92:	4628      	mov	r0, r5
 8003f94:	f000 f982 	bl	800429c <_free_r>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6363      	str	r3, [r4, #52]	; 0x34
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fa2:	81a3      	strh	r3, [r4, #12]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6063      	str	r3, [r4, #4]
 8003fa8:	6923      	ldr	r3, [r4, #16]
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f043 0308 	orr.w	r3, r3, #8
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	6923      	ldr	r3, [r4, #16]
 8003fb6:	b94b      	cbnz	r3, 8003fcc <__swsetup_r+0x7c>
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc2:	d003      	beq.n	8003fcc <__swsetup_r+0x7c>
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f000 fabc 	bl	8004544 <__smakebuf_r>
 8003fcc:	89a0      	ldrh	r0, [r4, #12]
 8003fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fd2:	f010 0301 	ands.w	r3, r0, #1
 8003fd6:	d00a      	beq.n	8003fee <__swsetup_r+0x9e>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60a3      	str	r3, [r4, #8]
 8003fdc:	6963      	ldr	r3, [r4, #20]
 8003fde:	425b      	negs	r3, r3
 8003fe0:	61a3      	str	r3, [r4, #24]
 8003fe2:	6923      	ldr	r3, [r4, #16]
 8003fe4:	b943      	cbnz	r3, 8003ff8 <__swsetup_r+0xa8>
 8003fe6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fea:	d1c4      	bne.n	8003f76 <__swsetup_r+0x26>
 8003fec:	bd38      	pop	{r3, r4, r5, pc}
 8003fee:	0781      	lsls	r1, r0, #30
 8003ff0:	bf58      	it	pl
 8003ff2:	6963      	ldrpl	r3, [r4, #20]
 8003ff4:	60a3      	str	r3, [r4, #8]
 8003ff6:	e7f4      	b.n	8003fe2 <__swsetup_r+0x92>
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	e7f7      	b.n	8003fec <__swsetup_r+0x9c>
 8003ffc:	20000064 	.word	0x20000064

08004000 <_fseeko_r>:
 8004000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004004:	460c      	mov	r4, r1
 8004006:	4617      	mov	r7, r2
 8004008:	461d      	mov	r5, r3
 800400a:	4606      	mov	r6, r0
 800400c:	b118      	cbz	r0, 8004016 <_fseeko_r+0x16>
 800400e:	6a03      	ldr	r3, [r0, #32]
 8004010:	b90b      	cbnz	r3, 8004016 <_fseeko_r+0x16>
 8004012:	f7ff fd35 	bl	8003a80 <__sinit>
 8004016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004018:	07d9      	lsls	r1, r3, #31
 800401a:	d405      	bmi.n	8004028 <_fseeko_r+0x28>
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	059a      	lsls	r2, r3, #22
 8004020:	d402      	bmi.n	8004028 <_fseeko_r+0x28>
 8004022:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004024:	f000 f92a 	bl	800427c <__retarget_lock_acquire_recursive>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800402e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8004032:	d103      	bne.n	800403c <_fseeko_r+0x3c>
 8004034:	4621      	mov	r1, r4
 8004036:	4630      	mov	r0, r6
 8004038:	f7ff fc2c 	bl	8003894 <_fflush_r>
 800403c:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8004040:	f1b8 0f00 	cmp.w	r8, #0
 8004044:	d109      	bne.n	800405a <_fseeko_r+0x5a>
 8004046:	231d      	movs	r3, #29
 8004048:	6033      	str	r3, [r6, #0]
 800404a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800404c:	07d9      	lsls	r1, r3, #31
 800404e:	d56e      	bpl.n	800412e <_fseeko_r+0x12e>
 8004050:	f04f 35ff 	mov.w	r5, #4294967295
 8004054:	4628      	mov	r0, r5
 8004056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800405a:	2d01      	cmp	r5, #1
 800405c:	d036      	beq.n	80040cc <_fseeko_r+0xcc>
 800405e:	f035 0302 	bics.w	r3, r5, #2
 8004062:	d162      	bne.n	800412a <_fseeko_r+0x12a>
 8004064:	6923      	ldr	r3, [r4, #16]
 8004066:	b91b      	cbnz	r3, 8004070 <_fseeko_r+0x70>
 8004068:	4621      	mov	r1, r4
 800406a:	4630      	mov	r0, r6
 800406c:	f000 fa6a 	bl	8004544 <__smakebuf_r>
 8004070:	4621      	mov	r1, r4
 8004072:	4630      	mov	r0, r6
 8004074:	f7ff fc0e 	bl	8003894 <_fflush_r>
 8004078:	2800      	cmp	r0, #0
 800407a:	d1e6      	bne.n	800404a <_fseeko_r+0x4a>
 800407c:	6a21      	ldr	r1, [r4, #32]
 800407e:	462b      	mov	r3, r5
 8004080:	463a      	mov	r2, r7
 8004082:	4630      	mov	r0, r6
 8004084:	47c0      	blx	r8
 8004086:	3001      	adds	r0, #1
 8004088:	d0df      	beq.n	800404a <_fseeko_r+0x4a>
 800408a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800408c:	b141      	cbz	r1, 80040a0 <_fseeko_r+0xa0>
 800408e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004092:	4299      	cmp	r1, r3
 8004094:	d002      	beq.n	800409c <_fseeko_r+0x9c>
 8004096:	4630      	mov	r0, r6
 8004098:	f000 f900 	bl	800429c <_free_r>
 800409c:	2300      	movs	r3, #0
 800409e:	6363      	str	r3, [r4, #52]	; 0x34
 80040a0:	6923      	ldr	r3, [r4, #16]
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	2600      	movs	r6, #0
 80040a8:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80040ac:	6066      	str	r6, [r4, #4]
 80040ae:	81a3      	strh	r3, [r4, #12]
 80040b0:	2208      	movs	r2, #8
 80040b2:	4631      	mov	r1, r6
 80040b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040b8:	f000 f842 	bl	8004140 <memset>
 80040bc:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80040be:	f015 0501 	ands.w	r5, r5, #1
 80040c2:	d13b      	bne.n	800413c <_fseeko_r+0x13c>
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	059b      	lsls	r3, r3, #22
 80040c8:	d4c4      	bmi.n	8004054 <_fseeko_r+0x54>
 80040ca:	e021      	b.n	8004110 <_fseeko_r+0x110>
 80040cc:	4621      	mov	r1, r4
 80040ce:	4630      	mov	r0, r6
 80040d0:	f7ff fbe0 	bl	8003894 <_fflush_r>
 80040d4:	89a2      	ldrh	r2, [r4, #12]
 80040d6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040da:	d00c      	beq.n	80040f6 <_fseeko_r+0xf6>
 80040dc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80040de:	89a3      	ldrh	r3, [r4, #12]
 80040e0:	075a      	lsls	r2, r3, #29
 80040e2:	d519      	bpl.n	8004118 <_fseeko_r+0x118>
 80040e4:	6863      	ldr	r3, [r4, #4]
 80040e6:	1aed      	subs	r5, r5, r3
 80040e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040ea:	b10b      	cbz	r3, 80040f0 <_fseeko_r+0xf0>
 80040ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040ee:	1aed      	subs	r5, r5, r3
 80040f0:	442f      	add	r7, r5
 80040f2:	2500      	movs	r5, #0
 80040f4:	e7b6      	b.n	8004064 <_fseeko_r+0x64>
 80040f6:	462b      	mov	r3, r5
 80040f8:	6a21      	ldr	r1, [r4, #32]
 80040fa:	4630      	mov	r0, r6
 80040fc:	47c0      	blx	r8
 80040fe:	1c43      	adds	r3, r0, #1
 8004100:	4605      	mov	r5, r0
 8004102:	d1ec      	bne.n	80040de <_fseeko_r+0xde>
 8004104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004106:	07d8      	lsls	r0, r3, #31
 8004108:	d4a2      	bmi.n	8004050 <_fseeko_r+0x50>
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	0599      	lsls	r1, r3, #22
 800410e:	d49f      	bmi.n	8004050 <_fseeko_r+0x50>
 8004110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004112:	f000 f8b4 	bl	800427e <__retarget_lock_release_recursive>
 8004116:	e79d      	b.n	8004054 <_fseeko_r+0x54>
 8004118:	0718      	lsls	r0, r3, #28
 800411a:	d5e9      	bpl.n	80040f0 <_fseeko_r+0xf0>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0e6      	beq.n	80040f0 <_fseeko_r+0xf0>
 8004122:	6922      	ldr	r2, [r4, #16]
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	441d      	add	r5, r3
 8004128:	e7e2      	b.n	80040f0 <_fseeko_r+0xf0>
 800412a:	2316      	movs	r3, #22
 800412c:	e78c      	b.n	8004048 <_fseeko_r+0x48>
 800412e:	89a3      	ldrh	r3, [r4, #12]
 8004130:	059a      	lsls	r2, r3, #22
 8004132:	d48d      	bmi.n	8004050 <_fseeko_r+0x50>
 8004134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004136:	f000 f8a2 	bl	800427e <__retarget_lock_release_recursive>
 800413a:	e789      	b.n	8004050 <_fseeko_r+0x50>
 800413c:	4635      	mov	r5, r6
 800413e:	e789      	b.n	8004054 <_fseeko_r+0x54>

08004140 <memset>:
 8004140:	4402      	add	r2, r0
 8004142:	4603      	mov	r3, r0
 8004144:	4293      	cmp	r3, r2
 8004146:	d100      	bne.n	800414a <memset+0xa>
 8004148:	4770      	bx	lr
 800414a:	f803 1b01 	strb.w	r1, [r3], #1
 800414e:	e7f9      	b.n	8004144 <memset+0x4>

08004150 <strncmp>:
 8004150:	b510      	push	{r4, lr}
 8004152:	b16a      	cbz	r2, 8004170 <strncmp+0x20>
 8004154:	3901      	subs	r1, #1
 8004156:	1884      	adds	r4, r0, r2
 8004158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800415c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004160:	429a      	cmp	r2, r3
 8004162:	d103      	bne.n	800416c <strncmp+0x1c>
 8004164:	42a0      	cmp	r0, r4
 8004166:	d001      	beq.n	800416c <strncmp+0x1c>
 8004168:	2a00      	cmp	r2, #0
 800416a:	d1f5      	bne.n	8004158 <strncmp+0x8>
 800416c:	1ad0      	subs	r0, r2, r3
 800416e:	bd10      	pop	{r4, pc}
 8004170:	4610      	mov	r0, r2
 8004172:	e7fc      	b.n	800416e <strncmp+0x1e>

08004174 <_close_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	4d06      	ldr	r5, [pc, #24]	; (8004190 <_close_r+0x1c>)
 8004178:	2300      	movs	r3, #0
 800417a:	4604      	mov	r4, r0
 800417c:	4608      	mov	r0, r1
 800417e:	602b      	str	r3, [r5, #0]
 8004180:	f7fc fcf3 	bl	8000b6a <_close>
 8004184:	1c43      	adds	r3, r0, #1
 8004186:	d102      	bne.n	800418e <_close_r+0x1a>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	b103      	cbz	r3, 800418e <_close_r+0x1a>
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	bd38      	pop	{r3, r4, r5, pc}
 8004190:	20000a70 	.word	0x20000a70

08004194 <_lseek_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4d07      	ldr	r5, [pc, #28]	; (80041b4 <_lseek_r+0x20>)
 8004198:	4604      	mov	r4, r0
 800419a:	4608      	mov	r0, r1
 800419c:	4611      	mov	r1, r2
 800419e:	2200      	movs	r2, #0
 80041a0:	602a      	str	r2, [r5, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f7fc fd08 	bl	8000bb8 <_lseek>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d102      	bne.n	80041b2 <_lseek_r+0x1e>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	b103      	cbz	r3, 80041b2 <_lseek_r+0x1e>
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
 80041b4:	20000a70 	.word	0x20000a70

080041b8 <_open_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4d07      	ldr	r5, [pc, #28]	; (80041d8 <_open_r+0x20>)
 80041bc:	4604      	mov	r4, r0
 80041be:	4608      	mov	r0, r1
 80041c0:	4611      	mov	r1, r2
 80041c2:	2200      	movs	r2, #0
 80041c4:	602a      	str	r2, [r5, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f7fc fd03 	bl	8000bd2 <_open>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d102      	bne.n	80041d6 <_open_r+0x1e>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b103      	cbz	r3, 80041d6 <_open_r+0x1e>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	20000a70 	.word	0x20000a70

080041dc <_read_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4d07      	ldr	r5, [pc, #28]	; (80041fc <_read_r+0x20>)
 80041e0:	4604      	mov	r4, r0
 80041e2:	4608      	mov	r0, r1
 80041e4:	4611      	mov	r1, r2
 80041e6:	2200      	movs	r2, #0
 80041e8:	602a      	str	r2, [r5, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f7fc fc84 	bl	8000af8 <_read>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_read_r+0x1e>
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_read_r+0x1e>
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	20000a70 	.word	0x20000a70

08004200 <_write_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	4d07      	ldr	r5, [pc, #28]	; (8004220 <_write_r+0x20>)
 8004204:	4604      	mov	r4, r0
 8004206:	4608      	mov	r0, r1
 8004208:	4611      	mov	r1, r2
 800420a:	2200      	movs	r2, #0
 800420c:	602a      	str	r2, [r5, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	f7fc fc8f 	bl	8000b32 <_write>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_write_r+0x1e>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b103      	cbz	r3, 800421e <_write_r+0x1e>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	20000a70 	.word	0x20000a70

08004224 <__errno>:
 8004224:	4b01      	ldr	r3, [pc, #4]	; (800422c <__errno+0x8>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000064 	.word	0x20000064

08004230 <__libc_init_array>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4d0d      	ldr	r5, [pc, #52]	; (8004268 <__libc_init_array+0x38>)
 8004234:	4c0d      	ldr	r4, [pc, #52]	; (800426c <__libc_init_array+0x3c>)
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	2600      	movs	r6, #0
 800423c:	42a6      	cmp	r6, r4
 800423e:	d109      	bne.n	8004254 <__libc_init_array+0x24>
 8004240:	4d0b      	ldr	r5, [pc, #44]	; (8004270 <__libc_init_array+0x40>)
 8004242:	4c0c      	ldr	r4, [pc, #48]	; (8004274 <__libc_init_array+0x44>)
 8004244:	f000 f9ec 	bl	8004620 <_init>
 8004248:	1b64      	subs	r4, r4, r5
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	2600      	movs	r6, #0
 800424e:	42a6      	cmp	r6, r4
 8004250:	d105      	bne.n	800425e <__libc_init_array+0x2e>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	f855 3b04 	ldr.w	r3, [r5], #4
 8004258:	4798      	blx	r3
 800425a:	3601      	adds	r6, #1
 800425c:	e7ee      	b.n	800423c <__libc_init_array+0xc>
 800425e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004262:	4798      	blx	r3
 8004264:	3601      	adds	r6, #1
 8004266:	e7f2      	b.n	800424e <__libc_init_array+0x1e>
 8004268:	080046b0 	.word	0x080046b0
 800426c:	080046b0 	.word	0x080046b0
 8004270:	080046b0 	.word	0x080046b0
 8004274:	080046b4 	.word	0x080046b4

08004278 <__retarget_lock_init_recursive>:
 8004278:	4770      	bx	lr

0800427a <__retarget_lock_close_recursive>:
 800427a:	4770      	bx	lr

0800427c <__retarget_lock_acquire_recursive>:
 800427c:	4770      	bx	lr

0800427e <__retarget_lock_release_recursive>:
 800427e:	4770      	bx	lr

08004280 <memcpy>:
 8004280:	440a      	add	r2, r1
 8004282:	4291      	cmp	r1, r2
 8004284:	f100 33ff 	add.w	r3, r0, #4294967295
 8004288:	d100      	bne.n	800428c <memcpy+0xc>
 800428a:	4770      	bx	lr
 800428c:	b510      	push	{r4, lr}
 800428e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004296:	4291      	cmp	r1, r2
 8004298:	d1f9      	bne.n	800428e <memcpy+0xe>
 800429a:	bd10      	pop	{r4, pc}

0800429c <_free_r>:
 800429c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800429e:	2900      	cmp	r1, #0
 80042a0:	d044      	beq.n	800432c <_free_r+0x90>
 80042a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a6:	9001      	str	r0, [sp, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f1a1 0404 	sub.w	r4, r1, #4
 80042ae:	bfb8      	it	lt
 80042b0:	18e4      	addlt	r4, r4, r3
 80042b2:	f000 f8df 	bl	8004474 <__malloc_lock>
 80042b6:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <_free_r+0x94>)
 80042b8:	9801      	ldr	r0, [sp, #4]
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	b933      	cbnz	r3, 80042cc <_free_r+0x30>
 80042be:	6063      	str	r3, [r4, #4]
 80042c0:	6014      	str	r4, [r2, #0]
 80042c2:	b003      	add	sp, #12
 80042c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042c8:	f000 b8da 	b.w	8004480 <__malloc_unlock>
 80042cc:	42a3      	cmp	r3, r4
 80042ce:	d908      	bls.n	80042e2 <_free_r+0x46>
 80042d0:	6825      	ldr	r5, [r4, #0]
 80042d2:	1961      	adds	r1, r4, r5
 80042d4:	428b      	cmp	r3, r1
 80042d6:	bf01      	itttt	eq
 80042d8:	6819      	ldreq	r1, [r3, #0]
 80042da:	685b      	ldreq	r3, [r3, #4]
 80042dc:	1949      	addeq	r1, r1, r5
 80042de:	6021      	streq	r1, [r4, #0]
 80042e0:	e7ed      	b.n	80042be <_free_r+0x22>
 80042e2:	461a      	mov	r2, r3
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	b10b      	cbz	r3, 80042ec <_free_r+0x50>
 80042e8:	42a3      	cmp	r3, r4
 80042ea:	d9fa      	bls.n	80042e2 <_free_r+0x46>
 80042ec:	6811      	ldr	r1, [r2, #0]
 80042ee:	1855      	adds	r5, r2, r1
 80042f0:	42a5      	cmp	r5, r4
 80042f2:	d10b      	bne.n	800430c <_free_r+0x70>
 80042f4:	6824      	ldr	r4, [r4, #0]
 80042f6:	4421      	add	r1, r4
 80042f8:	1854      	adds	r4, r2, r1
 80042fa:	42a3      	cmp	r3, r4
 80042fc:	6011      	str	r1, [r2, #0]
 80042fe:	d1e0      	bne.n	80042c2 <_free_r+0x26>
 8004300:	681c      	ldr	r4, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	6053      	str	r3, [r2, #4]
 8004306:	440c      	add	r4, r1
 8004308:	6014      	str	r4, [r2, #0]
 800430a:	e7da      	b.n	80042c2 <_free_r+0x26>
 800430c:	d902      	bls.n	8004314 <_free_r+0x78>
 800430e:	230c      	movs	r3, #12
 8004310:	6003      	str	r3, [r0, #0]
 8004312:	e7d6      	b.n	80042c2 <_free_r+0x26>
 8004314:	6825      	ldr	r5, [r4, #0]
 8004316:	1961      	adds	r1, r4, r5
 8004318:	428b      	cmp	r3, r1
 800431a:	bf04      	itt	eq
 800431c:	6819      	ldreq	r1, [r3, #0]
 800431e:	685b      	ldreq	r3, [r3, #4]
 8004320:	6063      	str	r3, [r4, #4]
 8004322:	bf04      	itt	eq
 8004324:	1949      	addeq	r1, r1, r5
 8004326:	6021      	streq	r1, [r4, #0]
 8004328:	6054      	str	r4, [r2, #4]
 800432a:	e7ca      	b.n	80042c2 <_free_r+0x26>
 800432c:	b003      	add	sp, #12
 800432e:	bd30      	pop	{r4, r5, pc}
 8004330:	20000a78 	.word	0x20000a78

08004334 <sbrk_aligned>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	4e0e      	ldr	r6, [pc, #56]	; (8004370 <sbrk_aligned+0x3c>)
 8004338:	460c      	mov	r4, r1
 800433a:	6831      	ldr	r1, [r6, #0]
 800433c:	4605      	mov	r5, r0
 800433e:	b911      	cbnz	r1, 8004346 <sbrk_aligned+0x12>
 8004340:	f000 f95e 	bl	8004600 <_sbrk_r>
 8004344:	6030      	str	r0, [r6, #0]
 8004346:	4621      	mov	r1, r4
 8004348:	4628      	mov	r0, r5
 800434a:	f000 f959 	bl	8004600 <_sbrk_r>
 800434e:	1c43      	adds	r3, r0, #1
 8004350:	d00a      	beq.n	8004368 <sbrk_aligned+0x34>
 8004352:	1cc4      	adds	r4, r0, #3
 8004354:	f024 0403 	bic.w	r4, r4, #3
 8004358:	42a0      	cmp	r0, r4
 800435a:	d007      	beq.n	800436c <sbrk_aligned+0x38>
 800435c:	1a21      	subs	r1, r4, r0
 800435e:	4628      	mov	r0, r5
 8004360:	f000 f94e 	bl	8004600 <_sbrk_r>
 8004364:	3001      	adds	r0, #1
 8004366:	d101      	bne.n	800436c <sbrk_aligned+0x38>
 8004368:	f04f 34ff 	mov.w	r4, #4294967295
 800436c:	4620      	mov	r0, r4
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	20000a7c 	.word	0x20000a7c

08004374 <_malloc_r>:
 8004374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004378:	1ccd      	adds	r5, r1, #3
 800437a:	f025 0503 	bic.w	r5, r5, #3
 800437e:	3508      	adds	r5, #8
 8004380:	2d0c      	cmp	r5, #12
 8004382:	bf38      	it	cc
 8004384:	250c      	movcc	r5, #12
 8004386:	2d00      	cmp	r5, #0
 8004388:	4607      	mov	r7, r0
 800438a:	db01      	blt.n	8004390 <_malloc_r+0x1c>
 800438c:	42a9      	cmp	r1, r5
 800438e:	d905      	bls.n	800439c <_malloc_r+0x28>
 8004390:	230c      	movs	r3, #12
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	2600      	movs	r6, #0
 8004396:	4630      	mov	r0, r6
 8004398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800439c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004470 <_malloc_r+0xfc>
 80043a0:	f000 f868 	bl	8004474 <__malloc_lock>
 80043a4:	f8d8 3000 	ldr.w	r3, [r8]
 80043a8:	461c      	mov	r4, r3
 80043aa:	bb5c      	cbnz	r4, 8004404 <_malloc_r+0x90>
 80043ac:	4629      	mov	r1, r5
 80043ae:	4638      	mov	r0, r7
 80043b0:	f7ff ffc0 	bl	8004334 <sbrk_aligned>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	4604      	mov	r4, r0
 80043b8:	d155      	bne.n	8004466 <_malloc_r+0xf2>
 80043ba:	f8d8 4000 	ldr.w	r4, [r8]
 80043be:	4626      	mov	r6, r4
 80043c0:	2e00      	cmp	r6, #0
 80043c2:	d145      	bne.n	8004450 <_malloc_r+0xdc>
 80043c4:	2c00      	cmp	r4, #0
 80043c6:	d048      	beq.n	800445a <_malloc_r+0xe6>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	4631      	mov	r1, r6
 80043cc:	4638      	mov	r0, r7
 80043ce:	eb04 0903 	add.w	r9, r4, r3
 80043d2:	f000 f915 	bl	8004600 <_sbrk_r>
 80043d6:	4581      	cmp	r9, r0
 80043d8:	d13f      	bne.n	800445a <_malloc_r+0xe6>
 80043da:	6821      	ldr	r1, [r4, #0]
 80043dc:	1a6d      	subs	r5, r5, r1
 80043de:	4629      	mov	r1, r5
 80043e0:	4638      	mov	r0, r7
 80043e2:	f7ff ffa7 	bl	8004334 <sbrk_aligned>
 80043e6:	3001      	adds	r0, #1
 80043e8:	d037      	beq.n	800445a <_malloc_r+0xe6>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	442b      	add	r3, r5
 80043ee:	6023      	str	r3, [r4, #0]
 80043f0:	f8d8 3000 	ldr.w	r3, [r8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d038      	beq.n	800446a <_malloc_r+0xf6>
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	42a2      	cmp	r2, r4
 80043fc:	d12b      	bne.n	8004456 <_malloc_r+0xe2>
 80043fe:	2200      	movs	r2, #0
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	e00f      	b.n	8004424 <_malloc_r+0xb0>
 8004404:	6822      	ldr	r2, [r4, #0]
 8004406:	1b52      	subs	r2, r2, r5
 8004408:	d41f      	bmi.n	800444a <_malloc_r+0xd6>
 800440a:	2a0b      	cmp	r2, #11
 800440c:	d917      	bls.n	800443e <_malloc_r+0xca>
 800440e:	1961      	adds	r1, r4, r5
 8004410:	42a3      	cmp	r3, r4
 8004412:	6025      	str	r5, [r4, #0]
 8004414:	bf18      	it	ne
 8004416:	6059      	strne	r1, [r3, #4]
 8004418:	6863      	ldr	r3, [r4, #4]
 800441a:	bf08      	it	eq
 800441c:	f8c8 1000 	streq.w	r1, [r8]
 8004420:	5162      	str	r2, [r4, r5]
 8004422:	604b      	str	r3, [r1, #4]
 8004424:	4638      	mov	r0, r7
 8004426:	f104 060b 	add.w	r6, r4, #11
 800442a:	f000 f829 	bl	8004480 <__malloc_unlock>
 800442e:	f026 0607 	bic.w	r6, r6, #7
 8004432:	1d23      	adds	r3, r4, #4
 8004434:	1af2      	subs	r2, r6, r3
 8004436:	d0ae      	beq.n	8004396 <_malloc_r+0x22>
 8004438:	1b9b      	subs	r3, r3, r6
 800443a:	50a3      	str	r3, [r4, r2]
 800443c:	e7ab      	b.n	8004396 <_malloc_r+0x22>
 800443e:	42a3      	cmp	r3, r4
 8004440:	6862      	ldr	r2, [r4, #4]
 8004442:	d1dd      	bne.n	8004400 <_malloc_r+0x8c>
 8004444:	f8c8 2000 	str.w	r2, [r8]
 8004448:	e7ec      	b.n	8004424 <_malloc_r+0xb0>
 800444a:	4623      	mov	r3, r4
 800444c:	6864      	ldr	r4, [r4, #4]
 800444e:	e7ac      	b.n	80043aa <_malloc_r+0x36>
 8004450:	4634      	mov	r4, r6
 8004452:	6876      	ldr	r6, [r6, #4]
 8004454:	e7b4      	b.n	80043c0 <_malloc_r+0x4c>
 8004456:	4613      	mov	r3, r2
 8004458:	e7cc      	b.n	80043f4 <_malloc_r+0x80>
 800445a:	230c      	movs	r3, #12
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4638      	mov	r0, r7
 8004460:	f000 f80e 	bl	8004480 <__malloc_unlock>
 8004464:	e797      	b.n	8004396 <_malloc_r+0x22>
 8004466:	6025      	str	r5, [r4, #0]
 8004468:	e7dc      	b.n	8004424 <_malloc_r+0xb0>
 800446a:	605b      	str	r3, [r3, #4]
 800446c:	deff      	udf	#255	; 0xff
 800446e:	bf00      	nop
 8004470:	20000a78 	.word	0x20000a78

08004474 <__malloc_lock>:
 8004474:	4801      	ldr	r0, [pc, #4]	; (800447c <__malloc_lock+0x8>)
 8004476:	f7ff bf01 	b.w	800427c <__retarget_lock_acquire_recursive>
 800447a:	bf00      	nop
 800447c:	20000a74 	.word	0x20000a74

08004480 <__malloc_unlock>:
 8004480:	4801      	ldr	r0, [pc, #4]	; (8004488 <__malloc_unlock+0x8>)
 8004482:	f7ff befc 	b.w	800427e <__retarget_lock_release_recursive>
 8004486:	bf00      	nop
 8004488:	20000a74 	.word	0x20000a74

0800448c <__sflags>:
 800448c:	780b      	ldrb	r3, [r1, #0]
 800448e:	2b72      	cmp	r3, #114	; 0x72
 8004490:	b530      	push	{r4, r5, lr}
 8004492:	d022      	beq.n	80044da <__sflags+0x4e>
 8004494:	2b77      	cmp	r3, #119	; 0x77
 8004496:	d024      	beq.n	80044e2 <__sflags+0x56>
 8004498:	2b61      	cmp	r3, #97	; 0x61
 800449a:	d027      	beq.n	80044ec <__sflags+0x60>
 800449c:	2316      	movs	r3, #22
 800449e:	6003      	str	r3, [r0, #0]
 80044a0:	2000      	movs	r0, #0
 80044a2:	bd30      	pop	{r4, r5, pc}
 80044a4:	2d62      	cmp	r5, #98	; 0x62
 80044a6:	d012      	beq.n	80044ce <__sflags+0x42>
 80044a8:	2d78      	cmp	r5, #120	; 0x78
 80044aa:	d013      	beq.n	80044d4 <__sflags+0x48>
 80044ac:	2d2b      	cmp	r5, #43	; 0x2b
 80044ae:	d107      	bne.n	80044c0 <__sflags+0x34>
 80044b0:	f020 001c 	bic.w	r0, r0, #28
 80044b4:	f023 0303 	bic.w	r3, r3, #3
 80044b8:	f040 0010 	orr.w	r0, r0, #16
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	d1ed      	bne.n	80044a4 <__sflags+0x18>
 80044c8:	4323      	orrs	r3, r4
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	e7e9      	b.n	80044a2 <__sflags+0x16>
 80044ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d2:	e7f5      	b.n	80044c0 <__sflags+0x34>
 80044d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044d8:	e7f2      	b.n	80044c0 <__sflags+0x34>
 80044da:	2400      	movs	r4, #0
 80044dc:	4623      	mov	r3, r4
 80044de:	2004      	movs	r0, #4
 80044e0:	e7ee      	b.n	80044c0 <__sflags+0x34>
 80044e2:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80044e6:	2301      	movs	r3, #1
 80044e8:	2008      	movs	r0, #8
 80044ea:	e7e9      	b.n	80044c0 <__sflags+0x34>
 80044ec:	f44f 7402 	mov.w	r4, #520	; 0x208
 80044f0:	2301      	movs	r3, #1
 80044f2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80044f6:	e7e3      	b.n	80044c0 <__sflags+0x34>

080044f8 <__swhatbuf_r>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	460c      	mov	r4, r1
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	2900      	cmp	r1, #0
 8004502:	b096      	sub	sp, #88	; 0x58
 8004504:	4615      	mov	r5, r2
 8004506:	461e      	mov	r6, r3
 8004508:	da0d      	bge.n	8004526 <__swhatbuf_r+0x2e>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004510:	f04f 0100 	mov.w	r1, #0
 8004514:	bf0c      	ite	eq
 8004516:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800451a:	2340      	movne	r3, #64	; 0x40
 800451c:	2000      	movs	r0, #0
 800451e:	6031      	str	r1, [r6, #0]
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	b016      	add	sp, #88	; 0x58
 8004524:	bd70      	pop	{r4, r5, r6, pc}
 8004526:	466a      	mov	r2, sp
 8004528:	f000 f848 	bl	80045bc <_fstat_r>
 800452c:	2800      	cmp	r0, #0
 800452e:	dbec      	blt.n	800450a <__swhatbuf_r+0x12>
 8004530:	9901      	ldr	r1, [sp, #4]
 8004532:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004536:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800453a:	4259      	negs	r1, r3
 800453c:	4159      	adcs	r1, r3
 800453e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004542:	e7eb      	b.n	800451c <__swhatbuf_r+0x24>

08004544 <__smakebuf_r>:
 8004544:	898b      	ldrh	r3, [r1, #12]
 8004546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004548:	079d      	lsls	r5, r3, #30
 800454a:	4606      	mov	r6, r0
 800454c:	460c      	mov	r4, r1
 800454e:	d507      	bpl.n	8004560 <__smakebuf_r+0x1c>
 8004550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	6123      	str	r3, [r4, #16]
 8004558:	2301      	movs	r3, #1
 800455a:	6163      	str	r3, [r4, #20]
 800455c:	b002      	add	sp, #8
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	ab01      	add	r3, sp, #4
 8004562:	466a      	mov	r2, sp
 8004564:	f7ff ffc8 	bl	80044f8 <__swhatbuf_r>
 8004568:	9900      	ldr	r1, [sp, #0]
 800456a:	4605      	mov	r5, r0
 800456c:	4630      	mov	r0, r6
 800456e:	f7ff ff01 	bl	8004374 <_malloc_r>
 8004572:	b948      	cbnz	r0, 8004588 <__smakebuf_r+0x44>
 8004574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004578:	059a      	lsls	r2, r3, #22
 800457a:	d4ef      	bmi.n	800455c <__smakebuf_r+0x18>
 800457c:	f023 0303 	bic.w	r3, r3, #3
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	e7e3      	b.n	8004550 <__smakebuf_r+0xc>
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	6020      	str	r0, [r4, #0]
 800458c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	9b00      	ldr	r3, [sp, #0]
 8004594:	6163      	str	r3, [r4, #20]
 8004596:	9b01      	ldr	r3, [sp, #4]
 8004598:	6120      	str	r0, [r4, #16]
 800459a:	b15b      	cbz	r3, 80045b4 <__smakebuf_r+0x70>
 800459c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a0:	4630      	mov	r0, r6
 80045a2:	f000 f81d 	bl	80045e0 <_isatty_r>
 80045a6:	b128      	cbz	r0, 80045b4 <__smakebuf_r+0x70>
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	431d      	orrs	r5, r3
 80045b8:	81a5      	strh	r5, [r4, #12]
 80045ba:	e7cf      	b.n	800455c <__smakebuf_r+0x18>

080045bc <_fstat_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4d07      	ldr	r5, [pc, #28]	; (80045dc <_fstat_r+0x20>)
 80045c0:	2300      	movs	r3, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	f7fc fada 	bl	8000b82 <_fstat>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d102      	bne.n	80045d8 <_fstat_r+0x1c>
 80045d2:	682b      	ldr	r3, [r5, #0]
 80045d4:	b103      	cbz	r3, 80045d8 <_fstat_r+0x1c>
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	20000a70 	.word	0x20000a70

080045e0 <_isatty_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4d06      	ldr	r5, [pc, #24]	; (80045fc <_isatty_r+0x1c>)
 80045e4:	2300      	movs	r3, #0
 80045e6:	4604      	mov	r4, r0
 80045e8:	4608      	mov	r0, r1
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	f7fc fad9 	bl	8000ba2 <_isatty>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d102      	bne.n	80045fa <_isatty_r+0x1a>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b103      	cbz	r3, 80045fa <_isatty_r+0x1a>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	20000a70 	.word	0x20000a70

08004600 <_sbrk_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4d06      	ldr	r5, [pc, #24]	; (800461c <_sbrk_r+0x1c>)
 8004604:	2300      	movs	r3, #0
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	f7fc faf0 	bl	8000bf0 <_sbrk>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d102      	bne.n	800461a <_sbrk_r+0x1a>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	b103      	cbz	r3, 800461a <_sbrk_r+0x1a>
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	20000a70 	.word	0x20000a70

08004620 <_init>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr

0800462c <_fini>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr
