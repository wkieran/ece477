
mic_tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  080092b4  080092b4  000192b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f4  080099f4  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099fc  080099fc  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a00  08009a00  00019a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08009a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000352c  200000b8  08009abc  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035e4  08009abc  000235e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e033  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b88  00000000  00000000  0002e15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00030ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f4  00000000  00000000  00031a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024590  00000000  00000000  0003241c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c52  00000000  00000000  000569ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccb11  00000000  00000000  0006a5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c2c  00000000  00000000  00137110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800929c 	.word	0x0800929c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0800929c 	.word	0x0800929c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <sd_card_init>:
static uint32_t wav_file_size;
static uint8_t first_time = 0;



void sd_card_init(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	//	mounting an sd card
//	sd_result = f_mount(&sdCard,SDPath, 1);
	sd_result = f_mount(&sdCard, USERPath, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	490c      	ldr	r1, [pc, #48]	; (80005e4 <sd_card_init+0x38>)
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <sd_card_init+0x3c>)
 80005b6:	f006 ff4b 	bl	8007450 <f_mount>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <sd_card_init+0x40>)
 80005c0:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <sd_card_init+0x40>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d006      	beq.n	80005d8 <sd_card_init+0x2c>
	{
		printf("Error mounting SD Card: %d \n", sd_result);
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <sd_card_init+0x40>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <sd_card_init+0x44>)
 80005d2:	f007 ff93 	bl	80084fc <iprintf>
		while(1);
 80005d6:	e7fe      	b.n	80005d6 <sd_card_init+0x2a>
	}
	else
	{
		printf("Succeeded mounting SD Card\n");
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <sd_card_init+0x48>)
 80005da:	f007 fff5 	bl	80085c8 <puts>
	}
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20003260 	.word	0x20003260
 80005e8:	200000d8 	.word	0x200000d8
 80005ec:	200000d4 	.word	0x200000d4
 80005f0:	080092b4 	.word	0x080092b4
 80005f4:	080092d4 	.word	0x080092d4

080005f8 <start_recording>:


void start_recording(uint32_t frequency){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	static char file_name[] = "w_000.wav";
	static uint8_t file_counter = 10;
	int file_number_digits = file_counter;
 8000600:	4b4b      	ldr	r3, [pc, #300]	; (8000730 <start_recording+0x138>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t)frequency;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b48      	ldr	r3, [pc, #288]	; (8000734 <start_recording+0x13c>)
 8000612:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b46      	ldr	r3, [pc, #280]	; (8000734 <start_recording+0x13c>)
 800061c:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b43      	ldr	r3, [pc, #268]	; (8000734 <start_recording+0x13c>)
 8000626:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	0e1b      	lsrs	r3, r3, #24
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b41      	ldr	r3, [pc, #260]	; (8000734 <start_recording+0x13c>)
 8000630:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b3f      	ldr	r3, [pc, #252]	; (8000734 <start_recording+0x13c>)
 8000638:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b3c      	ldr	r3, [pc, #240]	; (8000734 <start_recording+0x13c>)
 8000642:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	0c1b      	lsrs	r3, r3, #16
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <start_recording+0x13c>)
 800064c:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	0e1b      	lsrs	r3, r3, #24
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b37      	ldr	r3, [pc, #220]	; (8000734 <start_recording+0x13c>)
 8000656:	77da      	strb	r2, [r3, #31]

	// defining a wave file name
	file_name[4] = file_number_digits%10 + 48;
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4b37      	ldr	r3, [pc, #220]	; (8000738 <start_recording+0x140>)
 800065c:	fb83 1302 	smull	r1, r3, r3, r2
 8000660:	1099      	asrs	r1, r3, #2
 8000662:	17d3      	asrs	r3, r2, #31
 8000664:	1ac9      	subs	r1, r1, r3
 8000666:	460b      	mov	r3, r1
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	1ad1      	subs	r1, r2, r3
 8000670:	b2cb      	uxtb	r3, r1
 8000672:	3330      	adds	r3, #48	; 0x30
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b31      	ldr	r3, [pc, #196]	; (800073c <start_recording+0x144>)
 8000678:	711a      	strb	r2, [r3, #4]
	file_number_digits /= 10;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	4a2e      	ldr	r2, [pc, #184]	; (8000738 <start_recording+0x140>)
 800067e:	fb82 1203 	smull	r1, r2, r2, r3
 8000682:	1092      	asrs	r2, r2, #2
 8000684:	17db      	asrs	r3, r3, #31
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	60fb      	str	r3, [r7, #12]
	file_name[3] = file_number_digits%10 + 48;
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <start_recording+0x140>)
 800068e:	fb83 1302 	smull	r1, r3, r3, r2
 8000692:	1099      	asrs	r1, r3, #2
 8000694:	17d3      	asrs	r3, r2, #31
 8000696:	1ac9      	subs	r1, r1, r3
 8000698:	460b      	mov	r3, r1
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	440b      	add	r3, r1
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	1ad1      	subs	r1, r2, r3
 80006a2:	b2cb      	uxtb	r3, r1
 80006a4:	3330      	adds	r3, #48	; 0x30
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <start_recording+0x144>)
 80006aa:	70da      	strb	r2, [r3, #3]
	file_number_digits /= 10;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4a22      	ldr	r2, [pc, #136]	; (8000738 <start_recording+0x140>)
 80006b0:	fb82 1203 	smull	r1, r2, r2, r3
 80006b4:	1092      	asrs	r2, r2, #2
 80006b6:	17db      	asrs	r3, r3, #31
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	60fb      	str	r3, [r7, #12]
	file_name[2] = file_number_digits%10 + 48;
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <start_recording+0x140>)
 80006c0:	fb83 1302 	smull	r1, r3, r3, r2
 80006c4:	1099      	asrs	r1, r3, #2
 80006c6:	17d3      	asrs	r3, r2, #31
 80006c8:	1ac9      	subs	r1, r1, r3
 80006ca:	460b      	mov	r3, r1
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	440b      	add	r3, r1
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	1ad1      	subs	r1, r2, r3
 80006d4:	b2cb      	uxtb	r3, r1
 80006d6:	3330      	adds	r3, #48	; 0x30
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <start_recording+0x144>)
 80006dc:	709a      	strb	r2, [r3, #2]
	printf("file name %s \n", file_name);
 80006de:	4917      	ldr	r1, [pc, #92]	; (800073c <start_recording+0x144>)
 80006e0:	4817      	ldr	r0, [pc, #92]	; (8000740 <start_recording+0x148>)
 80006e2:	f007 ff0b 	bl	80084fc <iprintf>
	file_counter++;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <start_recording+0x138>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <start_recording+0x138>)
 80006f0:	701a      	strb	r2, [r3, #0]

	// creating a file
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 80006f2:	220a      	movs	r2, #10
 80006f4:	4911      	ldr	r1, [pc, #68]	; (800073c <start_recording+0x144>)
 80006f6:	4813      	ldr	r0, [pc, #76]	; (8000744 <start_recording+0x14c>)
 80006f8:	f006 fef0 	bl	80074dc <f_open>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <start_recording+0x150>)
 8000702:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <start_recording+0x150>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d006      	beq.n	800071a <start_recording+0x122>
	{
		printf("error in creating a file: %d \n", sd_result);
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <start_recording+0x150>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <start_recording+0x154>)
 8000714:	f007 fef2 	bl	80084fc <iprintf>
		while(1);
 8000718:	e7fe      	b.n	8000718 <start_recording+0x120>
	}
	else
	{
		printf("succeeded in opening a file \n");
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <start_recording+0x158>)
 800071c:	f007 ff54 	bl	80085c8 <puts>
	}
	wav_file_size = 0;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <start_recording+0x15c>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000002c 	.word	0x2000002c
 8000734:	20000000 	.word	0x20000000
 8000738:	66666667 	.word	0x66666667
 800073c:	20000030 	.word	0x20000030
 8000740:	080092f0 	.word	0x080092f0
 8000744:	20001110 	.word	0x20001110
 8000748:	200000d4 	.word	0x200000d4
 800074c:	08009300 	.word	0x08009300
 8000750:	08009320 	.word	0x08009320
 8000754:	20002140 	.word	0x20002140

08000758 <write2wave_file>:


void write2wave_file(uint8_t *data, uint16_t data_size)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	printf("w\n");
 8000764:	481d      	ldr	r0, [pc, #116]	; (80007dc <write2wave_file+0x84>)
 8000766:	f007 ff2f 	bl	80085c8 <puts>
	if(first_time == 0)
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <write2wave_file+0x88>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d113      	bne.n	800079a <write2wave_file+0x42>
	{
		for(int i = 0; i < 44; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e00a      	b.n	800078e <write2wave_file+0x36>
		{
			*(data + i) = wav_file_header[i];
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	4919      	ldr	r1, [pc, #100]	; (80007e4 <write2wave_file+0x8c>)
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	440a      	add	r2, r1
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3301      	adds	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b2b      	cmp	r3, #43	; 0x2b
 8000792:	ddf1      	ble.n	8000778 <write2wave_file+0x20>
		}
		first_time = 1;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <write2wave_file+0x88>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 800079a:	887a      	ldrh	r2, [r7, #2]
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <write2wave_file+0x90>)
 80007a4:	f007 f866 	bl	8007874 <f_write>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <write2wave_file+0x94>)
 80007ae:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <write2wave_file+0x94>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d006      	beq.n	80007c6 <write2wave_file+0x6e>
	{
		printf("error in writing to the file: %d \n", sd_result);
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <write2wave_file+0x94>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <write2wave_file+0x98>)
 80007c0:	f007 fe9c 	bl	80084fc <iprintf>
		while(1);
 80007c4:	e7fe      	b.n	80007c4 <write2wave_file+0x6c>
	}
	wav_file_size += data_size;
 80007c6:	887a      	ldrh	r2, [r7, #2]
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <write2wave_file+0x9c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <write2wave_file+0x9c>)
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	08009340 	.word	0x08009340
 80007e0:	20002144 	.word	0x20002144
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20001110 	.word	0x20001110
 80007ec:	200000d4 	.word	0x200000d4
 80007f0:	08009344 	.word	0x08009344
 80007f4:	20002140 	.word	0x20002140

080007f8 <stop_recording>:


void stop_recording(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <stop_recording+0xc4>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3b08      	subs	r3, #8
 8000804:	4a2d      	ldr	r2, [pc, #180]	; (80008bc <stop_recording+0xc4>)
 8000806:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000808:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <stop_recording+0xc4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <stop_recording+0xc8>)
 8000810:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <stop_recording+0xc4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <stop_recording+0xc8>)
 800081c:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <stop_recording+0xc4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	0c1b      	lsrs	r3, r3, #16
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <stop_recording+0xc8>)
 8000828:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <stop_recording+0xc4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	0e1b      	lsrs	r3, r3, #24
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <stop_recording+0xc8>)
 8000834:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <stop_recording+0xc4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3b24      	subs	r3, #36	; 0x24
 800083c:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <stop_recording+0xc4>)
 800083e:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <stop_recording+0xc4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <stop_recording+0xc8>)
 8000848:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <stop_recording+0xc4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <stop_recording+0xc8>)
 8000856:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <stop_recording+0xc4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <stop_recording+0xc8>)
 8000864:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <stop_recording+0xc4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0e1b      	lsrs	r3, r3, #24
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <stop_recording+0xc8>)
 8000872:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 8000876:	2100      	movs	r1, #0
 8000878:	4812      	ldr	r0, [pc, #72]	; (80008c4 <stop_recording+0xcc>)
 800087a:	f007 fa37 	bl	8007cec <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800087e:	1dbb      	adds	r3, r7, #6
 8000880:	222c      	movs	r2, #44	; 0x2c
 8000882:	490f      	ldr	r1, [pc, #60]	; (80008c0 <stop_recording+0xc8>)
 8000884:	480f      	ldr	r0, [pc, #60]	; (80008c4 <stop_recording+0xcc>)
 8000886:	f006 fff5 	bl	8007874 <f_write>
	if(sd_result != 0)
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <stop_recording+0xd0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d006      	beq.n	80008a0 <stop_recording+0xa8>
	{
		printf("error in updating the first sector: %d \n", sd_result);
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <stop_recording+0xd0>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <stop_recording+0xd4>)
 800089a:	f007 fe2f 	bl	80084fc <iprintf>
		while(1);
 800089e:	e7fe      	b.n	800089e <stop_recording+0xa6>
	}
	f_close(&wavFile);
 80008a0:	4808      	ldr	r0, [pc, #32]	; (80008c4 <stop_recording+0xcc>)
 80008a2:	f007 f9f9 	bl	8007c98 <f_close>
	first_time = 0;
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <stop_recording+0xd8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
	printf("closed the file \n");
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <stop_recording+0xdc>)
 80008ae:	f007 fe8b 	bl	80085c8 <puts>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20002140 	.word	0x20002140
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20001110 	.word	0x20001110
 80008c8:	200000d4 	.word	0x200000d4
 80008cc:	08009368 	.word	0x08009368
 80008d0:	20002144 	.word	0x20002144
 80008d4:	08009394 	.word	0x08009394

080008d8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <SELECT+0x1c>)
 80008e4:	f002 f86e 	bl	80029c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f001 f9c1 	bl	8001c70 <HAL_Delay>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40020000 	.word	0x40020000

080008f8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <DESELECT+0x1c>)
 8000904:	f002 f85e 	bl	80029c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f001 f9b1 	bl	8001c70 <HAL_Delay>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40020000 	.word	0x40020000

08000918 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000922:	bf00      	nop
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <SPI_TxByte+0x30>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	2b02      	cmp	r3, #2
 8000930:	d1f8      	bne.n	8000924 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000932:	1df9      	adds	r1, r7, #7
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	2201      	movs	r2, #1
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <SPI_TxByte+0x30>)
 800093a:	f003 ff98 	bl	800486e <HAL_SPI_Transmit>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200021f4 	.word	0x200021f4

0800094c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000958:	bf00      	nop
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <SPI_TxBuffer+0x30>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	2b02      	cmp	r3, #2
 8000966:	d1f8      	bne.n	800095a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000968:	887a      	ldrh	r2, [r7, #2]
 800096a:	2364      	movs	r3, #100	; 0x64
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <SPI_TxBuffer+0x30>)
 8000970:	f003 ff7d 	bl	800486e <HAL_SPI_Transmit>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200021f4 	.word	0x200021f4

08000980 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000986:	23ff      	movs	r3, #255	; 0xff
 8000988:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800098a:	bf00      	nop
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <SPI_RxByte+0x34>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	2b02      	cmp	r3, #2
 8000998:	d1f8      	bne.n	800098c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800099a:	1dba      	adds	r2, r7, #6
 800099c:	1df9      	adds	r1, r7, #7
 800099e:	2364      	movs	r3, #100	; 0x64
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2301      	movs	r3, #1
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <SPI_RxByte+0x34>)
 80009a6:	f004 f89e 	bl	8004ae6 <HAL_SPI_TransmitReceive>

  return data;
 80009aa:	79bb      	ldrb	r3, [r7, #6]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200021f4 	.word	0x200021f4

080009b8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80009c0:	f7ff ffde 	bl	8000980 <SPI_RxByte>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	701a      	strb	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <SD_ReadyWait+0x30>)
 80009dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009e0:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80009e2:	f7ff ffcd 	bl	8000980 <SPI_RxByte>
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2bff      	cmp	r3, #255	; 0xff
 80009ee:	d003      	beq.n	80009f8 <SD_ReadyWait+0x24>
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SD_ReadyWait+0x30>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f4      	bne.n	80009e2 <SD_ReadyWait+0xe>

  return res;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20002148 	.word	0x20002148

08000a08 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000a0e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000a12:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000a14:	f7ff ff70 	bl	80008f8 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	e005      	b.n	8000a2a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000a1e:	20ff      	movs	r0, #255	; 0xff
 8000a20:	f7ff ff7a 	bl	8000918 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	3301      	adds	r3, #1
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	2b09      	cmp	r3, #9
 8000a2e:	ddf6      	ble.n	8000a1e <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000a30:	f7ff ff52 	bl	80008d8 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000a34:	2340      	movs	r3, #64	; 0x40
 8000a36:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000a48:	2395      	movs	r3, #149	; 0x95
 8000a4a:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2106      	movs	r1, #6
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff7b 	bl	800094c <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000a56:	e002      	b.n	8000a5e <SD_PowerOn+0x56>
  {
    cnt--;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000a5e:	f7ff ff8f 	bl	8000980 <SPI_RxByte>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d002      	beq.n	8000a6e <SD_PowerOn+0x66>
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1f4      	bne.n	8000a58 <SD_PowerOn+0x50>
  }

  DESELECT();
 8000a6e:	f7ff ff43 	bl	80008f8 <DESELECT>
  SPI_TxByte(0XFF);
 8000a72:	20ff      	movs	r0, #255	; 0xff
 8000a74:	f7ff ff50 	bl	8000918 <SPI_TxByte>

  PowerFlag = 1;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <SD_PowerOn+0x80>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000214b 	.word	0x2000214b

08000a8c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <SD_PowerOff+0x14>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	2000214b 	.word	0x2000214b

08000aa4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <SD_CheckPower+0x14>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	2000214b 	.word	0x2000214b

08000abc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <SD_RxDataBlock+0x58>)
 8000ac8:	22c8      	movs	r2, #200	; 0xc8
 8000aca:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000acc:	f7ff ff58 	bl	8000980 <SPI_RxByte>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2bff      	cmp	r3, #255	; 0xff
 8000ad8:	d103      	bne.n	8000ae2 <SD_RxDataBlock+0x26>
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <SD_RxDataBlock+0x58>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1f4      	bne.n	8000acc <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2bfe      	cmp	r3, #254	; 0xfe
 8000ae6:	d001      	beq.n	8000aec <SD_RxDataBlock+0x30>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e00f      	b.n	8000b0c <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff60 	bl	80009b8 <SPI_RxBytePtr>
  } while(len--);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	1e5a      	subs	r2, r3, #1
 8000afc:	603a      	str	r2, [r7, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1f4      	bne.n	8000aec <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000b02:	f7ff ff3d 	bl	8000980 <SPI_RxByte>
  SPI_RxByte();
 8000b06:	f7ff ff3b 	bl	8000980 <SPI_RxByte>

  return TRUE;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20002146 	.word	0x20002146

08000b18 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000b28:	f7ff ff54 	bl	80009d4 <SD_ReadyWait>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2bff      	cmp	r3, #255	; 0xff
 8000b30:	d001      	beq.n	8000b36 <SD_TxDataBlock+0x1e>
 8000b32:	2300      	movs	r3, #0
 8000b34:	e02f      	b.n	8000b96 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000b36:	78fb      	ldrb	r3, [r7, #3]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff feed 	bl	8000918 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	2bfd      	cmp	r3, #253	; 0xfd
 8000b42:	d020      	beq.n	8000b86 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff feff 	bl	800094c <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000b4e:	f7ff ff17 	bl	8000980 <SPI_RxByte>
    SPI_RxByte();
 8000b52:	f7ff ff15 	bl	8000980 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000b56:	e00b      	b.n	8000b70 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000b58:	f7ff ff12 	bl	8000980 <SPI_RxByte>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	f003 031f 	and.w	r3, r3, #31
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d006      	beq.n	8000b78 <SD_TxDataBlock+0x60>
      i++;
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000b70:	7bbb      	ldrb	r3, [r7, #14]
 8000b72:	2b40      	cmp	r3, #64	; 0x40
 8000b74:	d9f0      	bls.n	8000b58 <SD_TxDataBlock+0x40>
 8000b76:	e000      	b.n	8000b7a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000b78:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ff00 	bl	8000980 <SPI_RxByte>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0fa      	beq.n	8000b7c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	f003 031f 	and.w	r3, r3, #31
 8000b8c:	2b05      	cmp	r3, #5
 8000b8e:	d101      	bne.n	8000b94 <SD_TxDataBlock+0x7c>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	6039      	str	r1, [r7, #0]
 8000ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000baa:	f7ff ff13 	bl	80009d4 <SD_ReadyWait>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2bff      	cmp	r3, #255	; 0xff
 8000bb2:	d001      	beq.n	8000bb8 <SD_SendCmd+0x1a>
 8000bb4:	23ff      	movs	r3, #255	; 0xff
 8000bb6:	e042      	b.n	8000c3e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff feac 	bl	8000918 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	0e1b      	lsrs	r3, r3, #24
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fea6 	bl	8000918 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	0c1b      	lsrs	r3, r3, #16
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fea0 	bl	8000918 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fe9a 	bl	8000918 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fe95 	bl	8000918 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b40      	cmp	r3, #64	; 0x40
 8000bf2:	d102      	bne.n	8000bfa <SD_SendCmd+0x5c>
 8000bf4:	2395      	movs	r3, #149	; 0x95
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e007      	b.n	8000c0a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b48      	cmp	r3, #72	; 0x48
 8000bfe:	d102      	bne.n	8000c06 <SD_SendCmd+0x68>
 8000c00:	2387      	movs	r3, #135	; 0x87
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e001      	b.n	8000c0a <SD_SendCmd+0x6c>
  else crc = 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fe83 	bl	8000918 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b4c      	cmp	r3, #76	; 0x4c
 8000c16:	d101      	bne.n	8000c1c <SD_SendCmd+0x7e>
 8000c18:	f7ff feb2 	bl	8000980 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000c20:	f7ff feae 	bl	8000980 <SPI_RxByte>
 8000c24:	4603      	mov	r3, r0
 8000c26:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000c28:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	da05      	bge.n	8000c3c <SD_SendCmd+0x9e>
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	73bb      	strb	r3, [r7, #14]
 8000c36:	7bbb      	ldrb	r3, [r7, #14]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f1      	bne.n	8000c20 <SD_SendCmd+0x82>

  return res;
 8000c3c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SD_disk_initialize+0x14>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e0d1      	b.n	8000e00 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000c5c:	4b6a      	ldr	r3, [pc, #424]	; (8000e08 <SD_disk_initialize+0x1c0>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <SD_disk_initialize+0x2a>
 8000c6a:	4b67      	ldr	r3, [pc, #412]	; (8000e08 <SD_disk_initialize+0x1c0>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	e0c6      	b.n	8000e00 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000c72:	f7ff fec9 	bl	8000a08 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000c76:	f7ff fe2f 	bl	80008d8 <SELECT>

  /* check disk type */
  type = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2040      	movs	r0, #64	; 0x40
 8000c82:	f7ff ff8c 	bl	8000b9e <SD_SendCmd>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	f040 80a1 	bne.w	8000dd0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000c8e:	4b5f      	ldr	r3, [pc, #380]	; (8000e0c <SD_disk_initialize+0x1c4>)
 8000c90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c94:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000c96:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c9a:	2048      	movs	r0, #72	; 0x48
 8000c9c:	f7ff ff7f 	bl	8000b9e <SD_SendCmd>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d155      	bne.n	8000d52 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e00c      	b.n	8000cc6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000cac:	7bfc      	ldrb	r4, [r7, #15]
 8000cae:	f7ff fe67 	bl	8000980 <SPI_RxByte>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f104 0310 	add.w	r3, r4, #16
 8000cba:	443b      	add	r3, r7
 8000cbc:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d9ef      	bls.n	8000cac <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000ccc:	7abb      	ldrb	r3, [r7, #10]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d17e      	bne.n	8000dd0 <SD_disk_initialize+0x188>
 8000cd2:	7afb      	ldrb	r3, [r7, #11]
 8000cd4:	2baa      	cmp	r3, #170	; 0xaa
 8000cd6:	d17b      	bne.n	8000dd0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2077      	movs	r0, #119	; 0x77
 8000cdc:	f7ff ff5f 	bl	8000b9e <SD_SendCmd>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d807      	bhi.n	8000cf6 <SD_disk_initialize+0xae>
 8000ce6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000cea:	2069      	movs	r0, #105	; 0x69
 8000cec:	f7ff ff57 	bl	8000b9e <SD_SendCmd>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d004      	beq.n	8000d00 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000cf6:	4b45      	ldr	r3, [pc, #276]	; (8000e0c <SD_disk_initialize+0x1c4>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1ec      	bne.n	8000cd8 <SD_disk_initialize+0x90>
 8000cfe:	e000      	b.n	8000d02 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d00:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d02:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <SD_disk_initialize+0x1c4>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d062      	beq.n	8000dd0 <SD_disk_initialize+0x188>
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	207a      	movs	r0, #122	; 0x7a
 8000d0e:	f7ff ff46 	bl	8000b9e <SD_SendCmd>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d15b      	bne.n	8000dd0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e00c      	b.n	8000d38 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000d1e:	7bfc      	ldrb	r4, [r7, #15]
 8000d20:	f7ff fe2e 	bl	8000980 <SPI_RxByte>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	f104 0310 	add.w	r3, r4, #16
 8000d2c:	443b      	add	r3, r7
 8000d2e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	3301      	adds	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d9ef      	bls.n	8000d1e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000d3e:	7a3b      	ldrb	r3, [r7, #8]
 8000d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SD_disk_initialize+0x104>
 8000d48:	230c      	movs	r3, #12
 8000d4a:	e000      	b.n	8000d4e <SD_disk_initialize+0x106>
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	73bb      	strb	r3, [r7, #14]
 8000d50:	e03e      	b.n	8000dd0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d52:	2100      	movs	r1, #0
 8000d54:	2077      	movs	r0, #119	; 0x77
 8000d56:	f7ff ff22 	bl	8000b9e <SD_SendCmd>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d808      	bhi.n	8000d72 <SD_disk_initialize+0x12a>
 8000d60:	2100      	movs	r1, #0
 8000d62:	2069      	movs	r0, #105	; 0x69
 8000d64:	f7ff ff1b 	bl	8000b9e <SD_SendCmd>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d801      	bhi.n	8000d72 <SD_disk_initialize+0x12a>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e000      	b.n	8000d74 <SD_disk_initialize+0x12c>
 8000d72:	2301      	movs	r3, #1
 8000d74:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d10e      	bne.n	8000d9a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2077      	movs	r0, #119	; 0x77
 8000d80:	f7ff ff0d 	bl	8000b9e <SD_SendCmd>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d80e      	bhi.n	8000da8 <SD_disk_initialize+0x160>
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2069      	movs	r0, #105	; 0x69
 8000d8e:	f7ff ff06 	bl	8000b9e <SD_SendCmd>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d107      	bne.n	8000da8 <SD_disk_initialize+0x160>
 8000d98:	e00c      	b.n	8000db4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2041      	movs	r0, #65	; 0x41
 8000d9e:	f7ff fefe 	bl	8000b9e <SD_SendCmd>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <SD_disk_initialize+0x1c4>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e2      	bne.n	8000d76 <SD_disk_initialize+0x12e>
 8000db0:	e000      	b.n	8000db4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000db2:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <SD_disk_initialize+0x1c4>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <SD_disk_initialize+0x184>
 8000dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc0:	2050      	movs	r0, #80	; 0x50
 8000dc2:	f7ff feec 	bl	8000b9e <SD_SendCmd>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SD_disk_initialize+0x188>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <SD_disk_initialize+0x1c8>)
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000dd6:	f7ff fd8f 	bl	80008f8 <DESELECT>
  SPI_RxByte();
 8000dda:	f7ff fdd1 	bl	8000980 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d008      	beq.n	8000df6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <SD_disk_initialize+0x1c0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f023 0301 	bic.w	r3, r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SD_disk_initialize+0x1c0>)
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e001      	b.n	8000dfa <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000df6:	f7ff fe49 	bl	8000a8c <SD_PowerOff>
  }

  return Stat;
 8000dfa:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <SD_disk_initialize+0x1c0>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b2db      	uxtb	r3, r3
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	2000003a 	.word	0x2000003a
 8000e0c:	20002146 	.word	0x20002146
 8000e10:	2000214a 	.word	0x2000214a

08000e14 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SD_disk_status+0x14>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e002      	b.n	8000e2e <SD_disk_status+0x1a>
  return Stat;
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SD_disk_status+0x28>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2000003a 	.word	0x2000003a

08000e40 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <SD_disk_read+0x1c>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <SD_disk_read+0x20>
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	e051      	b.n	8000f04 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <SD_disk_read+0xcc>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SD_disk_read+0x32>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e048      	b.n	8000f04 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <SD_disk_read+0xd0>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <SD_disk_read+0x44>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	025b      	lsls	r3, r3, #9
 8000e82:	607b      	str	r3, [r7, #4]

  SELECT();
 8000e84:	f7ff fd28 	bl	80008d8 <SELECT>

  if (count == 1)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d111      	bne.n	8000eb2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	2051      	movs	r0, #81	; 0x51
 8000e92:	f7ff fe84 	bl	8000b9e <SD_SendCmd>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d129      	bne.n	8000ef0 <SD_disk_read+0xb0>
 8000e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea0:	68b8      	ldr	r0, [r7, #8]
 8000ea2:	f7ff fe0b 	bl	8000abc <SD_RxDataBlock>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d021      	beq.n	8000ef0 <SD_disk_read+0xb0>
 8000eac:	2300      	movs	r3, #0
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	e01e      	b.n	8000ef0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2052      	movs	r0, #82	; 0x52
 8000eb6:	f7ff fe72 	bl	8000b9e <SD_SendCmd>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d117      	bne.n	8000ef0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec4:	68b8      	ldr	r0, [r7, #8]
 8000ec6:	f7ff fdf9 	bl	8000abc <SD_RxDataBlock>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00a      	beq.n	8000ee6 <SD_disk_read+0xa6>
        buff += 512;
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ed6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1ed      	bne.n	8000ec0 <SD_disk_read+0x80>
 8000ee4:	e000      	b.n	8000ee8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000ee6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	204c      	movs	r0, #76	; 0x4c
 8000eec:	f7ff fe57 	bl	8000b9e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000ef0:	f7ff fd02 	bl	80008f8 <DESELECT>
  SPI_RxByte();
 8000ef4:	f7ff fd44 	bl	8000980 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf14      	ite	ne
 8000efe:	2301      	movne	r3, #1
 8000f00:	2300      	moveq	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000003a 	.word	0x2000003a
 8000f10:	2000214a 	.word	0x2000214a

08000f14 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <SD_disk_write+0x1c>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <SD_disk_write+0x20>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e06b      	b.n	800100c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f34:	4b37      	ldr	r3, [pc, #220]	; (8001014 <SD_disk_write+0x100>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SD_disk_write+0x32>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e062      	b.n	800100c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <SD_disk_write+0x100>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SD_disk_write+0x44>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e059      	b.n	800100c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <SD_disk_write+0x104>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <SD_disk_write+0x56>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	025b      	lsls	r3, r3, #9
 8000f68:	607b      	str	r3, [r7, #4]

  SELECT();
 8000f6a:	f7ff fcb5 	bl	80008d8 <SELECT>

  if (count == 1)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d110      	bne.n	8000f96 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	2058      	movs	r0, #88	; 0x58
 8000f78:	f7ff fe11 	bl	8000b9e <SD_SendCmd>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d13a      	bne.n	8000ff8 <SD_disk_write+0xe4>
 8000f82:	21fe      	movs	r1, #254	; 0xfe
 8000f84:	68b8      	ldr	r0, [r7, #8]
 8000f86:	f7ff fdc7 	bl	8000b18 <SD_TxDataBlock>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d033      	beq.n	8000ff8 <SD_disk_write+0xe4>
      count = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	e030      	b.n	8000ff8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <SD_disk_write+0x104>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2077      	movs	r0, #119	; 0x77
 8000fa6:	f7ff fdfa 	bl	8000b9e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	2057      	movs	r0, #87	; 0x57
 8000fae:	f7ff fdf6 	bl	8000b9e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	2059      	movs	r0, #89	; 0x59
 8000fb6:	f7ff fdf2 	bl	8000b9e <SD_SendCmd>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11b      	bne.n	8000ff8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fc0:	21fc      	movs	r1, #252	; 0xfc
 8000fc2:	68b8      	ldr	r0, [r7, #8]
 8000fc4:	f7ff fda8 	bl	8000b18 <SD_TxDataBlock>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00a      	beq.n	8000fe4 <SD_disk_write+0xd0>
        buff += 512;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fd4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1ee      	bne.n	8000fc0 <SD_disk_write+0xac>
 8000fe2:	e000      	b.n	8000fe6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fe4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000fe6:	21fd      	movs	r1, #253	; 0xfd
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fd95 	bl	8000b18 <SD_TxDataBlock>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <SD_disk_write+0xe4>
      {
        count = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000ff8:	f7ff fc7e 	bl	80008f8 <DESELECT>
  SPI_RxByte();
 8000ffc:	f7ff fcc0 	bl	8000980 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf14      	ite	ne
 8001006:	2301      	movne	r3, #1
 8001008:	2300      	moveq	r3, #0
 800100a:	b2db      	uxtb	r3, r3
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000003a 	.word	0x2000003a
 8001018:	2000214a 	.word	0x2000214a

0800101c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b08b      	sub	sp, #44	; 0x2c
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	603a      	str	r2, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	460b      	mov	r3, r1
 800102a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SD_disk_ioctl+0x1e>
 8001036:	2304      	movs	r3, #4
 8001038:	e115      	b.n	8001266 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	2b05      	cmp	r3, #5
 8001044:	d124      	bne.n	8001090 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d012      	beq.n	8001074 <SD_disk_ioctl+0x58>
 800104e:	2b02      	cmp	r3, #2
 8001050:	dc1a      	bgt.n	8001088 <SD_disk_ioctl+0x6c>
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <SD_disk_ioctl+0x40>
 8001056:	2b01      	cmp	r3, #1
 8001058:	d006      	beq.n	8001068 <SD_disk_ioctl+0x4c>
 800105a:	e015      	b.n	8001088 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800105c:	f7ff fd16 	bl	8000a8c <SD_PowerOff>
      res = RES_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001066:	e0fc      	b.n	8001262 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001068:	f7ff fcce 	bl	8000a08 <SD_PowerOn>
      res = RES_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001072:	e0f6      	b.n	8001262 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	1c5c      	adds	r4, r3, #1
 8001078:	f7ff fd14 	bl	8000aa4 <SD_CheckPower>
 800107c:	4603      	mov	r3, r0
 800107e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001086:	e0ec      	b.n	8001262 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001088:	2304      	movs	r3, #4
 800108a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800108e:	e0e8      	b.n	8001262 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001090:	4b77      	ldr	r3, [pc, #476]	; (8001270 <SD_disk_ioctl+0x254>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SD_disk_ioctl+0x86>
 800109e:	2303      	movs	r3, #3
 80010a0:	e0e1      	b.n	8001266 <SD_disk_ioctl+0x24a>

    SELECT();
 80010a2:	f7ff fc19 	bl	80008d8 <SELECT>

    switch (ctrl)
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	2b0d      	cmp	r3, #13
 80010aa:	f200 80cb 	bhi.w	8001244 <SD_disk_ioctl+0x228>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <SD_disk_ioctl+0x98>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	080011af 	.word	0x080011af
 80010b8:	080010ed 	.word	0x080010ed
 80010bc:	0800119f 	.word	0x0800119f
 80010c0:	08001245 	.word	0x08001245
 80010c4:	08001245 	.word	0x08001245
 80010c8:	08001245 	.word	0x08001245
 80010cc:	08001245 	.word	0x08001245
 80010d0:	08001245 	.word	0x08001245
 80010d4:	08001245 	.word	0x08001245
 80010d8:	08001245 	.word	0x08001245
 80010dc:	08001245 	.word	0x08001245
 80010e0:	080011c1 	.word	0x080011c1
 80010e4:	080011e5 	.word	0x080011e5
 80010e8:	08001209 	.word	0x08001209
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80010ec:	2100      	movs	r1, #0
 80010ee:	2049      	movs	r0, #73	; 0x49
 80010f0:	f7ff fd55 	bl	8000b9e <SD_SendCmd>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 80a8 	bne.w	800124c <SD_disk_ioctl+0x230>
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2110      	movs	r1, #16
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fcda 	bl	8000abc <SD_RxDataBlock>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 809e 	beq.w	800124c <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	099b      	lsrs	r3, r3, #6
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10e      	bne.n	8001138 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800111a:	7d7b      	ldrb	r3, [r7, #21]
 800111c:	b29a      	uxth	r2, r3
 800111e:	7d3b      	ldrb	r3, [r7, #20]
 8001120:	b29b      	uxth	r3, r3
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b29b      	uxth	r3, r3
 8001126:	4413      	add	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	3301      	adds	r3, #1
 800112c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800112e:	8bfb      	ldrh	r3, [r7, #30]
 8001130:	029a      	lsls	r2, r3, #10
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e02e      	b.n	8001196 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001138:	7c7b      	ldrb	r3, [r7, #17]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	b2da      	uxtb	r2, r3
 8001140:	7dbb      	ldrb	r3, [r7, #22]
 8001142:	09db      	lsrs	r3, r3, #7
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4413      	add	r3, r2
 8001148:	b2da      	uxtb	r2, r3
 800114a:	7d7b      	ldrb	r3, [r7, #21]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 0306 	and.w	r3, r3, #6
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4413      	add	r3, r2
 8001158:	b2db      	uxtb	r3, r3
 800115a:	3302      	adds	r3, #2
 800115c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001160:	7d3b      	ldrb	r3, [r7, #20]
 8001162:	099b      	lsrs	r3, r3, #6
 8001164:	b2db      	uxtb	r3, r3
 8001166:	b29a      	uxth	r2, r3
 8001168:	7cfb      	ldrb	r3, [r7, #19]
 800116a:	b29b      	uxth	r3, r3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	b29b      	uxth	r3, r3
 8001170:	4413      	add	r3, r2
 8001172:	b29a      	uxth	r2, r3
 8001174:	7cbb      	ldrb	r3, [r7, #18]
 8001176:	029b      	lsls	r3, r3, #10
 8001178:	b29b      	uxth	r3, r3
 800117a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800117e:	b29b      	uxth	r3, r3
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001188:	8bfa      	ldrh	r2, [r7, #30]
 800118a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800118e:	3b09      	subs	r3, #9
 8001190:	409a      	lsls	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800119c:	e056      	b.n	800124c <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80011ac:	e055      	b.n	800125a <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80011ae:	f7ff fc11 	bl	80009d4 <SD_ReadyWait>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2bff      	cmp	r3, #255	; 0xff
 80011b6:	d14b      	bne.n	8001250 <SD_disk_ioctl+0x234>
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80011be:	e047      	b.n	8001250 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011c0:	2100      	movs	r1, #0
 80011c2:	2049      	movs	r0, #73	; 0x49
 80011c4:	f7ff fceb 	bl	8000b9e <SD_SendCmd>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d142      	bne.n	8001254 <SD_disk_ioctl+0x238>
 80011ce:	2110      	movs	r1, #16
 80011d0:	6a38      	ldr	r0, [r7, #32]
 80011d2:	f7ff fc73 	bl	8000abc <SD_RxDataBlock>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d03b      	beq.n	8001254 <SD_disk_ioctl+0x238>
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80011e2:	e037      	b.n	8001254 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011e4:	2100      	movs	r1, #0
 80011e6:	204a      	movs	r0, #74	; 0x4a
 80011e8:	f7ff fcd9 	bl	8000b9e <SD_SendCmd>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d132      	bne.n	8001258 <SD_disk_ioctl+0x23c>
 80011f2:	2110      	movs	r1, #16
 80011f4:	6a38      	ldr	r0, [r7, #32]
 80011f6:	f7ff fc61 	bl	8000abc <SD_RxDataBlock>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d02b      	beq.n	8001258 <SD_disk_ioctl+0x23c>
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001206:	e027      	b.n	8001258 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001208:	2100      	movs	r1, #0
 800120a:	207a      	movs	r0, #122	; 0x7a
 800120c:	f7ff fcc7 	bl	8000b9e <SD_SendCmd>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d116      	bne.n	8001244 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800121c:	e00b      	b.n	8001236 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 800121e:	6a3c      	ldr	r4, [r7, #32]
 8001220:	1c63      	adds	r3, r4, #1
 8001222:	623b      	str	r3, [r7, #32]
 8001224:	f7ff fbac 	bl	8000980 <SPI_RxByte>
 8001228:	4603      	mov	r3, r0
 800122a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800122c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001230:	3301      	adds	r3, #1
 8001232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001236:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800123a:	2b03      	cmp	r3, #3
 800123c:	d9ef      	bls.n	800121e <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001244:	2304      	movs	r3, #4
 8001246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800124a:	e006      	b.n	800125a <SD_disk_ioctl+0x23e>
      break;
 800124c:	bf00      	nop
 800124e:	e004      	b.n	800125a <SD_disk_ioctl+0x23e>
      break;
 8001250:	bf00      	nop
 8001252:	e002      	b.n	800125a <SD_disk_ioctl+0x23e>
      break;
 8001254:	bf00      	nop
 8001256:	e000      	b.n	800125a <SD_disk_ioctl+0x23e>
      break;
 8001258:	bf00      	nop
    }

    DESELECT();
 800125a:	f7ff fb4d 	bl	80008f8 <DESELECT>
    SPI_RxByte();
 800125e:	f7ff fb8f 	bl	8000980 <SPI_RxByte>
  }

  return res;
 8001262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001266:	4618      	mov	r0, r3
 8001268:	372c      	adds	r7, #44	; 0x2c
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	2000003a 	.word	0x2000003a

08001274 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800127c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001280:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800128c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001290:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001294:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00b      	beq.n	80012b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800129c:	e000      	b.n	80012a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800129e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f9      	beq.n	800129e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c8:	f000 fc60 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012cc:	f000 f882 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d0:	f000 f970 	bl	80015b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012d4:	f000 f94e 	bl	8001574 <MX_DMA_Init>
  MX_I2S2_Init();
 80012d8:	f000 f8e8 	bl	80014ac <MX_I2S2_Init>
  MX_SPI3_Init();
 80012dc:	f000 f914 	bl	8001508 <MX_SPI3_Init>
  MX_FATFS_Init();
 80012e0:	f003 fe6e 	bl	8004fc0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
//	HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*) data_i2s, sizeof(data_i2s) / 2);
//	process_SD_card();
//	process_SD_card_wav();
	HAL_I2S_DMAStop(&hi2s2);
 80012e4:	4832      	ldr	r0, [pc, #200]	; (80013b0 <main+0xec>)
 80012e6:	f001 fd53 	bl	8002d90 <HAL_I2S_DMAStop>
	HAL_Delay(500);
 80012ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ee:	f000 fcbf 	bl	8001c70 <HAL_Delay>
	sd_card_init();
 80012f2:	f7ff f95b 	bl	80005ac <sd_card_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
//		printf("Hello\n");
//		HAL_Delay(1000);
		if(button_flag){
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <main+0xf0>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d031      	beq.n	8001364 <main+0xa0>

			if(start_stop_recording){
 8001300:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <main+0xf4>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d011      	beq.n	800132e <main+0x6a>
				HAL_I2S_DMAStop(&hi2s2);
 800130a:	4829      	ldr	r0, [pc, #164]	; (80013b0 <main+0xec>)
 800130c:	f001 fd40 	bl	8002d90 <HAL_I2S_DMAStop>
				start_stop_recording = 0;
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <main+0xf4>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
				stop_recording();
 8001316:	f7ff fa6f 	bl	80007f8 <stop_recording>
				half_i2s = 0;
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <main+0xf8>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
				full_i2s = 0;
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <main+0xfc>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
				printf("stop recording \n");
 8001326:	4827      	ldr	r0, [pc, #156]	; (80013c4 <main+0x100>)
 8001328:	f007 f94e 	bl	80085c8 <puts>
 800132c:	e017      	b.n	800135e <main+0x9a>
			}
			else{
				start_stop_recording = 1;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <main+0xf4>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]

				start_recording(I2S_AUDIOFREQ_32K);
 8001334:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001338:	f7ff f95e 	bl	80005f8 <start_recording>
				printf("start_recording %d and %d\n", half_i2s, full_i2s);
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <main+0xf8>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4619      	mov	r1, r3
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <main+0xfc>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	481e      	ldr	r0, [pc, #120]	; (80013c8 <main+0x104>)
 800134e:	f007 f8d5 	bl	80084fc <iprintf>
				HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
 8001352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001356:	491d      	ldr	r1, [pc, #116]	; (80013cc <main+0x108>)
 8001358:	4815      	ldr	r0, [pc, #84]	; (80013b0 <main+0xec>)
 800135a:	f001 fc5d 	bl	8002c18 <HAL_I2S_Receive_DMA>
			}
			button_flag = 0;
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <main+0xf0>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(start_stop_recording == 1 && half_i2s == 1){
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <main+0xf4>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10c      	bne.n	8001388 <main+0xc4>
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <main+0xf8>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d107      	bne.n	8001388 <main+0xc4>
			write2wave_file(((uint8_t*)data_i2s),	 WAV_WRITE_SAMPLE_COUNT);
 8001378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137c:	4813      	ldr	r0, [pc, #76]	; (80013cc <main+0x108>)
 800137e:	f7ff f9eb 	bl	8000758 <write2wave_file>
			half_i2s = 0;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <main+0xf8>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
		}
		if(start_stop_recording == 1 && full_i2s == 1){
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <main+0xf4>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d1b1      	bne.n	80012f6 <main+0x32>
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <main+0xfc>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d1ac      	bne.n	80012f6 <main+0x32>
			write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <main+0x10c>)
 800139e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f9d8 	bl	8000758 <write2wave_file>
			full_i2s = 0;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <main+0xfc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
		if(button_flag){
 80013ae:	e7a2      	b.n	80012f6 <main+0x32>
 80013b0:	2000214c 	.word	0x2000214c
 80013b4:	2000324e 	.word	0x2000324e
 80013b8:	2000324f 	.word	0x2000324f
 80013bc:	20003250 	.word	0x20003250
 80013c0:	20003251 	.word	0x20003251
 80013c4:	080093a8 	.word	0x080093a8
 80013c8:	080093b8 	.word	0x080093b8
 80013cc:	2000224c 	.word	0x2000224c
 80013d0:	20002a4c 	.word	0x20002a4c

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	2234      	movs	r2, #52	; 0x34
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f007 f9d0 	bl	8008788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <SystemClock_Config+0xd0>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <SystemClock_Config+0xd0>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <SystemClock_Config+0xd0>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <SystemClock_Config+0xd4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <SystemClock_Config+0xd4>)
 800141e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <SystemClock_Config+0xd4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001430:	2302      	movs	r3, #2
 8001432:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001438:	2310      	movs	r3, #16
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001440:	2300      	movs	r3, #0
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001444:	2308      	movs	r3, #8
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001448:	23a0      	movs	r3, #160	; 0xa0
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001450:	2302      	movs	r3, #2
 8001452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001454:	2302      	movs	r3, #2
 8001456:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4618      	mov	r0, r3
 800145e:	f002 fedf 	bl	8004220 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001468:	f000 f964 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2302      	movs	r3, #2
 8001472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001478:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800147c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2105      	movs	r1, #5
 800148a:	4618      	mov	r0, r3
 800148c:	f001 fec6 	bl	800321c <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001496:	f000 f94d 	bl	8001734 <Error_Handler>
  }
}
 800149a:	bf00      	nop
 800149c:	3750      	adds	r7, #80	; 0x50
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000

080014ac <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_I2S2_Init+0x54>)
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <MX_I2S2_Init+0x58>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_I2S2_Init+0x54>)
 80014b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014bc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_I2S2_Init+0x54>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_I2S2_Init+0x54>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <MX_I2S2_Init+0x54>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_I2S2_Init+0x54>)
 80014d2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80014d6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_I2S2_Init+0x54>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_I2S2_Init+0x54>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_I2S2_Init+0x54>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_I2S2_Init+0x54>)
 80014ec:	f001 fa9c 	bl	8002a28 <HAL_I2S_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80014f6:	f000 f91d 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000214c 	.word	0x2000214c
 8001504:	40003800 	.word	0x40003800

08001508 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_SPI3_Init+0x64>)
 800150e:	4a18      	ldr	r2, [pc, #96]	; (8001570 <MX_SPI3_Init+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_SPI3_Init+0x64>)
 8001514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001518:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_SPI3_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_SPI3_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_SPI3_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_SPI3_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_SPI3_Init+0x64>)
 8001534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001538:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_SPI3_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_SPI3_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_SPI3_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_SPI3_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_SPI3_Init+0x64>)
 8001554:	220a      	movs	r2, #10
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_SPI3_Init+0x64>)
 800155a:	f003 f8ff 	bl	800475c <HAL_SPI_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001564:	f000 f8e6 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200021f4 	.word	0x200021f4
 8001570:	40003c00 	.word	0x40003c00

08001574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_DMA_Init+0x3c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <MX_DMA_Init+0x3c>)
 8001584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_DMA_Init+0x3c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	200e      	movs	r0, #14
 800159c:	f000 fc67 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015a0:	200e      	movs	r0, #14
 80015a2:	f000 fc80 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <MX_GPIO_Init+0xc8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a2a      	ldr	r2, [pc, #168]	; (800167c <MX_GPIO_Init+0xc8>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <MX_GPIO_Init+0xc8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <MX_GPIO_Init+0xc8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a23      	ldr	r2, [pc, #140]	; (800167c <MX_GPIO_Init+0xc8>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <MX_GPIO_Init+0xc8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <MX_GPIO_Init+0xc8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <MX_GPIO_Init+0xc8>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_GPIO_Init+0xc8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001624:	4816      	ldr	r0, [pc, #88]	; (8001680 <MX_GPIO_Init+0xcc>)
 8001626:	f001 f9cd 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800162a:	2301      	movs	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	4810      	ldr	r0, [pc, #64]	; (8001680 <MX_GPIO_Init+0xcc>)
 8001640:	f001 f82c 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4619      	mov	r1, r3
 800165c:	4808      	ldr	r0, [pc, #32]	; (8001680 <MX_GPIO_Init+0xcc>)
 800165e:	f001 f81d 	bl	800269c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2006      	movs	r0, #6
 8001668:	f000 fc01 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800166c:	2006      	movs	r0, #6
 800166e:	f000 fc1a 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001672:	bf00      	nop
 8001674:	3720      	adds	r7, #32
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000

08001684 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e009      	b.n	80016aa <_write+0x26>
		ITM_SendChar(*ptr++);
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fde8 	bl	8001274 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbf1      	blt.n	8001696 <_write+0x12>
	}
	return len;
 80016b2:	687b      	ldr	r3, [r7, #4]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	sample_i2s = data_i2s[0];
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_I2S_RxCpltCallback+0x24>)
 80016c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_I2S_RxCpltCallback+0x28>)
 80016cc:	801a      	strh	r2, [r3, #0]
	full_i2s = 1;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_I2S_RxCpltCallback+0x2c>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	2000224c 	.word	0x2000224c
 80016e4:	2000324c 	.word	0x2000324c
 80016e8:	20003251 	.word	0x20003251

080016ec <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	//sample_i2s = data_i2s[0];
	half_i2s = 1;
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20003250 	.word	0x20003250

0800170c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d102      	bne.n	8001722 <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_GPIO_EXTI_Callback+0x24>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
	}
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	2000324e 	.word	0x2000324e

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>
	...

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_MspInit+0x4c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0a0      	sub	sp, #128	; 0x80
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	225c      	movs	r2, #92	; 0x5c
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f006 ffe9 	bl	8008788 <memset>
  if(hi2s->Instance==SPI2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a3f      	ldr	r2, [pc, #252]	; (80018b8 <HAL_I2S_MspInit+0x128>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d176      	bne.n	80018ae <HAL_I2S_MspInit+0x11e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80017c4:	2332      	movs	r3, #50	; 0x32
 80017c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80017cc:	2308      	movs	r3, #8
 80017ce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80017d8:	2301      	movs	r3, #1
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80017dc:	2300      	movs	r3, #0
 80017de:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fdff 	bl	80033e8 <HAL_RCCEx_PeriphCLKConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 80017f0:	f7ff ffa0 	bl	8001734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	4b30      	ldr	r3, [pc, #192]	; (80018bc <HAL_I2S_MspInit+0x12c>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <HAL_I2S_MspInit+0x12c>)
 80017fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_I2S_MspInit+0x12c>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_I2S_MspInit+0x12c>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a28      	ldr	r2, [pc, #160]	; (80018bc <HAL_I2S_MspInit+0x12c>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_I2S_MspInit+0x12c>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800182c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001830:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800183e:	2305      	movs	r3, #5
 8001840:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001846:	4619      	mov	r1, r3
 8001848:	481d      	ldr	r0, [pc, #116]	; (80018c0 <HAL_I2S_MspInit+0x130>)
 800184a:	f000 ff27 	bl	800269c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_I2S_MspInit+0x138>)
 8001852:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 8001868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 8001870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001874:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 8001878:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 8001880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001884:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 8001894:	f000 fb22 	bl	8001edc <HAL_DMA_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2S_MspInit+0x112>
    {
      Error_Handler();
 800189e:	f7ff ff49 	bl	8001734 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_I2S_MspInit+0x134>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018ae:	bf00      	nop
 80018b0:	3780      	adds	r7, #128	; 0x80
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40003800 	.word	0x40003800
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020400 	.word	0x40020400
 80018c4:	20002194 	.word	0x20002194
 80018c8:	40026058 	.word	0x40026058

080018cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_SPI_MspInit+0x84>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d12c      	bne.n	8001948 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_SPI_MspInit+0x88>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_SPI_MspInit+0x88>)
 80018f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_SPI_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001926:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001938:	2306      	movs	r3, #6
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_SPI_MspInit+0x8c>)
 8001944:	f000 feaa 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40003c00 	.word	0x40003c00
 8001954:	40023800 	.word	0x40023800
 8001958:	40020800 	.word	0x40020800

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <NMI_Handler+0x4>

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <SysTick_Handler+0x34>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <SysTick_Handler+0x18>
	  Timer1--;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <SysTick_Handler+0x34>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <SysTick_Handler+0x34>)
 80019ba:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <SysTick_Handler+0x38>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <SysTick_Handler+0x2c>
	  Timer2--;
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SysTick_Handler+0x38>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <SysTick_Handler+0x38>)
 80019ce:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d0:	f000 f92e 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20002146 	.word	0x20002146
 80019dc:	20002148 	.word	0x20002148

080019e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f001 f807 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <DMA1_Stream3_IRQHandler+0x10>)
 80019f6:	f000 fbe7 	bl	80021c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20002194 	.word	0x20002194

08001a04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e00a      	b.n	8001a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a16:	f3af 8000 	nop.w
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	b2ca      	uxtb	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbf0      	blt.n	8001a16 <_read+0x12>
  }

  return len;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a66:	605a      	str	r2, [r3, #4]
  return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_isatty>:

int _isatty(int file)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <_sbrk+0x5c>)
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <_sbrk+0x60>)
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <_sbrk+0x64>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <_sbrk+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d207      	bcs.n	8001ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad8:	f006 fea4 	bl	8008824 <__errno>
 8001adc:	4603      	mov	r3, r0
 8001ade:	220c      	movs	r2, #12
 8001ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e009      	b.n	8001afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <_sbrk+0x64>)
 8001af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20020000 	.word	0x20020000
 8001b08:	00000400 	.word	0x00000400
 8001b0c:	20003254 	.word	0x20003254
 8001b10:	200035e8 	.word	0x200035e8

08001b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <SystemInit+0x20>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <SystemInit+0x20>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b3c:	480d      	ldr	r0, [pc, #52]	; (8001b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b3e:	490e      	ldr	r1, [pc, #56]	; (8001b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b40:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b44:	e002      	b.n	8001b4c <LoopCopyDataInit>

08001b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4a:	3304      	adds	r3, #4

08001b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b50:	d3f9      	bcc.n	8001b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b54:	4c0b      	ldr	r4, [pc, #44]	; (8001b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b58:	e001      	b.n	8001b5e <LoopFillZerobss>

08001b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b5c:	3204      	adds	r2, #4

08001b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b60:	d3fb      	bcc.n	8001b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b62:	f7ff ffd7 	bl	8001b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f006 fe63 	bl	8008830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6a:	f7ff fbab 	bl	80012c4 <main>
  bx  lr    
 8001b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001b7c:	08009a04 	.word	0x08009a04
  ldr r2, =_sbss
 8001b80:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001b84:	200035e4 	.word	0x200035e4

08001b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <HAL_Init+0x40>)
 8001b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_Init+0x40>)
 8001ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_Init+0x40>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f94f 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bba:	200f      	movs	r0, #15
 8001bbc:	f000 f808 	bl	8001bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc0:	f7ff fdbe 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x54>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x58>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f967 	bl	8001ec2 <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d80a      	bhi.n	8001c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f000 f92f 	bl	8001e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <HAL_InitTick+0x5c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2000003c 	.word	0x2000003c
 8001c28:	20000044 	.word	0x20000044
 8001c2c:	20000040 	.word	0x20000040

08001c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000044 	.word	0x20000044
 8001c54:	20003258 	.word	0x20003258

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20003258 	.word	0x20003258

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffde 	bl	8001c58 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000044 	.word	0x20000044

08001cb8 <__NVIC_SetPriorityGrouping>:
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_GetPriorityGrouping>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_EnableIRQ>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db0b      	blt.n	8001d46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4907      	ldr	r1, [pc, #28]	; (8001d54 <__NVIC_EnableIRQ+0x38>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <SysTick_Config>:
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e24:	d301      	bcc.n	8001e2a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <SysTick_Config+0x40>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e32:	210f      	movs	r1, #15
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f7ff ff8e 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <SysTick_Config+0x40>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <SysTick_Config+0x40>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff29 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff3e 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff8e 	bl	8001dac <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff5d 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff31 	bl	8001d1c <__NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffa2 	bl	8001e14 <SysTick_Config>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff feb6 	bl	8001c58 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e099      	b.n	800202c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f18:	e00f      	b.n	8001f3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1a:	f7ff fe9d 	bl	8001c58 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d908      	bls.n	8001f3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2203      	movs	r2, #3
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e078      	b.n	800202c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e8      	bne.n	8001f1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_DMA_Init+0x158>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d107      	bne.n	8001fa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0307 	bic.w	r3, r3, #7
 8001fba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d117      	bne.n	8001ffe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00e      	beq.n	8001ffe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fadf 	bl	80025a4 <DMA_CheckFifoParam>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2240      	movs	r2, #64	; 0x40
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e016      	b.n	800202c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fa96 	bl	8002538 <DMA_CalcBaseAndBitshift>
 800200c:	4603      	mov	r3, r0
 800200e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	223f      	movs	r2, #63	; 0x3f
 8002016:	409a      	lsls	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	f010803f 	.word	0xf010803f

08002038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_DMA_Start_IT+0x26>
 800205a:	2302      	movs	r3, #2
 800205c:	e040      	b.n	80020e0 <HAL_DMA_Start_IT+0xa8>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d12f      	bne.n	80020d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fa28 	bl	80024dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	223f      	movs	r2, #63	; 0x3f
 8002092:	409a      	lsls	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0216 	orr.w	r2, r2, #22
 80020a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0208 	orr.w	r2, r2, #8
 80020be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e005      	b.n	80020de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020da:	2302      	movs	r3, #2
 80020dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020de:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020f6:	f7ff fdaf 	bl	8001c58 <HAL_GetTick>
 80020fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d008      	beq.n	800211a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e052      	b.n	80021c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0216 	bic.w	r2, r2, #22
 8002128:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002138:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d103      	bne.n	800214a <HAL_DMA_Abort+0x62>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0208 	bic.w	r2, r2, #8
 8002158:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216a:	e013      	b.n	8002194 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800216c:	f7ff fd74 	bl	8001c58 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b05      	cmp	r3, #5
 8002178:	d90c      	bls.n	8002194 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2203      	movs	r2, #3
 8002184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e015      	b.n	80021c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1e4      	bne.n	800216c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	223f      	movs	r2, #63	; 0x3f
 80021a8:	409a      	lsls	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021d4:	4b8e      	ldr	r3, [pc, #568]	; (8002410 <HAL_DMA_IRQHandler+0x248>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a8e      	ldr	r2, [pc, #568]	; (8002414 <HAL_DMA_IRQHandler+0x24c>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0a9b      	lsrs	r3, r3, #10
 80021e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	2208      	movs	r2, #8
 80021f4:	409a      	lsls	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d01a      	beq.n	8002234 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0204 	bic.w	r2, r2, #4
 800221a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2208      	movs	r2, #8
 8002222:	409a      	lsls	r2, r3
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	2201      	movs	r2, #1
 800223a:	409a      	lsls	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d012      	beq.n	800226a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	2201      	movs	r2, #1
 8002258:	409a      	lsls	r2, r3
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	2204      	movs	r2, #4
 8002270:	409a      	lsls	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d012      	beq.n	80022a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00b      	beq.n	80022a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	2204      	movs	r2, #4
 800228e:	409a      	lsls	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	f043 0204 	orr.w	r2, r3, #4
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2210      	movs	r2, #16
 80022a6:	409a      	lsls	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d043      	beq.n	8002338 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03c      	beq.n	8002338 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	2210      	movs	r2, #16
 80022c4:	409a      	lsls	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d018      	beq.n	800230a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d108      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d024      	beq.n	8002338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
 80022f6:	e01f      	b.n	8002338 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01b      	beq.n	8002338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
 8002308:	e016      	b.n	8002338 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0208 	bic.w	r2, r2, #8
 8002326:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233c:	2220      	movs	r2, #32
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 808f 	beq.w	8002468 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8087 	beq.w	8002468 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	2220      	movs	r2, #32
 8002360:	409a      	lsls	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b05      	cmp	r3, #5
 8002370:	d136      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0216 	bic.w	r2, r2, #22
 8002380:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002390:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <HAL_DMA_IRQHandler+0x1da>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0208 	bic.w	r2, r2, #8
 80023b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	223f      	movs	r2, #63	; 0x3f
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d07e      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
        }
        return;
 80023de:	e079      	b.n	80024d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01d      	beq.n	800242a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10d      	bne.n	8002418 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	2b00      	cmp	r3, #0
 8002402:	d031      	beq.n	8002468 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
 800240c:	e02c      	b.n	8002468 <HAL_DMA_IRQHandler+0x2a0>
 800240e:	bf00      	nop
 8002410:	2000003c 	.word	0x2000003c
 8002414:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d023      	beq.n	8002468 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	4798      	blx	r3
 8002428:	e01e      	b.n	8002468 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10f      	bne.n	8002458 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0210 	bic.w	r2, r2, #16
 8002446:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	2b00      	cmp	r3, #0
 800246e:	d032      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d022      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2205      	movs	r2, #5
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3301      	adds	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	d307      	bcc.n	80024b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f2      	bne.n	8002494 <HAL_DMA_IRQHandler+0x2cc>
 80024ae:	e000      	b.n	80024b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
 80024d2:	e000      	b.n	80024d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024d4:	bf00      	nop
    }
  }
}
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d108      	bne.n	800251c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800251a:	e007      	b.n	800252c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	3b10      	subs	r3, #16
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <DMA_CalcBaseAndBitshift+0x64>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002552:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d909      	bls.n	800257a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800256e:	f023 0303 	bic.w	r3, r3, #3
 8002572:	1d1a      	adds	r2, r3, #4
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	659a      	str	r2, [r3, #88]	; 0x58
 8002578:	e007      	b.n	800258a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002582:	f023 0303 	bic.w	r3, r3, #3
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	aaaaaaab 	.word	0xaaaaaaab
 80025a0:	08009578 	.word	0x08009578

080025a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d11f      	bne.n	80025fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d856      	bhi.n	8002672 <DMA_CheckFifoParam+0xce>
 80025c4:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <DMA_CheckFifoParam+0x28>)
 80025c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ca:	bf00      	nop
 80025cc:	080025dd 	.word	0x080025dd
 80025d0:	080025ef 	.word	0x080025ef
 80025d4:	080025dd 	.word	0x080025dd
 80025d8:	08002673 	.word	0x08002673
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d046      	beq.n	8002676 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ec:	e043      	b.n	8002676 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025f6:	d140      	bne.n	800267a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fc:	e03d      	b.n	800267a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002606:	d121      	bne.n	800264c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d837      	bhi.n	800267e <DMA_CheckFifoParam+0xda>
 800260e:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <DMA_CheckFifoParam+0x70>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	08002625 	.word	0x08002625
 8002618:	0800262b 	.word	0x0800262b
 800261c:	08002625 	.word	0x08002625
 8002620:	0800263d 	.word	0x0800263d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e030      	b.n	800268c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d025      	beq.n	8002682 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263a:	e022      	b.n	8002682 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002644:	d11f      	bne.n	8002686 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800264a:	e01c      	b.n	8002686 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d903      	bls.n	800265a <DMA_CheckFifoParam+0xb6>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d003      	beq.n	8002660 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002658:	e018      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
      break;
 800265e:	e015      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00e      	beq.n	800268a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e00b      	b.n	800268a <DMA_CheckFifoParam+0xe6>
      break;
 8002672:	bf00      	nop
 8002674:	e00a      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;
 8002676:	bf00      	nop
 8002678:	e008      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;
 800267a:	bf00      	nop
 800267c:	e006      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;
 800267e:	bf00      	nop
 8002680:	e004      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;
 8002682:	bf00      	nop
 8002684:	e002      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;   
 8002686:	bf00      	nop
 8002688:	e000      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;
 800268a:	bf00      	nop
    }
  } 
  
  return status; 
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	e165      	b.n	8002984 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f040 8154 	bne.w	800297e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d005      	beq.n	80026ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d130      	bne.n	8002750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 0201 	and.w	r2, r3, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b03      	cmp	r3, #3
 800275a:	d017      	beq.n	800278c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d123      	bne.n	80027e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	08da      	lsrs	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3208      	adds	r2, #8
 80027a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	08da      	lsrs	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3208      	adds	r2, #8
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0203 	and.w	r2, r3, #3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80ae 	beq.w	800297e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b5d      	ldr	r3, [pc, #372]	; (800299c <HAL_GPIO_Init+0x300>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a5c      	ldr	r2, [pc, #368]	; (800299c <HAL_GPIO_Init+0x300>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b5a      	ldr	r3, [pc, #360]	; (800299c <HAL_GPIO_Init+0x300>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283e:	4a58      	ldr	r2, [pc, #352]	; (80029a0 <HAL_GPIO_Init+0x304>)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4f      	ldr	r2, [pc, #316]	; (80029a4 <HAL_GPIO_Init+0x308>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_Init+0x21a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4e      	ldr	r2, [pc, #312]	; (80029a8 <HAL_GPIO_Init+0x30c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_Init+0x216>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4d      	ldr	r2, [pc, #308]	; (80029ac <HAL_GPIO_Init+0x310>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x212>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4c      	ldr	r2, [pc, #304]	; (80029b0 <HAL_GPIO_Init+0x314>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x20e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4b      	ldr	r2, [pc, #300]	; (80029b4 <HAL_GPIO_Init+0x318>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x20a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4a      	ldr	r2, [pc, #296]	; (80029b8 <HAL_GPIO_Init+0x31c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x206>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a49      	ldr	r2, [pc, #292]	; (80029bc <HAL_GPIO_Init+0x320>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x202>
 800289a:	2306      	movs	r3, #6
 800289c:	e00c      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 800289e:	2307      	movs	r3, #7
 80028a0:	e00a      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	; (80029a0 <HAL_GPIO_Init+0x304>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d6:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_GPIO_Init+0x324>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fa:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_GPIO_Init+0x324>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_GPIO_Init+0x324>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002924:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <HAL_GPIO_Init+0x324>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_GPIO_Init+0x324>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294e:	4a1c      	ldr	r2, [pc, #112]	; (80029c0 <HAL_GPIO_Init+0x324>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_GPIO_Init+0x324>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002978:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <HAL_GPIO_Init+0x324>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f ae96 	bls.w	80026b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40021400 	.word	0x40021400
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e0:	e003      	b.n	80029ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	041a      	lsls	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	619a      	str	r2, [r3, #24]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fe78 	bl	800170c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0e1      	b.n	8002bfe <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a6d      	ldr	r2, [pc, #436]	; (8002c08 <HAL_I2S_Init+0x1e0>)
 8002a52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7fe fe9b 	bl	8001790 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a70:	f023 030f 	bic.w	r3, r3, #15
 8002a74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d06f      	beq.n	8002b66 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a8e:	2310      	movs	r3, #16
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e001      	b.n	8002a98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d802      	bhi.n	8002aa6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_I2S_Init+0x1e4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_I2S_Init+0x92>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a56      	ldr	r2, [pc, #344]	; (8002c10 <HAL_I2S_Init+0x1e8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d104      	bne.n	8002ac4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f000 ffbe 	bl	8003a3c <HAL_RCCEx_GetPeriphCLKFreq>
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	e003      	b.n	8002acc <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f000 ffb9 	bl	8003a3c <HAL_RCCEx_GetPeriphCLKFreq>
 8002aca:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad4:	d125      	bne.n	8002b22 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	461a      	mov	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	3305      	adds	r3, #5
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	e01f      	b.n	8002b40 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	461a      	mov	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	3305      	adds	r3, #5
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e00e      	b.n	8002b40 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	461a      	mov	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	3305      	adds	r3, #5
 8002b3e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4a34      	ldr	r2, [pc, #208]	; (8002c14 <HAL_I2S_Init+0x1ec>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e003      	b.n	8002b6e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b66:	2302      	movs	r3, #2
 8002b68:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d902      	bls.n	8002b7a <HAL_I2S_Init+0x152>
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2bff      	cmp	r3, #255	; 0xff
 8002b78:	d907      	bls.n	8002b8a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e039      	b.n	8002bfe <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	ea42 0103 	orr.w	r1, r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ba8:	f023 030f 	bic.w	r3, r3, #15
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6851      	ldr	r1, [r2, #4]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	4311      	orrs	r1, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68d2      	ldr	r2, [r2, #12]
 8002bba:	4311      	orrs	r1, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6992      	ldr	r2, [r2, #24]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bcc:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b30      	cmp	r3, #48	; 0x30
 8002bd4:	d003      	beq.n	8002bde <HAL_I2S_Init+0x1b6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2bb0      	cmp	r3, #176	; 0xb0
 8002bdc:	d107      	bne.n	8002bee <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bec:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08003095 	.word	0x08003095
 8002c0c:	40003800 	.word	0x40003800
 8002c10:	40003c00 	.word	0x40003c00
 8002c14:	cccccccd 	.word	0xcccccccd

08002c18 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_I2S_Receive_DMA+0x1a>
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0a1      	b.n	8002d7a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2S_Receive_DMA+0x2e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e099      	b.n	8002d7a <HAL_I2S_Receive_DMA+0x162>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d005      	beq.n	8002c66 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	e089      	b.n	8002d7a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2204      	movs	r2, #4
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d002      	beq.n	8002c92 <HAL_I2S_Receive_DMA+0x7a>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d10a      	bne.n	8002ca8 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	865a      	strh	r2, [r3, #50]	; 0x32
 8002ca6:	e005      	b.n	8002cb4 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	4a32      	ldr	r2, [pc, #200]	; (8002d84 <HAL_I2S_Receive_DMA+0x16c>)
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	4a31      	ldr	r2, [pc, #196]	; (8002d88 <HAL_I2S_Receive_DMA+0x170>)
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	4a30      	ldr	r2, [pc, #192]	; (8002d8c <HAL_I2S_Receive_DMA+0x174>)
 8002cca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cda:	d10a      	bne.n	8002cf2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	330c      	adds	r3, #12
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002d08:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002d0a:	f7ff f995 	bl	8002038 <HAL_DMA_Start_IT>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00f      	beq.n	8002d34 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	f043 0208 	orr.w	r2, r3, #8
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e022      	b.n	8002d7a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d107      	bne.n	8002d52 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d50:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	08002f73 	.word	0x08002f73
 8002d88:	08002f31 	.word	0x08002f31
 8002d8c:	08002f8f 	.word	0x08002f8f

08002d90 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d003      	beq.n	8002dae <HAL_I2S_DMAStop+0x1e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d155      	bne.n	8002e5a <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00f      	beq.n	8002dd6 <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f994 	bl	80020e8 <HAL_DMA_Abort>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f043 0208 	orr.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002dd6:	2364      	movs	r3, #100	; 0x64
 8002dd8:	2201      	movs	r2, #1
 8002dda:	2102      	movs	r1, #2
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f9e3 	bl	80031a8 <I2S_WaitFlagStateUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002e00:	2364      	movs	r3, #100	; 0x64
 8002e02:	2200      	movs	r2, #0
 8002e04:	2180      	movs	r1, #128	; 0x80
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f9ce 	bl	80031a8 <I2S_WaitFlagStateUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e38:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0202 	bic.w	r2, r2, #2
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	e04d      	b.n	8002ef6 <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e62:	d004      	beq.n	8002e6e <HAL_I2S_DMAStop+0xde>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6c:	d143      	bne.n	8002ef6 <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00f      	beq.n	8002e96 <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f934 	bl	80020e8 <HAL_DMA_Abort>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f043 0208 	orr.w	r2, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
 8002eee:	e002      	b.n	8002ef6 <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10e      	bne.n	8002f64 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7fe fba9 	bl	80016bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7fe fbb3 	bl	80016ec <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0203 	bic.w	r2, r2, #3
 8002faa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f043 0208 	orr.w	r2, r3, #8
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff ffa5 	bl	8002f1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	881a      	ldrh	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	1c9a      	adds	r2, r3, #2
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10e      	bne.n	800302e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800301e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff6d 	bl	8002f08 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	b292      	uxth	r2, r2
 800304a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	1c9a      	adds	r2, r3, #2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10e      	bne.n	800308c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800307c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fe fb18 	bl	80016bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d13a      	bne.n	8003126 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d109      	bne.n	80030ce <I2S_IRQHandler+0x3a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d102      	bne.n	80030ce <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ffb4 	bl	8003036 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d126      	bne.n	8003126 <I2S_IRQHandler+0x92>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d11f      	bne.n	8003126 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030f4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	f043 0202 	orr.w	r2, r3, #2
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fefb 	bl	8002f1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b03      	cmp	r3, #3
 8003130:	d136      	bne.n	80031a0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b02      	cmp	r3, #2
 800313a:	d109      	bne.n	8003150 <I2S_IRQHandler+0xbc>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d102      	bne.n	8003150 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff45 	bl	8002fda <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d122      	bne.n	80031a0 <I2S_IRQHandler+0x10c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b20      	cmp	r3, #32
 8003166:	d11b      	bne.n	80031a0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003176:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f043 0204 	orr.w	r2, r3, #4
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff febe 	bl	8002f1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031a0:	bf00      	nop
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b8:	f7fe fd4e 	bl	8001c58 <HAL_GetTick>
 80031bc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80031be:	e018      	b.n	80031f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d014      	beq.n	80031f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80031c8:	f7fe fd46 	bl	8001c58 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d902      	bls.n	80031de <I2S_WaitFlagStateUntilTimeout+0x36>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e00f      	b.n	8003212 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d1d7      	bne.n	80031c0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0cc      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d90c      	bls.n	8003258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b8      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003270:	4b59      	ldr	r3, [pc, #356]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a58      	ldr	r2, [pc, #352]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800327a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003288:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	494d      	ldr	r1, [pc, #308]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d044      	beq.n	800333c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d119      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d003      	beq.n	80032da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e06f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e067      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4934      	ldr	r1, [pc, #208]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800330c:	f7fe fca4 	bl	8001c58 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fe fca0 	bl	8001c58 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e04f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 020c 	and.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d1eb      	bne.n	8003314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d20c      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e032      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4916      	ldr	r1, [pc, #88]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	490e      	ldr	r1, [pc, #56]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a2:	f000 fd93 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	490a      	ldr	r1, [pc, #40]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	5ccb      	ldrb	r3, [r1, r3]
 80033b6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fc04 	bl	8001bd0 <HAL_InitTick>

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023c00 	.word	0x40023c00
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08009568 	.word	0x08009568
 80033e0:	2000003c 	.word	0x2000003c
 80033e4:	20000040 	.word	0x20000040

080033e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08c      	sub	sp, #48	; 0x30
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d010      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003420:	4b6f      	ldr	r3, [pc, #444]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003426:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	496c      	ldr	r1, [pc, #432]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800343e:	2301      	movs	r3, #1
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d010      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800344e:	4b64      	ldr	r3, [pc, #400]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003454:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	4960      	ldr	r1, [pc, #384]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800346c:	2301      	movs	r3, #1
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d017      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800347c:	4b58      	ldr	r3, [pc, #352]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800347e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4955      	ldr	r1, [pc, #340]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349a:	d101      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800349c:	2301      	movs	r3, #1
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80034a8:	2301      	movs	r3, #1
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d017      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034b8:	4b49      	ldr	r3, [pc, #292]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	4946      	ldr	r1, [pc, #280]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d6:	d101      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80034d8:	2301      	movs	r3, #1
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80034e4:	2301      	movs	r3, #1
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 808a 	beq.w	800360a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4a38      	ldr	r2, [pc, #224]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	6413      	str	r3, [r2, #64]	; 0x40
 8003506:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003512:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a33      	ldr	r2, [pc, #204]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800351e:	f7fe fb9b 	bl	8001c58 <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003526:	f7fe fb97 	bl	8001c58 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e278      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02f      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	429a      	cmp	r2, r3
 8003560:	d028      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800356c:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800357e:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d114      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800358a:	f7fe fb65 	bl	8001c58 <HAL_GetTick>
 800358e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fe fb61 	bl	8001c58 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e240      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ee      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035c0:	d114      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x204>
 80035c2:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d6:	4902      	ldr	r1, [pc, #8]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	608b      	str	r3, [r1, #8]
 80035dc:	e00c      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40007000 	.word	0x40007000
 80035e8:	42470e40 	.word	0x42470e40
 80035ec:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a49      	ldr	r2, [pc, #292]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035f6:	6093      	str	r3, [r2, #8]
 80035f8:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003604:	4944      	ldr	r1, [pc, #272]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003606:	4313      	orrs	r3, r2
 8003608:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	d004      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800361c:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800361e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800362c:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800362e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003632:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363a:	4937      	ldr	r1, [pc, #220]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800364e:	4b32      	ldr	r3, [pc, #200]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003654:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365c:	492e      	ldr	r1, [pc, #184]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d011      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003670:	4b29      	ldr	r3, [pc, #164]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367e:	4926      	ldr	r1, [pc, #152]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800368e:	d101      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003690:	2301      	movs	r3, #1
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80036a0:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	491a      	ldr	r1, [pc, #104]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d011      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d0:	4911      	ldr	r1, [pc, #68]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e0:	d101      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80036e2:	2301      	movs	r3, #1
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d005      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f4:	f040 80ff 	bne.w	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036fe:	f7fe faab 	bl	8001c58 <HAL_GetTick>
 8003702:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003704:	e00e      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003706:	f7fe faa7 	bl	8001c58 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d907      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e188      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003718:	40023800 	.word	0x40023800
 800371c:	424711e0 	.word	0x424711e0
 8003720:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003724:	4b7e      	ldr	r3, [pc, #504]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ea      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800374c:	2b00      	cmp	r3, #0
 800374e:	d028      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d124      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003758:	4b71      	ldr	r3, [pc, #452]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800375a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	3301      	adds	r3, #1
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800376a:	4b6d      	ldr	r3, [pc, #436]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800376c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003770:	0e1b      	lsrs	r3, r3, #24
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	431a      	orrs	r2, r3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	431a      	orrs	r2, r3
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	071b      	lsls	r3, r3, #28
 800379a:	4961      	ldr	r1, [pc, #388]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d004      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d035      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037cc:	d130      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80037ce:	4b54      	ldr	r3, [pc, #336]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037e0:	4b4f      	ldr	r3, [pc, #316]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e6:	0f1b      	lsrs	r3, r3, #28
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	019b      	lsls	r3, r3, #6
 80037f8:	431a      	orrs	r2, r3
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	3b01      	subs	r3, #1
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	061b      	lsls	r3, r3, #24
 800380a:	431a      	orrs	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	071b      	lsls	r3, r3, #28
 8003810:	4943      	ldr	r1, [pc, #268]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003818:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800381a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381e:	f023 021f 	bic.w	r2, r3, #31
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	3b01      	subs	r3, #1
 8003828:	493d      	ldr	r1, [pc, #244]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d029      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003844:	d124      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003846:	4b36      	ldr	r3, [pc, #216]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	3301      	adds	r3, #1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003858:	4b31      	ldr	r3, [pc, #196]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800385a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385e:	0f1b      	lsrs	r3, r3, #28
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	019b      	lsls	r3, r3, #6
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	3b01      	subs	r3, #1
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	431a      	orrs	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	071b      	lsls	r3, r3, #28
 8003888:	4925      	ldr	r1, [pc, #148]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003898:	2b00      	cmp	r3, #0
 800389a:	d016      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	019b      	lsls	r3, r3, #6
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	3b01      	subs	r3, #1
 80038b0:	041b      	lsls	r3, r3, #16
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	071b      	lsls	r3, r3, #28
 80038c2:	4917      	ldr	r1, [pc, #92]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038ca:	4b16      	ldr	r3, [pc, #88]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038d0:	f7fe f9c2 	bl	8001c58 <HAL_GetTick>
 80038d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038d8:	f7fe f9be 	bl	8001c58 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e09f      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f040 8095 	bne.w	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003904:	f7fe f9a8 	bl	8001c58 <HAL_GetTick>
 8003908:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800390a:	e00f      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800390c:	f7fe f9a4 	bl	8001c58 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d908      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e085      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	42470068 	.word	0x42470068
 8003928:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800392c:	4b41      	ldr	r3, [pc, #260]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003938:	d0e8      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003956:	2b00      	cmp	r3, #0
 8003958:	d02b      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	2b00      	cmp	r3, #0
 8003960:	d127      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003962:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	431a      	orrs	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	3b01      	subs	r3, #1
 8003986:	041b      	lsls	r3, r3, #16
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	4928      	ldr	r1, [pc, #160]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003998:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800399a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	3b01      	subs	r3, #1
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	4922      	ldr	r1, [pc, #136]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01d      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x612>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c6:	d118      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039c8:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	0e1b      	lsrs	r3, r3, #24
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	019b      	lsls	r3, r3, #6
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	3b01      	subs	r3, #1
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	4910      	ldr	r1, [pc, #64]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fe f92a 	bl	8001c58 <HAL_GetTick>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003a08:	f7fe f926 	bl	8001c58 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e007      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a26:	d1ef      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3730      	adds	r7, #48	; 0x30
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	42470070 	.word	0x42470070

08003a3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	2b07      	cmp	r3, #7
 8003a62:	f200 8224 	bhi.w	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003a66:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003c6f 	.word	0x08003c6f
 8003a70:	08003d99 	.word	0x08003d99
 8003a74:	08003eaf 	.word	0x08003eaf
 8003a78:	08003a8d 	.word	0x08003a8d
 8003a7c:	08003eaf 	.word	0x08003eaf
 8003a80:	08003eaf 	.word	0x08003eaf
 8003a84:	08003eaf 	.word	0x08003eaf
 8003a88:	08003a8d 	.word	0x08003a8d
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003a8c:	4ba8      	ldr	r3, [pc, #672]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a92:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aa2:	f000 80d6 	beq.w	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aac:	f200 80dd 	bhi.w	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab6:	f000 809f 	beq.w	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ac0:	f200 80d3 	bhi.w	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aca:	d05b      	beq.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad2:	f200 80ca 	bhi.w	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003adc:	f000 80b6 	beq.w	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ae6:	f200 80c0 	bhi.w	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003af0:	f000 8082 	beq.w	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003afa:	f200 80b6 	bhi.w	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0a:	d03b      	beq.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003b0c:	e0ad      	b.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003b0e:	4b88      	ldr	r3, [pc, #544]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003b1a:	4b85      	ldr	r3, [pc, #532]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b24:	4a83      	ldr	r2, [pc, #524]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e008      	b.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003b2e:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b38:	4a7f      	ldr	r2, [pc, #508]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003b40:	4b7b      	ldr	r3, [pc, #492]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	0e1b      	lsrs	r3, r3, #24
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8003b4e:	4b78      	ldr	r3, [pc, #480]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	fb03 f202 	mul.w	r2, r3, r2
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003b68:	4b71      	ldr	r3, [pc, #452]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	3301      	adds	r3, #1
 8003b76:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	61fb      	str	r3, [r7, #28]
          break;
 8003b82:	e073      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003b84:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003b90:	4b67      	ldr	r3, [pc, #412]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9a:	4a66      	ldr	r2, [pc, #408]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003ba4:	4b62      	ldr	r3, [pc, #392]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bae:	4a62      	ldr	r2, [pc, #392]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003bb6:	4b5e      	ldr	r3, [pc, #376]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bbc:	0e1b      	lsrs	r3, r3, #24
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003bc4:	4b5a      	ldr	r3, [pc, #360]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bca:	099b      	lsrs	r3, r3, #6
 8003bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	fb03 f202 	mul.w	r2, r3, r2
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003bde:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	3301      	adds	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	61fb      	str	r3, [r7, #28]
          break;
 8003bf6:	e039      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003bf8:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c04:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c0c:	4a49      	ldr	r2, [pc, #292]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	e007      	b.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003c16:	4b46      	ldr	r3, [pc, #280]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1e:	4a46      	ldr	r2, [pc, #280]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003c26:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	0f1b      	lsrs	r3, r3, #28
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003c32:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	fb03 f202 	mul.w	r2, r3, r2
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	61fb      	str	r3, [r7, #28]
          break;
 8003c4a:	e00f      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c4c:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003c4e:	61fb      	str	r3, [r7, #28]
          break;
 8003c50:	e00c      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003c52:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003c5e:	4b35      	ldr	r3, [pc, #212]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c60:	61fb      	str	r3, [r7, #28]
          break;
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003c64:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003c66:	61fb      	str	r3, [r7, #28]
          break;
 8003c68:	e000      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003c6a:	bf00      	nop
        }
      }
      break;
 8003c6c:	e11f      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003c6e:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c74:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003c80:	d079      	beq.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003c88:	f200 8082 	bhi.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c92:	d03c      	beq.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c9a:	d879      	bhi.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d006      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ca8:	d172      	bne.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003cac:	61fb      	str	r3, [r7, #28]
          break;
 8003cae:	e072      	b.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003cd2:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfe:	0f1b      	lsrs	r3, r3, #28
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	61fb      	str	r3, [r7, #28]
          break;
 8003d0c:	e043      	b.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1a:	d111      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	e010      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	017d7840 	.word	0x017d7840
 8003d3c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d40:	4b5e      	ldr	r3, [pc, #376]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d48:	4a5d      	ldr	r2, [pc, #372]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003d50:	4b5a      	ldr	r3, [pc, #360]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003d62:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	0f1b      	lsrs	r3, r3, #28
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	61fb      	str	r3, [r7, #28]
          break;
 8003d74:	e00f      	b.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d76:	4b51      	ldr	r3, [pc, #324]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d82:	d102      	bne.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003d84:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003d86:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003d88:	e005      	b.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003d8a:	4b4d      	ldr	r3, [pc, #308]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003d8c:	61fb      	str	r3, [r7, #28]
          break;
 8003d8e:	e002      	b.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
          break;
 8003d94:	bf00      	nop
        }
      }
      break;
 8003d96:	e08a      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003d98:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003daa:	d06f      	beq.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003db2:	d878      	bhi.n	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dba:	d03c      	beq.n	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dc2:	d870      	bhi.n	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d006      	beq.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd0:	d169      	bne.n	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003dd2:	4b3d      	ldr	r3, [pc, #244]	; (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003dd4:	61fb      	str	r3, [r7, #28]
          break;
 8003dd6:	e069      	b.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003dd8:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de4:	d109      	bne.n	8003dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003de6:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003df0:	4a34      	ldr	r2, [pc, #208]	; (8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	e008      	b.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003dfa:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e04:	4a2e      	ldr	r2, [pc, #184]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e12:	099b      	lsrs	r3, r3, #6
 8003e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003e20:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e26:	0f1b      	lsrs	r3, r3, #28
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	61fb      	str	r3, [r7, #28]
          break;
 8003e34:	e03a      	b.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e36:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e42:	d108      	bne.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	61bb      	str	r3, [r7, #24]
 8003e54:	e007      	b.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e56:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e5e:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	099b      	lsrs	r3, r3, #6
 8003e6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003e78:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	0f1b      	lsrs	r3, r3, #28
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	61fb      	str	r3, [r7, #28]
          break;
 8003e8a:	e00f      	b.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e98:	d102      	bne.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003e9c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003e9e:	e005      	b.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003ea2:	61fb      	str	r3, [r7, #28]
          break;
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
          break;
 8003eaa:	bf00      	nop
        }
      }
      break;
 8003eac:	bf00      	nop
    }
  }
  return frequency;
 8003eae:	69fb      	ldr	r3, [r7, #28]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3724      	adds	r7, #36	; 0x24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	00f42400 	.word	0x00f42400
 8003ec4:	017d7840 	.word	0x017d7840
 8003ec8:	00bb8000 	.word	0x00bb8000

08003ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed0:	b0a6      	sub	sp, #152	; 0x98
 8003ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef2:	4bc8      	ldr	r3, [pc, #800]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	f200 817e 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x330>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f3d 	.word	0x08003f3d
 8003f0c:	080041fd 	.word	0x080041fd
 8003f10:	080041fd 	.word	0x080041fd
 8003f14:	080041fd 	.word	0x080041fd
 8003f18:	08003f45 	.word	0x08003f45
 8003f1c:	080041fd 	.word	0x080041fd
 8003f20:	080041fd 	.word	0x080041fd
 8003f24:	080041fd 	.word	0x080041fd
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	080041fd 	.word	0x080041fd
 8003f30:	080041fd 	.word	0x080041fd
 8003f34:	080041fd 	.word	0x080041fd
 8003f38:	080040b7 	.word	0x080040b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f3c:	4bb6      	ldr	r3, [pc, #728]	; (8004218 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003f42:	e15f      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f44:	4bb5      	ldr	r3, [pc, #724]	; (800421c <HAL_RCC_GetSysClockFreq+0x350>)
 8003f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003f4a:	e15b      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f4c:	4bb1      	ldr	r3, [pc, #708]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f58:	4bae      	ldr	r3, [pc, #696]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d031      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f64:	4bab      	ldr	r3, [pc, #684]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	099b      	lsrs	r3, r3, #6
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f76:	663b      	str	r3, [r7, #96]	; 0x60
 8003f78:	2300      	movs	r3, #0
 8003f7a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f7c:	4ba7      	ldr	r3, [pc, #668]	; (800421c <HAL_RCC_GetSysClockFreq+0x350>)
 8003f7e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003f82:	462a      	mov	r2, r5
 8003f84:	fb03 f202 	mul.w	r2, r3, r2
 8003f88:	2300      	movs	r3, #0
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	4aa2      	ldr	r2, [pc, #648]	; (800421c <HAL_RCC_GetSysClockFreq+0x350>)
 8003f94:	4621      	mov	r1, r4
 8003f96:	fba1 1202 	umull	r1, r2, r1, r2
 8003f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f9c:	460a      	mov	r2, r1
 8003f9e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003fa0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003fa2:	4413      	add	r3, r2
 8003fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003faa:	2200      	movs	r2, #0
 8003fac:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003fb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fb4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003fb8:	f7fc f97a 	bl	80002b0 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fc6:	e064      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc8:	4b92      	ldr	r3, [pc, #584]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	2200      	movs	r2, #0
 8003fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd2:	657a      	str	r2, [r7, #84]	; 0x54
 8003fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fdc:	2300      	movs	r3, #0
 8003fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	462b      	mov	r3, r5
 8003fe8:	f04f 0000 	mov.w	r0, #0
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	0159      	lsls	r1, r3, #5
 8003ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff6:	0150      	lsls	r0, r2, #5
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	1a51      	subs	r1, r2, r1
 8004000:	6139      	str	r1, [r7, #16]
 8004002:	4629      	mov	r1, r5
 8004004:	eb63 0301 	sbc.w	r3, r3, r1
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004016:	4659      	mov	r1, fp
 8004018:	018b      	lsls	r3, r1, #6
 800401a:	4651      	mov	r1, sl
 800401c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004020:	4651      	mov	r1, sl
 8004022:	018a      	lsls	r2, r1, #6
 8004024:	4651      	mov	r1, sl
 8004026:	ebb2 0801 	subs.w	r8, r2, r1
 800402a:	4659      	mov	r1, fp
 800402c:	eb63 0901 	sbc.w	r9, r3, r1
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800403c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004040:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004044:	4690      	mov	r8, r2
 8004046:	4699      	mov	r9, r3
 8004048:	4623      	mov	r3, r4
 800404a:	eb18 0303 	adds.w	r3, r8, r3
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	462b      	mov	r3, r5
 8004052:	eb49 0303 	adc.w	r3, r9, r3
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004064:	4629      	mov	r1, r5
 8004066:	028b      	lsls	r3, r1, #10
 8004068:	4621      	mov	r1, r4
 800406a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800406e:	4621      	mov	r1, r4
 8004070:	028a      	lsls	r2, r1, #10
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800407a:	2200      	movs	r2, #0
 800407c:	643b      	str	r3, [r7, #64]	; 0x40
 800407e:	647a      	str	r2, [r7, #68]	; 0x44
 8004080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004084:	f7fc f914 	bl	80002b0 <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4613      	mov	r3, r2
 800408e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004092:	4b60      	ldr	r3, [pc, #384]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	0c1b      	lsrs	r3, r3, #16
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	3301      	adds	r3, #1
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80040a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80040b4:	e0a6      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b6:	4b57      	ldr	r3, [pc, #348]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040c2:	4b54      	ldr	r3, [pc, #336]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d02a      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ce:	4b51      	ldr	r3, [pc, #324]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	099b      	lsrs	r3, r3, #6
 80040d4:	2200      	movs	r2, #0
 80040d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040e0:	2100      	movs	r1, #0
 80040e2:	4b4e      	ldr	r3, [pc, #312]	; (800421c <HAL_RCC_GetSysClockFreq+0x350>)
 80040e4:	fb03 f201 	mul.w	r2, r3, r1
 80040e8:	2300      	movs	r3, #0
 80040ea:	fb00 f303 	mul.w	r3, r0, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	4a4a      	ldr	r2, [pc, #296]	; (800421c <HAL_RCC_GetSysClockFreq+0x350>)
 80040f2:	fba0 1202 	umull	r1, r2, r0, r2
 80040f6:	677a      	str	r2, [r7, #116]	; 0x74
 80040f8:	460a      	mov	r2, r1
 80040fa:	673a      	str	r2, [r7, #112]	; 0x70
 80040fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040fe:	4413      	add	r3, r2
 8004100:	677b      	str	r3, [r7, #116]	; 0x74
 8004102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004106:	2200      	movs	r2, #0
 8004108:	633b      	str	r3, [r7, #48]	; 0x30
 800410a:	637a      	str	r2, [r7, #52]	; 0x34
 800410c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004110:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004114:	f7fc f8cc 	bl	80002b0 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004122:	e05b      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004124:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	2200      	movs	r2, #0
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
 800412e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	2300      	movs	r3, #0
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004140:	4642      	mov	r2, r8
 8004142:	464b      	mov	r3, r9
 8004144:	f04f 0000 	mov.w	r0, #0
 8004148:	f04f 0100 	mov.w	r1, #0
 800414c:	0159      	lsls	r1, r3, #5
 800414e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004152:	0150      	lsls	r0, r2, #5
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4641      	mov	r1, r8
 800415a:	ebb2 0a01 	subs.w	sl, r2, r1
 800415e:	4649      	mov	r1, r9
 8004160:	eb63 0b01 	sbc.w	fp, r3, r1
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004170:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004174:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004178:	ebb2 040a 	subs.w	r4, r2, sl
 800417c:	eb63 050b 	sbc.w	r5, r3, fp
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	00eb      	lsls	r3, r5, #3
 800418a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800418e:	00e2      	lsls	r2, r4, #3
 8004190:	4614      	mov	r4, r2
 8004192:	461d      	mov	r5, r3
 8004194:	4643      	mov	r3, r8
 8004196:	18e3      	adds	r3, r4, r3
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	464b      	mov	r3, r9
 800419c:	eb45 0303 	adc.w	r3, r5, r3
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ae:	4629      	mov	r1, r5
 80041b0:	028b      	lsls	r3, r1, #10
 80041b2:	4621      	mov	r1, r4
 80041b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b8:	4621      	mov	r1, r4
 80041ba:	028a      	lsls	r2, r1, #10
 80041bc:	4610      	mov	r0, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041c4:	2200      	movs	r2, #0
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	61fa      	str	r2, [r7, #28]
 80041ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ce:	f7fc f86f 	bl	80002b0 <__aeabi_uldivmod>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4613      	mov	r3, r2
 80041d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041dc:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <HAL_RCC_GetSysClockFreq+0x348>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	0f1b      	lsrs	r3, r3, #28
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80041ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80041fa:	e003      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_RCC_GetSysClockFreq+0x34c>)
 80041fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004204:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004208:	4618      	mov	r0, r3
 800420a:	3798      	adds	r7, #152	; 0x98
 800420c:	46bd      	mov	sp, r7
 800420e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800
 8004218:	00f42400 	.word	0x00f42400
 800421c:	017d7840 	.word	0x017d7840

08004220 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e28d      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8083 	beq.w	8004346 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004240:	4b94      	ldr	r3, [pc, #592]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b04      	cmp	r3, #4
 800424a:	d019      	beq.n	8004280 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800424c:	4b91      	ldr	r3, [pc, #580]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004254:	2b08      	cmp	r3, #8
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004258:	4b8e      	ldr	r3, [pc, #568]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004264:	d00c      	beq.n	8004280 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004266:	4b8b      	ldr	r3, [pc, #556]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800426e:	2b0c      	cmp	r3, #12
 8004270:	d112      	bne.n	8004298 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004272:	4b88      	ldr	r3, [pc, #544]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427e:	d10b      	bne.n	8004298 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004280:	4b84      	ldr	r3, [pc, #528]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d05b      	beq.n	8004344 <HAL_RCC_OscConfig+0x124>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d157      	bne.n	8004344 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e25a      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a0:	d106      	bne.n	80042b0 <HAL_RCC_OscConfig+0x90>
 80042a2:	4b7c      	ldr	r3, [pc, #496]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7b      	ldr	r2, [pc, #492]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e01d      	b.n	80042ec <HAL_RCC_OscConfig+0xcc>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0xb4>
 80042ba:	4b76      	ldr	r3, [pc, #472]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a75      	ldr	r2, [pc, #468]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80042c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b73      	ldr	r3, [pc, #460]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a72      	ldr	r2, [pc, #456]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e00b      	b.n	80042ec <HAL_RCC_OscConfig+0xcc>
 80042d4:	4b6f      	ldr	r3, [pc, #444]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6e      	ldr	r2, [pc, #440]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80042da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	4b6c      	ldr	r3, [pc, #432]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a6b      	ldr	r2, [pc, #428]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80042e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d013      	beq.n	800431c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fd fcb0 	bl	8001c58 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042fc:	f7fd fcac 	bl	8001c58 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	; 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e21f      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	4b61      	ldr	r3, [pc, #388]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0xdc>
 800431a:	e014      	b.n	8004346 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fd fc9c 	bl	8001c58 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004324:	f7fd fc98 	bl	8001c58 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	; 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e20b      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	4b57      	ldr	r3, [pc, #348]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x104>
 8004342:	e000      	b.n	8004346 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d06f      	beq.n	8004432 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004352:	4b50      	ldr	r3, [pc, #320]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b00      	cmp	r3, #0
 800435c:	d017      	beq.n	800438e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800435e:	4b4d      	ldr	r3, [pc, #308]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004366:	2b08      	cmp	r3, #8
 8004368:	d105      	bne.n	8004376 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800436a:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d11c      	bne.n	80043bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004382:	4b44      	ldr	r3, [pc, #272]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d116      	bne.n	80043bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	4b41      	ldr	r3, [pc, #260]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_RCC_OscConfig+0x186>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d001      	beq.n	80043a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e1d3      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4937      	ldr	r1, [pc, #220]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ba:	e03a      	b.n	8004432 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c4:	4b34      	ldr	r3, [pc, #208]	; (8004498 <HAL_RCC_OscConfig+0x278>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fd fc45 	bl	8001c58 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d2:	f7fd fc41 	bl	8001c58 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e1b4      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e4:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b28      	ldr	r3, [pc, #160]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4925      	ldr	r1, [pc, #148]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
 8004404:	e015      	b.n	8004432 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <HAL_RCC_OscConfig+0x278>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd fc24 	bl	8001c58 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004414:	f7fd fc20 	bl	8001c58 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e193      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d036      	beq.n	80044ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <HAL_RCC_OscConfig+0x27c>)
 8004448:	2201      	movs	r2, #1
 800444a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fd fc04 	bl	8001c58 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004454:	f7fd fc00 	bl	8001c58 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e173      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_OscConfig+0x274>)
 8004468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x234>
 8004472:	e01b      	b.n	80044ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <HAL_RCC_OscConfig+0x27c>)
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd fbed 	bl	8001c58 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004480:	e00e      	b.n	80044a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004482:	f7fd fbe9 	bl	8001c58 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d907      	bls.n	80044a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e15c      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
 8004494:	40023800 	.word	0x40023800
 8004498:	42470000 	.word	0x42470000
 800449c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	4b8a      	ldr	r3, [pc, #552]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80044a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ea      	bne.n	8004482 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8097 	beq.w	80045e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044be:	4b83      	ldr	r3, [pc, #524]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	4b7f      	ldr	r3, [pc, #508]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	4a7e      	ldr	r2, [pc, #504]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6413      	str	r3, [r2, #64]	; 0x40
 80044da:	4b7c      	ldr	r3, [pc, #496]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	4b79      	ldr	r3, [pc, #484]	; (80046d0 <HAL_RCC_OscConfig+0x4b0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f6:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <HAL_RCC_OscConfig+0x4b0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a75      	ldr	r2, [pc, #468]	; (80046d0 <HAL_RCC_OscConfig+0x4b0>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fd fba9 	bl	8001c58 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fd fba5 	bl	8001c58 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e118      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4b6c      	ldr	r3, [pc, #432]	; (80046d0 <HAL_RCC_OscConfig+0x4b0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x31e>
 8004530:	4b66      	ldr	r3, [pc, #408]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	4a65      	ldr	r2, [pc, #404]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6713      	str	r3, [r2, #112]	; 0x70
 800453c:	e01c      	b.n	8004578 <HAL_RCC_OscConfig+0x358>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b05      	cmp	r3, #5
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x340>
 8004546:	4b61      	ldr	r3, [pc, #388]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	4a60      	ldr	r2, [pc, #384]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 800454c:	f043 0304 	orr.w	r3, r3, #4
 8004550:	6713      	str	r3, [r2, #112]	; 0x70
 8004552:	4b5e      	ldr	r3, [pc, #376]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	4a5d      	ldr	r2, [pc, #372]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6713      	str	r3, [r2, #112]	; 0x70
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0x358>
 8004560:	4b5a      	ldr	r3, [pc, #360]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	4a59      	ldr	r2, [pc, #356]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	6713      	str	r3, [r2, #112]	; 0x70
 800456c:	4b57      	ldr	r3, [pc, #348]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	4a56      	ldr	r2, [pc, #344]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004572:	f023 0304 	bic.w	r3, r3, #4
 8004576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d015      	beq.n	80045ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fd fb6a 	bl	8001c58 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004586:	e00a      	b.n	800459e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004588:	f7fd fb66 	bl	8001c58 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	; 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e0d7      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459e:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0ee      	beq.n	8004588 <HAL_RCC_OscConfig+0x368>
 80045aa:	e014      	b.n	80045d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ac:	f7fd fb54 	bl	8001c58 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b4:	f7fd fb50 	bl	8001c58 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e0c1      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ca:	4b40      	ldr	r3, [pc, #256]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ee      	bne.n	80045b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d105      	bne.n	80045e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045dc:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	4a3a      	ldr	r2, [pc, #232]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80045e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80ad 	beq.w	800474c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f2:	4b36      	ldr	r3, [pc, #216]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d060      	beq.n	80046c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d145      	bne.n	8004692 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <HAL_RCC_OscConfig+0x4b4>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd fb24 	bl	8001c58 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004614:	f7fd fb20 	bl	8001c58 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e093      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004626:	4b29      	ldr	r3, [pc, #164]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	019b      	lsls	r3, r3, #6
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	3b01      	subs	r3, #1
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	071b      	lsls	r3, r3, #28
 800465e:	491b      	ldr	r1, [pc, #108]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <HAL_RCC_OscConfig+0x4b4>)
 8004666:	2201      	movs	r2, #1
 8004668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fd faf5 	bl	8001c58 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004672:	f7fd faf1 	bl	8001c58 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e064      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004684:	4b11      	ldr	r3, [pc, #68]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f0      	beq.n	8004672 <HAL_RCC_OscConfig+0x452>
 8004690:	e05c      	b.n	800474c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004692:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <HAL_RCC_OscConfig+0x4b4>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fd fade 	bl	8001c58 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fd fada 	bl	8001c58 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e04d      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_RCC_OscConfig+0x4ac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x480>
 80046be:	e045      	b.n	800474c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e040      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40007000 	.word	0x40007000
 80046d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046d8:	4b1f      	ldr	r3, [pc, #124]	; (8004758 <HAL_RCC_OscConfig+0x538>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d030      	beq.n	8004748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d129      	bne.n	8004748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d122      	bne.n	8004748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004708:	4013      	ands	r3, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800470e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004710:	4293      	cmp	r3, r2
 8004712:	d119      	bne.n	8004748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	3b01      	subs	r3, #1
 8004722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d10f      	bne.n	8004748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d107      	bne.n	8004748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40023800 	.word	0x40023800

0800475c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e07b      	b.n	8004866 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b00      	cmp	r3, #0
 8004774:	d108      	bne.n	8004788 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477e:	d009      	beq.n	8004794 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	61da      	str	r2, [r3, #28]
 8004786:	e005      	b.n	8004794 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd f88c 	bl	80018cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	ea42 0103 	orr.w	r1, r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	f003 0104 	and.w	r1, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f003 0210 	and.w	r2, r3, #16
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004854:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b088      	sub	sp, #32
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_SPI_Transmit+0x22>
 800488c:	2302      	movs	r3, #2
 800488e:	e126      	b.n	8004ade <HAL_SPI_Transmit+0x270>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004898:	f7fd f9de 	bl	8001c58 <HAL_GetTick>
 800489c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d002      	beq.n	80048b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048ae:	2302      	movs	r3, #2
 80048b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048b2:	e10b      	b.n	8004acc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_SPI_Transmit+0x52>
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048c4:	e102      	b.n	8004acc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2203      	movs	r2, #3
 80048ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	88fa      	ldrh	r2, [r7, #6]
 80048de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	88fa      	ldrh	r2, [r7, #6]
 80048e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490c:	d10f      	bne.n	800492e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800492c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d007      	beq.n	800494c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800494a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004954:	d14b      	bne.n	80049ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Transmit+0xf6>
 800495e:	8afb      	ldrh	r3, [r7, #22]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d13e      	bne.n	80049e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	881a      	ldrh	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	1c9a      	adds	r2, r3, #2
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004988:	e02b      	b.n	80049e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d112      	bne.n	80049be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	881a      	ldrh	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	1c9a      	adds	r2, r3, #2
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80049bc:	e011      	b.n	80049e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049be:	f7fd f94b 	bl	8001c58 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d803      	bhi.n	80049d6 <HAL_SPI_Transmit+0x168>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d102      	bne.n	80049dc <HAL_SPI_Transmit+0x16e>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d102      	bne.n	80049e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049e0:	e074      	b.n	8004acc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ce      	bne.n	800498a <HAL_SPI_Transmit+0x11c>
 80049ec:	e04c      	b.n	8004a88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_SPI_Transmit+0x18e>
 80049f6:	8afb      	ldrh	r3, [r7, #22]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d140      	bne.n	8004a7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	7812      	ldrb	r2, [r2, #0]
 8004a08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a22:	e02c      	b.n	8004a7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d113      	bne.n	8004a5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	7812      	ldrb	r2, [r2, #0]
 8004a3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a58:	e011      	b.n	8004a7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5a:	f7fd f8fd 	bl	8001c58 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d803      	bhi.n	8004a72 <HAL_SPI_Transmit+0x204>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d102      	bne.n	8004a78 <HAL_SPI_Transmit+0x20a>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a7c:	e026      	b.n	8004acc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1cd      	bne.n	8004a24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	6839      	ldr	r1, [r7, #0]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fa55 	bl	8004f3c <SPI_EndRxTxTransaction>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e000      	b.n	8004acc <HAL_SPI_Transmit+0x25e>
  }

error:
 8004aca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004adc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b08c      	sub	sp, #48	; 0x30
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004af4:	2301      	movs	r3, #1
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x26>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e18a      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x33c>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b14:	f7fd f8a0 	bl	8001c58 <HAL_GetTick>
 8004b18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b2a:	887b      	ldrh	r3, [r7, #2]
 8004b2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d00f      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x70>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b3c:	d107      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x68>
 8004b46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d003      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b54:	e15b      	b.n	8004e0e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_SPI_TransmitReceive+0x82>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_SPI_TransmitReceive+0x82>
 8004b62:	887b      	ldrh	r3, [r7, #2]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b6e:	e14e      	b.n	8004e0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d003      	beq.n	8004b84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2205      	movs	r2, #5
 8004b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	887a      	ldrh	r2, [r7, #2]
 8004b94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	887a      	ldrh	r2, [r7, #2]
 8004b9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	887a      	ldrh	r2, [r7, #2]
 8004ba6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	887a      	ldrh	r2, [r7, #2]
 8004bac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d007      	beq.n	8004bd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be0:	d178      	bne.n	8004cd4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x10a>
 8004bea:	8b7b      	ldrh	r3, [r7, #26]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d166      	bne.n	8004cbe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	881a      	ldrh	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	1c9a      	adds	r2, r3, #2
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c14:	e053      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d11b      	bne.n	8004c5c <HAL_SPI_TransmitReceive+0x176>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d016      	beq.n	8004c5c <HAL_SPI_TransmitReceive+0x176>
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d113      	bne.n	8004c5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	881a      	ldrh	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d119      	bne.n	8004c9e <HAL_SPI_TransmitReceive+0x1b8>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d014      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	b292      	uxth	r2, r2
 8004c80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	1c9a      	adds	r2, r3, #2
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c9e:	f7fc ffdb 	bl	8001c58 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d807      	bhi.n	8004cbe <HAL_SPI_TransmitReceive+0x1d8>
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d003      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cbc:	e0a7      	b.n	8004e0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1a6      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x130>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1a1      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x130>
 8004cd2:	e07c      	b.n	8004dce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0x1fc>
 8004cdc:	8b7b      	ldrh	r3, [r7, #26]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d16b      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d08:	e057      	b.n	8004dba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d11c      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x26c>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d017      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x26c>
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d114      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	7812      	ldrb	r2, [r2, #0]
 8004d34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d119      	bne.n	8004d94 <HAL_SPI_TransmitReceive+0x2ae>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d014      	beq.n	8004d94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d90:	2301      	movs	r3, #1
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d94:	f7fc ff60 	bl	8001c58 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d803      	bhi.n	8004dac <HAL_SPI_TransmitReceive+0x2c6>
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d102      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x2cc>
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004db8:	e029      	b.n	8004e0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1a2      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x224>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d19d      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f8b2 	bl	8004f3c <SPI_EndRxTxTransaction>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d006      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004dea:	e010      	b.n	8004e0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	e000      	b.n	8004e0e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004e0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3730      	adds	r7, #48	; 0x30
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e3c:	f7fc ff0c 	bl	8001c58 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	4413      	add	r3, r2
 8004e4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e4c:	f7fc ff04 	bl	8001c58 <HAL_GetTick>
 8004e50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e52:	4b39      	ldr	r3, [pc, #228]	; (8004f38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	015b      	lsls	r3, r3, #5
 8004e58:	0d1b      	lsrs	r3, r3, #20
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	fb02 f303 	mul.w	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e62:	e054      	b.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d050      	beq.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e6c:	f7fc fef4 	bl	8001c58 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d902      	bls.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d13d      	bne.n	8004efe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9a:	d111      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea4:	d004      	beq.n	8004eb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eae:	d107      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec8:	d10f      	bne.n	8004eea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e017      	b.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4013      	ands	r3, r2
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	bf0c      	ite	eq
 8004f1e:	2301      	moveq	r3, #1
 8004f20:	2300      	movne	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d19b      	bne.n	8004e64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	2000003c 	.word	0x2000003c

08004f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f48:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <SPI_EndRxTxTransaction+0x7c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <SPI_EndRxTxTransaction+0x80>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	0d5b      	lsrs	r3, r3, #21
 8004f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f58:	fb02 f303 	mul.w	r3, r2, r3
 8004f5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f66:	d112      	bne.n	8004f8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2180      	movs	r1, #128	; 0x80
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff ff5a 	bl	8004e2c <SPI_WaitFlagStateUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d016      	beq.n	8004fac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	f043 0220 	orr.w	r2, r3, #32
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e00f      	b.n	8004fae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b80      	cmp	r3, #128	; 0x80
 8004fa6:	d0f2      	beq.n	8004f8e <SPI_EndRxTxTransaction+0x52>
 8004fa8:	e000      	b.n	8004fac <SPI_EndRxTxTransaction+0x70>
        break;
 8004faa:	bf00      	nop
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	2000003c 	.word	0x2000003c
 8004fbc:	165e9f81 	.word	0x165e9f81

08004fc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004fc4:	4904      	ldr	r1, [pc, #16]	; (8004fd8 <MX_FATFS_Init+0x18>)
 8004fc6:	4805      	ldr	r0, [pc, #20]	; (8004fdc <MX_FATFS_Init+0x1c>)
 8004fc8:	f003 f900 	bl	80081cc <FATFS_LinkDriver>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4b03      	ldr	r3, [pc, #12]	; (8004fe0 <MX_FATFS_Init+0x20>)
 8004fd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004fd4:	bf00      	nop
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20003260 	.word	0x20003260
 8004fdc:	20000048 	.word	0x20000048
 8004fe0:	2000325c 	.word	0x2000325c

08004fe4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004fe8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	4618      	mov	r0, r3
 8005002:	f7fb fe21 	bl	8000c48 <SD_disk_initialize>
 8005006:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	4618      	mov	r0, r3
 800501e:	f7fb fef9 	bl	8000e14 <SD_disk_status>
 8005022:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	4603      	mov	r3, r0
 800503a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800503c:	7bf8      	ldrb	r0, [r7, #15]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	f7fb fefc 	bl	8000e40 <SD_disk_read>
 8005048:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8005062:	7bf8      	ldrb	r0, [r7, #15]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	f7fb ff53 	bl	8000f14 <SD_disk_write>
 800506e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	603a      	str	r2, [r7, #0]
 8005082:	71fb      	strb	r3, [r7, #7]
 8005084:	460b      	mov	r3, r1
 8005086:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005088:	79b9      	ldrb	r1, [r7, #6]
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7fb ffc4 	bl	800101c <SD_disk_ioctl>
 8005094:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <disk_status+0x30>)
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	79fa      	ldrb	r2, [r7, #7]
 80050b8:	4905      	ldr	r1, [pc, #20]	; (80050d0 <disk_status+0x30>)
 80050ba:	440a      	add	r2, r1
 80050bc:	7a12      	ldrb	r2, [r2, #8]
 80050be:	4610      	mov	r0, r2
 80050c0:	4798      	blx	r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	2000348c 	.word	0x2000348c

080050d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	4a0d      	ldr	r2, [pc, #52]	; (800511c <disk_initialize+0x48>)
 80050e6:	5cd3      	ldrb	r3, [r2, r3]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d111      	bne.n	8005110 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	4a0b      	ldr	r2, [pc, #44]	; (800511c <disk_initialize+0x48>)
 80050f0:	2101      	movs	r1, #1
 80050f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	4a09      	ldr	r2, [pc, #36]	; (800511c <disk_initialize+0x48>)
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	79fa      	ldrb	r2, [r7, #7]
 8005102:	4906      	ldr	r1, [pc, #24]	; (800511c <disk_initialize+0x48>)
 8005104:	440a      	add	r2, r1
 8005106:	7a12      	ldrb	r2, [r2, #8]
 8005108:	4610      	mov	r0, r2
 800510a:	4798      	blx	r3
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	2000348c 	.word	0x2000348c

08005120 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <disk_read+0x3c>)
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	689c      	ldr	r4, [r3, #8]
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	4a07      	ldr	r2, [pc, #28]	; (800515c <disk_read+0x3c>)
 8005140:	4413      	add	r3, r2
 8005142:	7a18      	ldrb	r0, [r3, #8]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	47a0      	blx	r4
 800514c:	4603      	mov	r3, r0
 800514e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005150:	7dfb      	ldrb	r3, [r7, #23]
}
 8005152:	4618      	mov	r0, r3
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	bd90      	pop	{r4, r7, pc}
 800515a:	bf00      	nop
 800515c:	2000348c 	.word	0x2000348c

08005160 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <disk_write+0x3c>)
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	68dc      	ldr	r4, [r3, #12]
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	4a07      	ldr	r2, [pc, #28]	; (800519c <disk_write+0x3c>)
 8005180:	4413      	add	r3, r2
 8005182:	7a18      	ldrb	r0, [r3, #8]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	47a0      	blx	r4
 800518c:	4603      	mov	r3, r0
 800518e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	bd90      	pop	{r4, r7, pc}
 800519a:	bf00      	nop
 800519c:	2000348c 	.word	0x2000348c

080051a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	603a      	str	r2, [r7, #0]
 80051aa:	71fb      	strb	r3, [r7, #7]
 80051ac:	460b      	mov	r3, r1
 80051ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <disk_ioctl+0x38>)
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	79fa      	ldrb	r2, [r7, #7]
 80051be:	4906      	ldr	r1, [pc, #24]	; (80051d8 <disk_ioctl+0x38>)
 80051c0:	440a      	add	r2, r1
 80051c2:	7a10      	ldrb	r0, [r2, #8]
 80051c4:	79b9      	ldrb	r1, [r7, #6]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	4798      	blx	r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	2000348c 	.word	0x2000348c

080051dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3301      	adds	r3, #1
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80051ec:	89fb      	ldrh	r3, [r7, #14]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	b21a      	sxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b21b      	sxth	r3, r3
 80051f8:	4313      	orrs	r3, r2
 80051fa:	b21b      	sxth	r3, r3
 80051fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80051fe:	89fb      	ldrh	r3, [r7, #14]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3303      	adds	r3, #3
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	3202      	adds	r2, #2
 8005224:	7812      	ldrb	r2, [r2, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	3201      	adds	r2, #1
 8005232:	7812      	ldrb	r2, [r2, #0]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
	return rv;
 8005244:	68fb      	ldr	r3, [r7, #12]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	460b      	mov	r3, r1
 800525c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	887a      	ldrh	r2, [r7, #2]
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	887b      	ldrh	r3, [r7, #2]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	887a      	ldrh	r2, [r7, #2]
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	0a1b      	lsrs	r3, r3, #8
 80052a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	0a1b      	lsrs	r3, r3, #8
 80052c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00d      	beq.n	8005316 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	1c53      	adds	r3, r2, #1
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	6179      	str	r1, [r7, #20]
 8005306:	7812      	ldrb	r2, [r2, #0]
 8005308:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3b01      	subs	r3, #1
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f1      	bne.n	80052fa <mem_cpy+0x1a>
	}
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005322:	b480      	push	{r7}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	617a      	str	r2, [r7, #20]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3b01      	subs	r3, #1
 8005342:	607b      	str	r3, [r7, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f3      	bne.n	8005332 <mem_set+0x10>
}
 800534a:	bf00      	nop
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005358:	b480      	push	{r7}
 800535a:	b089      	sub	sp, #36	; 0x24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	61fa      	str	r2, [r7, #28]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	4619      	mov	r1, r3
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	61ba      	str	r2, [r7, #24]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	1acb      	subs	r3, r1, r3
 8005384:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3b01      	subs	r3, #1
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <mem_cmp+0x40>
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0eb      	beq.n	8005370 <mem_cmp+0x18>

	return r;
 8005398:	697b      	ldr	r3, [r7, #20]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3724      	adds	r7, #36	; 0x24
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80053b0:	e002      	b.n	80053b8 <chk_chr+0x12>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3301      	adds	r3, #1
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <chk_chr+0x26>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	461a      	mov	r2, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d1f2      	bne.n	80053b2 <chk_chr+0xc>
	return *str;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	781b      	ldrb	r3, [r3, #0]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e029      	b.n	8005444 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80053f0:	4a27      	ldr	r2, [pc, #156]	; (8005490 <chk_lock+0xb4>)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	4413      	add	r3, r2
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01d      	beq.n	800543a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80053fe:	4a24      	ldr	r2, [pc, #144]	; (8005490 <chk_lock+0xb4>)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	4413      	add	r3, r2
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d116      	bne.n	800543e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005410:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <chk_lock+0xb4>)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	4413      	add	r3, r2
 8005418:	3304      	adds	r3, #4
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005420:	429a      	cmp	r2, r3
 8005422:	d10c      	bne.n	800543e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005424:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <chk_lock+0xb4>)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	4413      	add	r3, r2
 800542c:	3308      	adds	r3, #8
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005434:	429a      	cmp	r2, r3
 8005436:	d102      	bne.n	800543e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005438:	e007      	b.n	800544a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800543a:	2301      	movs	r3, #1
 800543c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3301      	adds	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d9d2      	bls.n	80053f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d109      	bne.n	8005464 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <chk_lock+0x80>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d101      	bne.n	8005460 <chk_lock+0x84>
 800545c:	2300      	movs	r3, #0
 800545e:	e010      	b.n	8005482 <chk_lock+0xa6>
 8005460:	2312      	movs	r3, #18
 8005462:	e00e      	b.n	8005482 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d108      	bne.n	800547c <chk_lock+0xa0>
 800546a:	4a09      	ldr	r2, [pc, #36]	; (8005490 <chk_lock+0xb4>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	4413      	add	r3, r2
 8005472:	330c      	adds	r3, #12
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	d101      	bne.n	8005480 <chk_lock+0xa4>
 800547c:	2310      	movs	r3, #16
 800547e:	e000      	b.n	8005482 <chk_lock+0xa6>
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	2000326c 	.word	0x2000326c

08005494 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800549a:	2300      	movs	r3, #0
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	e002      	b.n	80054a6 <enq_lock+0x12>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3301      	adds	r3, #1
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d806      	bhi.n	80054ba <enq_lock+0x26>
 80054ac:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <enq_lock+0x40>)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	4413      	add	r3, r2
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f2      	bne.n	80054a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	bf14      	ite	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2300      	moveq	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	2000326c 	.word	0x2000326c

080054d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e01f      	b.n	8005528 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80054e8:	4a41      	ldr	r2, [pc, #260]	; (80055f0 <inc_lock+0x118>)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	4413      	add	r3, r2
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d113      	bne.n	8005522 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80054fa:	4a3d      	ldr	r2, [pc, #244]	; (80055f0 <inc_lock+0x118>)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	4413      	add	r3, r2
 8005502:	3304      	adds	r3, #4
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800550a:	429a      	cmp	r2, r3
 800550c:	d109      	bne.n	8005522 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800550e:	4a38      	ldr	r2, [pc, #224]	; (80055f0 <inc_lock+0x118>)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	4413      	add	r3, r2
 8005516:	3308      	adds	r3, #8
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800551e:	429a      	cmp	r2, r3
 8005520:	d006      	beq.n	8005530 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3301      	adds	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d9dc      	bls.n	80054e8 <inc_lock+0x10>
 800552e:	e000      	b.n	8005532 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005530:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d132      	bne.n	800559e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	e002      	b.n	8005544 <inc_lock+0x6c>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3301      	adds	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d806      	bhi.n	8005558 <inc_lock+0x80>
 800554a:	4a29      	ldr	r2, [pc, #164]	; (80055f0 <inc_lock+0x118>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	4413      	add	r3, r2
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1f2      	bne.n	800553e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d101      	bne.n	8005562 <inc_lock+0x8a>
 800555e:	2300      	movs	r3, #0
 8005560:	e040      	b.n	80055e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4922      	ldr	r1, [pc, #136]	; (80055f0 <inc_lock+0x118>)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	440b      	add	r3, r1
 800556e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	491e      	ldr	r1, [pc, #120]	; (80055f0 <inc_lock+0x118>)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	440b      	add	r3, r1
 800557c:	3304      	adds	r3, #4
 800557e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	491a      	ldr	r1, [pc, #104]	; (80055f0 <inc_lock+0x118>)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	440b      	add	r3, r1
 800558c:	3308      	adds	r3, #8
 800558e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005590:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <inc_lock+0x118>)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	4413      	add	r3, r2
 8005598:	330c      	adds	r3, #12
 800559a:	2200      	movs	r2, #0
 800559c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d009      	beq.n	80055b8 <inc_lock+0xe0>
 80055a4:	4a12      	ldr	r2, [pc, #72]	; (80055f0 <inc_lock+0x118>)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	4413      	add	r3, r2
 80055ac:	330c      	adds	r3, #12
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <inc_lock+0xe0>
 80055b4:	2300      	movs	r3, #0
 80055b6:	e015      	b.n	80055e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d108      	bne.n	80055d0 <inc_lock+0xf8>
 80055be:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <inc_lock+0x118>)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	4413      	add	r3, r2
 80055c6:	330c      	adds	r3, #12
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	3301      	adds	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	e001      	b.n	80055d4 <inc_lock+0xfc>
 80055d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055d4:	4906      	ldr	r1, [pc, #24]	; (80055f0 <inc_lock+0x118>)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	440b      	add	r3, r1
 80055dc:	330c      	adds	r3, #12
 80055de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3301      	adds	r3, #1
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	2000326c 	.word	0x2000326c

080055f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3b01      	subs	r3, #1
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d825      	bhi.n	8005654 <dec_lock+0x60>
		n = Files[i].ctr;
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <dec_lock+0x74>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	4413      	add	r3, r2
 8005610:	330c      	adds	r3, #12
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005616:	89fb      	ldrh	r3, [r7, #14]
 8005618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561c:	d101      	bne.n	8005622 <dec_lock+0x2e>
 800561e:	2300      	movs	r3, #0
 8005620:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005622:	89fb      	ldrh	r3, [r7, #14]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <dec_lock+0x3a>
 8005628:	89fb      	ldrh	r3, [r7, #14]
 800562a:	3b01      	subs	r3, #1
 800562c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800562e:	4a0e      	ldr	r2, [pc, #56]	; (8005668 <dec_lock+0x74>)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	4413      	add	r3, r2
 8005636:	330c      	adds	r3, #12
 8005638:	89fa      	ldrh	r2, [r7, #14]
 800563a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800563c:	89fb      	ldrh	r3, [r7, #14]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d105      	bne.n	800564e <dec_lock+0x5a>
 8005642:	4a09      	ldr	r2, [pc, #36]	; (8005668 <dec_lock+0x74>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	4413      	add	r3, r2
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	737b      	strb	r3, [r7, #13]
 8005652:	e001      	b.n	8005658 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005654:	2302      	movs	r3, #2
 8005656:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005658:	7b7b      	ldrb	r3, [r7, #13]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	2000326c 	.word	0x2000326c

0800566c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e010      	b.n	800569c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800567a:	4a0d      	ldr	r2, [pc, #52]	; (80056b0 <clear_lock+0x44>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	4413      	add	r3, r2
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d105      	bne.n	8005696 <clear_lock+0x2a>
 800568a:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <clear_lock+0x44>)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	4413      	add	r3, r2
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d9eb      	bls.n	800567a <clear_lock+0xe>
	}
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	2000326c 	.word	0x2000326c

080056b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	78db      	ldrb	r3, [r3, #3]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d034      	beq.n	8005732 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	7858      	ldrb	r0, [r3, #1]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056d8:	2301      	movs	r3, #1
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	f7ff fd40 	bl	8005160 <disk_write>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
 80056ea:	e022      	b.n	8005732 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	1ad2      	subs	r2, r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d217      	bcs.n	8005732 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	789b      	ldrb	r3, [r3, #2]
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	e010      	b.n	800572c <sync_window+0x78>
					wsect += fs->fsize;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4413      	add	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	7858      	ldrb	r0, [r3, #1]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800571e:	2301      	movs	r3, #1
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	f7ff fd1d 	bl	8005160 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3b01      	subs	r3, #1
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d8eb      	bhi.n	800570a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d01b      	beq.n	800578c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff ffad 	bl	80056b4 <sync_window>
 800575a:	4603      	mov	r3, r0
 800575c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d113      	bne.n	800578c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	7858      	ldrb	r0, [r3, #1]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800576e:	2301      	movs	r3, #1
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	f7ff fcd5 	bl	8005120 <disk_read>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800577c:	f04f 33ff 	mov.w	r3, #4294967295
 8005780:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff ff87 	bl	80056b4 <sync_window>
 80057a6:	4603      	mov	r3, r0
 80057a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d159      	bne.n	8005864 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d149      	bne.n	800584c <sync_fs+0xb4>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	791b      	ldrb	r3, [r3, #4]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d145      	bne.n	800584c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	899b      	ldrh	r3, [r3, #12]
 80057ca:	461a      	mov	r2, r3
 80057cc:	2100      	movs	r1, #0
 80057ce:	f7ff fda8 	bl	8005322 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3338      	adds	r3, #56	; 0x38
 80057d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fd37 	bl	8005252 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3338      	adds	r3, #56	; 0x38
 80057e8:	4921      	ldr	r1, [pc, #132]	; (8005870 <sync_fs+0xd8>)
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fd4c 	bl	8005288 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3338      	adds	r3, #56	; 0x38
 80057f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80057f8:	491e      	ldr	r1, [pc, #120]	; (8005874 <sync_fs+0xdc>)
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fd44 	bl	8005288 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3338      	adds	r3, #56	; 0x38
 8005804:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f7ff fd3a 	bl	8005288 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3338      	adds	r3, #56	; 0x38
 8005818:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f7ff fd30 	bl	8005288 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	7858      	ldrb	r0, [r3, #1]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005840:	2301      	movs	r3, #1
 8005842:	f7ff fc8d 	bl	8005160 <disk_write>
			fs->fsi_flag = 0;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	2200      	movs	r2, #0
 8005852:	2100      	movs	r1, #0
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fca3 	bl	80051a0 <disk_ioctl>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <sync_fs+0xcc>
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	41615252 	.word	0x41615252
 8005874:	61417272 	.word	0x61417272

08005878 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	3b02      	subs	r3, #2
 8005886:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	3b02      	subs	r3, #2
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d301      	bcc.n	8005898 <clust2sect+0x20>
 8005894:	2300      	movs	r3, #0
 8005896:	e008      	b.n	80058aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	895b      	ldrh	r3, [r3, #10]
 800589c:	461a      	mov	r2, r3
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	fb03 f202 	mul.w	r2, r3, r2
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	4413      	add	r3, r2
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b086      	sub	sp, #24
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d904      	bls.n	80058d6 <get_fat+0x20>
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d302      	bcc.n	80058dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80058d6:	2301      	movs	r3, #1
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e0bb      	b.n	8005a54 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80058dc:	f04f 33ff 	mov.w	r3, #4294967295
 80058e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	f000 8083 	beq.w	80059f2 <get_fat+0x13c>
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	f300 80a7 	bgt.w	8005a40 <get_fat+0x18a>
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d002      	beq.n	80058fc <get_fat+0x46>
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d056      	beq.n	80059a8 <get_fat+0xf2>
 80058fa:	e0a1      	b.n	8005a40 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	085b      	lsrs	r3, r3, #1
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	899b      	ldrh	r3, [r3, #12]
 8005912:	4619      	mov	r1, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	fbb3 f3f1 	udiv	r3, r3, r1
 800591a:	4413      	add	r3, r2
 800591c:	4619      	mov	r1, r3
 800591e:	6938      	ldr	r0, [r7, #16]
 8005920:	f7ff ff0c 	bl	800573c <move_window>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 808d 	bne.w	8005a46 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	60fa      	str	r2, [r7, #12]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	8992      	ldrh	r2, [r2, #12]
 8005936:	fbb3 f1f2 	udiv	r1, r3, r2
 800593a:	fb01 f202 	mul.w	r2, r1, r2
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4413      	add	r3, r2
 8005944:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005948:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	899b      	ldrh	r3, [r3, #12]
 8005952:	4619      	mov	r1, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	fbb3 f3f1 	udiv	r3, r3, r1
 800595a:	4413      	add	r3, r2
 800595c:	4619      	mov	r1, r3
 800595e:	6938      	ldr	r0, [r7, #16]
 8005960:	f7ff feec 	bl	800573c <move_window>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d16f      	bne.n	8005a4a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	899b      	ldrh	r3, [r3, #12]
 800596e:	461a      	mov	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	fbb3 f1f2 	udiv	r1, r3, r2
 8005976:	fb01 f202 	mul.w	r2, r1, r2
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4413      	add	r3, r2
 8005980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005984:	021b      	lsls	r3, r3, #8
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4313      	orrs	r3, r2
 800598c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <get_fat+0xe8>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	e002      	b.n	80059a4 <get_fat+0xee>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a4:	617b      	str	r3, [r7, #20]
			break;
 80059a6:	e055      	b.n	8005a54 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	899b      	ldrh	r3, [r3, #12]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4619      	mov	r1, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80059bc:	4413      	add	r3, r2
 80059be:	4619      	mov	r1, r3
 80059c0:	6938      	ldr	r0, [r7, #16]
 80059c2:	f7ff febb 	bl	800573c <move_window>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d140      	bne.n	8005a4e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	8992      	ldrh	r2, [r2, #12]
 80059da:	fbb3 f0f2 	udiv	r0, r3, r2
 80059de:	fb00 f202 	mul.w	r2, r0, r2
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	440b      	add	r3, r1
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff fbf8 	bl	80051dc <ld_word>
 80059ec:	4603      	mov	r3, r0
 80059ee:	617b      	str	r3, [r7, #20]
			break;
 80059f0:	e030      	b.n	8005a54 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	899b      	ldrh	r3, [r3, #12]
 80059fa:	089b      	lsrs	r3, r3, #2
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	4619      	mov	r1, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a06:	4413      	add	r3, r2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6938      	ldr	r0, [r7, #16]
 8005a0c:	f7ff fe96 	bl	800573c <move_window>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d11d      	bne.n	8005a52 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	8992      	ldrh	r2, [r2, #12]
 8005a24:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a28:	fb00 f202 	mul.w	r2, r0, r2
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	440b      	add	r3, r1
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff fbeb 	bl	800520c <ld_dword>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a3c:	617b      	str	r3, [r7, #20]
			break;
 8005a3e:	e009      	b.n	8005a54 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005a40:	2301      	movs	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	e006      	b.n	8005a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a46:	bf00      	nop
 8005a48:	e004      	b.n	8005a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a4a:	bf00      	nop
 8005a4c:	e002      	b.n	8005a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a52:	bf00      	nop
		}
	}

	return val;
 8005a54:	697b      	ldr	r3, [r7, #20]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005a5e:	b590      	push	{r4, r7, lr}
 8005a60:	b089      	sub	sp, #36	; 0x24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f240 8109 	bls.w	8005c88 <put_fat+0x22a>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	f080 8103 	bcs.w	8005c88 <put_fat+0x22a>
		switch (fs->fs_type) {
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	f000 80b6 	beq.w	8005bf8 <put_fat+0x19a>
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	f300 80fb 	bgt.w	8005c88 <put_fat+0x22a>
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d003      	beq.n	8005a9e <put_fat+0x40>
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	f000 8083 	beq.w	8005ba2 <put_fat+0x144>
 8005a9c:	e0f4      	b.n	8005c88 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	899b      	ldrh	r3, [r3, #12]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005abc:	4413      	add	r3, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff fe3b 	bl	800573c <move_window>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005aca:	7ffb      	ldrb	r3, [r7, #31]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f040 80d4 	bne.w	8005c7a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	61ba      	str	r2, [r7, #24]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	8992      	ldrh	r2, [r2, #12]
 8005ae2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ae6:	fb00 f202 	mul.w	r2, r0, r2
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	440b      	add	r3, r1
 8005aee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00d      	beq.n	8005b16 <put_fat+0xb8>
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	b25b      	sxtb	r3, r3
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	b25a      	sxtb	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	b25b      	sxtb	r3, r3
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	e001      	b.n	8005b1a <put_fat+0xbc>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	899b      	ldrh	r3, [r3, #12]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b34:	4413      	add	r3, r2
 8005b36:	4619      	mov	r1, r3
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fdff 	bl	800573c <move_window>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b42:	7ffb      	ldrb	r3, [r7, #31]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f040 809a 	bne.w	8005c7e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	899b      	ldrh	r3, [r3, #12]
 8005b54:	461a      	mov	r2, r3
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b5c:	fb00 f202 	mul.w	r2, r0, r2
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	440b      	add	r3, r1
 8005b64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <put_fat+0x11a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	091b      	lsrs	r3, r3, #4
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	e00e      	b.n	8005b96 <put_fat+0x138>
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	b25b      	sxtb	r3, r3
 8005b7e:	f023 030f 	bic.w	r3, r3, #15
 8005b82:	b25a      	sxtb	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	b25b      	sxtb	r3, r3
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	4313      	orrs	r3, r2
 8005b92:	b25b      	sxtb	r3, r3
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	70da      	strb	r2, [r3, #3]
			break;
 8005ba0:	e072      	b.n	8005c88 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	899b      	ldrh	r3, [r3, #12]
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bb6:	4413      	add	r3, r2
 8005bb8:	4619      	mov	r1, r3
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f7ff fdbe 	bl	800573c <move_window>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bc4:	7ffb      	ldrb	r3, [r7, #31]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d15b      	bne.n	8005c82 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	8992      	ldrh	r2, [r2, #12]
 8005bd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bdc:	fb00 f202 	mul.w	r2, r0, r2
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	440b      	add	r3, r1
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	b292      	uxth	r2, r2
 8005be8:	4611      	mov	r1, r2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fb31 	bl	8005252 <st_word>
			fs->wflag = 1;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	70da      	strb	r2, [r3, #3]
			break;
 8005bf6:	e047      	b.n	8005c88 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	899b      	ldrh	r3, [r3, #12]
 8005c00:	089b      	lsrs	r3, r3, #2
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4619      	mov	r1, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c0c:	4413      	add	r3, r2
 8005c0e:	4619      	mov	r1, r3
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff fd93 	bl	800573c <move_window>
 8005c16:	4603      	mov	r3, r0
 8005c18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c1a:	7ffb      	ldrb	r3, [r7, #31]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d132      	bne.n	8005c86 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	8992      	ldrh	r2, [r2, #12]
 8005c34:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c38:	fb00 f202 	mul.w	r2, r0, r2
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	440b      	add	r3, r1
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff fae3 	bl	800520c <ld_dword>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c4c:	4323      	orrs	r3, r4
 8005c4e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	8992      	ldrh	r2, [r2, #12]
 8005c5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c62:	fb00 f202 	mul.w	r2, r0, r2
 8005c66:	1a9b      	subs	r3, r3, r2
 8005c68:	440b      	add	r3, r1
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fb0b 	bl	8005288 <st_dword>
			fs->wflag = 1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	70da      	strb	r2, [r3, #3]
			break;
 8005c78:	e006      	b.n	8005c88 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005c7a:	bf00      	nop
 8005c7c:	e004      	b.n	8005c88 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005c7e:	bf00      	nop
 8005c80:	e002      	b.n	8005c88 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005c82:	bf00      	nop
 8005c84:	e000      	b.n	8005c88 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005c86:	bf00      	nop
		}
	}
	return res;
 8005c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3724      	adds	r7, #36	; 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd90      	pop	{r4, r7, pc}

08005c92 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b088      	sub	sp, #32
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d904      	bls.n	8005cb8 <remove_chain+0x26>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d301      	bcc.n	8005cbc <remove_chain+0x2a>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e04b      	b.n	8005d54 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00c      	beq.n	8005cdc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	69b8      	ldr	r0, [r7, #24]
 8005cca:	f7ff fec8 	bl	8005a5e <put_fat>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005cd2:	7ffb      	ldrb	r3, [r7, #31]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <remove_chain+0x4a>
 8005cd8:	7ffb      	ldrb	r3, [r7, #31]
 8005cda:	e03b      	b.n	8005d54 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7ff fde9 	bl	80058b6 <get_fat>
 8005ce4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d031      	beq.n	8005d50 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <remove_chain+0x64>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e02e      	b.n	8005d54 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d101      	bne.n	8005d02 <remove_chain+0x70>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e028      	b.n	8005d54 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d02:	2200      	movs	r2, #0
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	69b8      	ldr	r0, [r7, #24]
 8005d08:	f7ff fea9 	bl	8005a5e <put_fat>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005d10:	7ffb      	ldrb	r3, [r7, #31]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <remove_chain+0x88>
 8005d16:	7ffb      	ldrb	r3, [r7, #31]
 8005d18:	e01c      	b.n	8005d54 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	3b02      	subs	r3, #2
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d20b      	bcs.n	8005d40 <remove_chain+0xae>
			fs->free_clst++;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	791b      	ldrb	r3, [r3, #4]
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d3c6      	bcc.n	8005cdc <remove_chain+0x4a>
 8005d4e:	e000      	b.n	8005d52 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005d50:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3720      	adds	r7, #32
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10d      	bne.n	8005d8e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d004      	beq.n	8005d88 <create_chain+0x2c>
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d31b      	bcc.n	8005dc0 <create_chain+0x64>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	e018      	b.n	8005dc0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fd90 	bl	80058b6 <get_fat>
 8005d96:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d801      	bhi.n	8005da2 <create_chain+0x46>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e070      	b.n	8005e84 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d101      	bne.n	8005dae <create_chain+0x52>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	e06a      	b.n	8005e84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d201      	bcs.n	8005dbc <create_chain+0x60>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	e063      	b.n	8005e84 <create_chain+0x128>
		scl = clst;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d307      	bcc.n	8005de4 <create_chain+0x88>
				ncl = 2;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d901      	bls.n	8005de4 <create_chain+0x88>
 8005de0:	2300      	movs	r3, #0
 8005de2:	e04f      	b.n	8005e84 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005de4:	69f9      	ldr	r1, [r7, #28]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fd65 	bl	80058b6 <get_fat>
 8005dec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d003      	beq.n	8005e02 <create_chain+0xa6>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d101      	bne.n	8005e06 <create_chain+0xaa>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	e03e      	b.n	8005e84 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d1da      	bne.n	8005dc4 <create_chain+0x68>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e038      	b.n	8005e84 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005e12:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005e14:	f04f 32ff 	mov.w	r2, #4294967295
 8005e18:	69f9      	ldr	r1, [r7, #28]
 8005e1a:	6938      	ldr	r0, [r7, #16]
 8005e1c:	f7ff fe1f 	bl	8005a5e <put_fat>
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <create_chain+0xe2>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d006      	beq.n	8005e3e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6938      	ldr	r0, [r7, #16]
 8005e36:	f7ff fe12 	bl	8005a5e <put_fat>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d116      	bne.n	8005e72 <create_chain+0x116>
		fs->last_clst = ncl;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	3b02      	subs	r3, #2
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d804      	bhi.n	8005e62 <create_chain+0x106>
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	1e5a      	subs	r2, r3, #1
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	791b      	ldrb	r3, [r3, #4]
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	711a      	strb	r2, [r3, #4]
 8005e70:	e007      	b.n	8005e82 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d102      	bne.n	8005e7e <create_chain+0x122>
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7c:	e000      	b.n	8005e80 <create_chain+0x124>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005e82:	69fb      	ldr	r3, [r7, #28]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3720      	adds	r7, #32
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	899b      	ldrh	r3, [r3, #12]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	8952      	ldrh	r2, [r2, #10]
 8005eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1d1a      	adds	r2, r3, #4
 8005ebe:	613a      	str	r2, [r7, #16]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <clmt_clust+0x42>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e010      	b.n	8005ef0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d307      	bcc.n	8005ee6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ee4:	e7e9      	b.n	8005eba <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005ee6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	4413      	add	r3, r2
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f12:	d204      	bcs.n	8005f1e <dir_sdi+0x22>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	f003 031f 	and.w	r3, r3, #31
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e071      	b.n	8006006 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <dir_sdi+0x46>
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d902      	bls.n	8005f42 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10c      	bne.n	8005f62 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	8912      	ldrh	r2, [r2, #8]
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d301      	bcc.n	8005f58 <dir_sdi+0x5c>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e056      	b.n	8006006 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	61da      	str	r2, [r3, #28]
 8005f60:	e02d      	b.n	8005fbe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	895b      	ldrh	r3, [r3, #10]
 8005f66:	461a      	mov	r2, r3
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	899b      	ldrh	r3, [r3, #12]
 8005f6c:	fb02 f303 	mul.w	r3, r2, r3
 8005f70:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f72:	e019      	b.n	8005fa8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6979      	ldr	r1, [r7, #20]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fc9c 	bl	80058b6 <get_fat>
 8005f7e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d101      	bne.n	8005f8c <dir_sdi+0x90>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e03c      	b.n	8006006 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d904      	bls.n	8005f9c <dir_sdi+0xa0>
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d301      	bcc.n	8005fa0 <dir_sdi+0xa4>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e032      	b.n	8006006 <dir_sdi+0x10a>
			ofs -= csz;
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d2e1      	bcs.n	8005f74 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005fb0:	6979      	ldr	r1, [r7, #20]
 8005fb2:	6938      	ldr	r0, [r7, #16]
 8005fb4:	f7ff fc60 	bl	8005878 <clust2sect>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <dir_sdi+0xd4>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e01a      	b.n	8006006 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	899b      	ldrh	r3, [r3, #12]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fe0:	441a      	add	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	899b      	ldrh	r3, [r3, #12]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ff8:	fb00 f202 	mul.w	r2, r0, r2
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	18ca      	adds	r2, r1, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	3320      	adds	r3, #32
 8006024:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <dir_next+0x28>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006034:	d301      	bcc.n	800603a <dir_next+0x2c>
 8006036:	2304      	movs	r3, #4
 8006038:	e0bb      	b.n	80061b2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	899b      	ldrh	r3, [r3, #12]
 800603e:	461a      	mov	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	fbb3 f1f2 	udiv	r1, r3, r2
 8006046:	fb01 f202 	mul.w	r2, r1, r2
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	f040 809d 	bne.w	800618c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10b      	bne.n	800607c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	8912      	ldrh	r2, [r2, #8]
 800606c:	4293      	cmp	r3, r2
 800606e:	f0c0 808d 	bcc.w	800618c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	61da      	str	r2, [r3, #28]
 8006078:	2304      	movs	r3, #4
 800607a:	e09a      	b.n	80061b2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	899b      	ldrh	r3, [r3, #12]
 8006080:	461a      	mov	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	fbb3 f3f2 	udiv	r3, r3, r2
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	8952      	ldrh	r2, [r2, #10]
 800608c:	3a01      	subs	r2, #1
 800608e:	4013      	ands	r3, r2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d17b      	bne.n	800618c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	4619      	mov	r1, r3
 800609c:	4610      	mov	r0, r2
 800609e:	f7ff fc0a 	bl	80058b6 <get_fat>
 80060a2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d801      	bhi.n	80060ae <dir_next+0xa0>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e081      	b.n	80061b2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d101      	bne.n	80060ba <dir_next+0xac>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e07b      	b.n	80061b2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d359      	bcc.n	8006178 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	61da      	str	r2, [r3, #28]
 80060d0:	2304      	movs	r3, #4
 80060d2:	e06e      	b.n	80061b2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	4619      	mov	r1, r3
 80060dc:	4610      	mov	r0, r2
 80060de:	f7ff fe3d 	bl	8005d5c <create_chain>
 80060e2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <dir_next+0xe0>
 80060ea:	2307      	movs	r3, #7
 80060ec:	e061      	b.n	80061b2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <dir_next+0xea>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e05c      	b.n	80061b2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d101      	bne.n	8006104 <dir_next+0xf6>
 8006100:	2301      	movs	r3, #1
 8006102:	e056      	b.n	80061b2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff fad5 	bl	80056b4 <sync_window>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <dir_next+0x106>
 8006110:	2301      	movs	r3, #1
 8006112:	e04e      	b.n	80061b2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	899b      	ldrh	r3, [r3, #12]
 800611e:	461a      	mov	r2, r3
 8006120:	2100      	movs	r1, #0
 8006122:	f7ff f8fe 	bl	8005322 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006126:	2300      	movs	r3, #0
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	6979      	ldr	r1, [r7, #20]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff fba3 	bl	8005878 <clust2sect>
 8006132:	4602      	mov	r2, r0
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	635a      	str	r2, [r3, #52]	; 0x34
 8006138:	e012      	b.n	8006160 <dir_next+0x152>
						fs->wflag = 1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff fab7 	bl	80056b4 <sync_window>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <dir_next+0x142>
 800614c:	2301      	movs	r3, #1
 800614e:	e030      	b.n	80061b2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	3301      	adds	r3, #1
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	635a      	str	r2, [r3, #52]	; 0x34
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	895b      	ldrh	r3, [r3, #10]
 8006164:	461a      	mov	r2, r3
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4293      	cmp	r3, r2
 800616a:	d3e6      	bcc.n	800613a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800617e:	6979      	ldr	r1, [r7, #20]
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff fb79 	bl	8005878 <clust2sect>
 8006186:	4602      	mov	r2, r0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	899b      	ldrh	r3, [r3, #12]
 800619c:	461a      	mov	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80061a4:	fb00 f202 	mul.w	r2, r0, r2
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	18ca      	adds	r2, r1, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b086      	sub	sp, #24
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80061ca:	2100      	movs	r1, #0
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fe95 	bl	8005efc <dir_sdi>
 80061d2:	4603      	mov	r3, r0
 80061d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d12b      	bne.n	8006234 <dir_alloc+0x7a>
		n = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	4619      	mov	r1, r3
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7ff faa8 	bl	800573c <move_window>
 80061ec:	4603      	mov	r3, r0
 80061ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d11d      	bne.n	8006232 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2be5      	cmp	r3, #229	; 0xe5
 80061fe:	d004      	beq.n	800620a <dir_alloc+0x50>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d107      	bne.n	800621a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3301      	adds	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d102      	bne.n	800621e <dir_alloc+0x64>
 8006218:	e00c      	b.n	8006234 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800621e:	2101      	movs	r1, #1
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff fef4 	bl	800600e <dir_next>
 8006226:	4603      	mov	r3, r0
 8006228:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0d7      	beq.n	80061e0 <dir_alloc+0x26>
 8006230:	e000      	b.n	8006234 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006232:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d101      	bne.n	800623e <dir_alloc+0x84>
 800623a:	2307      	movs	r3, #7
 800623c:	75fb      	strb	r3, [r7, #23]
	return res;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	331a      	adds	r3, #26
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe ffc0 	bl	80051dc <ld_word>
 800625c:	4603      	mov	r3, r0
 800625e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b03      	cmp	r3, #3
 8006266:	d109      	bne.n	800627c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	3314      	adds	r3, #20
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe ffb5 	bl	80051dc <ld_word>
 8006272:	4603      	mov	r3, r0
 8006274:	041b      	lsls	r3, r3, #16
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800627c:	68fb      	ldr	r3, [r7, #12]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	331a      	adds	r3, #26
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	b292      	uxth	r2, r2
 800629a:	4611      	mov	r1, r2
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe ffd8 	bl	8005252 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d109      	bne.n	80062be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f103 0214 	add.w	r2, r3, #20
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	0c1b      	lsrs	r3, r3, #16
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f7fe ffca 	bl	8005252 <st_word>
	}
}
 80062be:	bf00      	nop
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	331a      	adds	r3, #26
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe ff80 	bl	80051dc <ld_word>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <cmp_lfn+0x1e>
 80062e2:	2300      	movs	r3, #0
 80062e4:	e059      	b.n	800639a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ee:	1e5a      	subs	r2, r3, #1
 80062f0:	4613      	mov	r3, r2
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80062fc:	2301      	movs	r3, #1
 80062fe:	81fb      	strh	r3, [r7, #14]
 8006300:	2300      	movs	r3, #0
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	e033      	b.n	800636e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006306:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <cmp_lfn+0xdc>)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	4413      	add	r3, r2
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4413      	add	r3, r2
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe ff61 	bl	80051dc <ld_word>
 800631a:	4603      	mov	r3, r0
 800631c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800631e:	89fb      	ldrh	r3, [r7, #14]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01a      	beq.n	800635a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2bfe      	cmp	r3, #254	; 0xfe
 8006328:	d812      	bhi.n	8006350 <cmp_lfn+0x88>
 800632a:	89bb      	ldrh	r3, [r7, #12]
 800632c:	4618      	mov	r0, r3
 800632e:	f001 ff99 	bl	8008264 <ff_wtoupper>
 8006332:	4603      	mov	r3, r0
 8006334:	461c      	mov	r4, r3
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	617a      	str	r2, [r7, #20]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f001 ff8d 	bl	8008264 <ff_wtoupper>
 800634a:	4603      	mov	r3, r0
 800634c:	429c      	cmp	r4, r3
 800634e:	d001      	beq.n	8006354 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006350:	2300      	movs	r3, #0
 8006352:	e022      	b.n	800639a <cmp_lfn+0xd2>
			}
			wc = uc;
 8006354:	89bb      	ldrh	r3, [r7, #12]
 8006356:	81fb      	strh	r3, [r7, #14]
 8006358:	e006      	b.n	8006368 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800635a:	89bb      	ldrh	r3, [r7, #12]
 800635c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006360:	4293      	cmp	r3, r2
 8006362:	d001      	beq.n	8006368 <cmp_lfn+0xa0>
 8006364:	2300      	movs	r3, #0
 8006366:	e018      	b.n	800639a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	3301      	adds	r3, #1
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	2b0c      	cmp	r3, #12
 8006372:	d9c8      	bls.n	8006306 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <cmp_lfn+0xd0>
 8006380:	89fb      	ldrh	r3, [r7, #14]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d008      	beq.n	8006398 <cmp_lfn+0xd0>
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	4413      	add	r3, r2
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <cmp_lfn+0xd0>
 8006394:	2300      	movs	r3, #0
 8006396:	e000      	b.n	800639a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006398:	2301      	movs	r3, #1
}
 800639a:	4618      	mov	r0, r3
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd90      	pop	{r4, r7, pc}
 80063a2:	bf00      	nop
 80063a4:	08009600 	.word	0x08009600

080063a8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	4611      	mov	r1, r2
 80063b4:	461a      	mov	r2, r3
 80063b6:	460b      	mov	r3, r1
 80063b8:	71fb      	strb	r3, [r7, #7]
 80063ba:	4613      	mov	r3, r2
 80063bc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	330d      	adds	r3, #13
 80063c2:	79ba      	ldrb	r2, [r7, #6]
 80063c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	330b      	adds	r3, #11
 80063ca:	220f      	movs	r2, #15
 80063cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	330c      	adds	r3, #12
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	331a      	adds	r3, #26
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fe ff38 	bl	8005252 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	1e5a      	subs	r2, r3, #1
 80063e6:	4613      	mov	r3, r2
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	82fb      	strh	r3, [r7, #22]
 80063f6:	2300      	movs	r3, #0
 80063f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80063fa:	8afb      	ldrh	r3, [r7, #22]
 80063fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006400:	4293      	cmp	r3, r2
 8006402:	d007      	beq.n	8006414 <put_lfn+0x6c>
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	61fa      	str	r2, [r7, #28]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006414:	4a17      	ldr	r2, [pc, #92]	; (8006474 <put_lfn+0xcc>)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	4413      	add	r3, r2
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4413      	add	r3, r2
 8006422:	8afa      	ldrh	r2, [r7, #22]
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe ff13 	bl	8005252 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800642c:	8afb      	ldrh	r3, [r7, #22]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <put_lfn+0x90>
 8006432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006436:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	3301      	adds	r3, #1
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b0c      	cmp	r3, #12
 8006442:	d9da      	bls.n	80063fa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006444:	8afb      	ldrh	r3, [r7, #22]
 8006446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800644a:	4293      	cmp	r3, r2
 800644c:	d006      	beq.n	800645c <put_lfn+0xb4>
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <put_lfn+0xbc>
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006462:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	79fa      	ldrb	r2, [r7, #7]
 8006468:	701a      	strb	r2, [r3, #0]
}
 800646a:	bf00      	nop
 800646c:	3720      	adds	r7, #32
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	08009600 	.word	0x08009600

08006478 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	; 0x30
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006486:	220b      	movs	r2, #11
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7fe ff28 	bl	80052e0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b05      	cmp	r3, #5
 8006494:	d92b      	bls.n	80064ee <gen_numname+0x76>
		sr = seq;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800649a:	e022      	b.n	80064e2 <gen_numname+0x6a>
			wc = *lfn++;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	1c9a      	adds	r2, r3, #2
 80064a0:	607a      	str	r2, [r7, #4]
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80064a6:	2300      	movs	r3, #0
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064aa:	e017      	b.n	80064dc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	005a      	lsls	r2, r3, #1
 80064b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	4413      	add	r3, r2
 80064b8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80064ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <gen_numname+0x5e>
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80064d0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80064d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	3301      	adds	r3, #1
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	2b0f      	cmp	r3, #15
 80064e0:	d9e4      	bls.n	80064ac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1d8      	bne.n	800649c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80064ee:	2307      	movs	r3, #7
 80064f0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	3330      	adds	r3, #48	; 0x30
 80064fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006506:	2b39      	cmp	r3, #57	; 0x39
 8006508:	d904      	bls.n	8006514 <gen_numname+0x9c>
 800650a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800650e:	3307      	adds	r3, #7
 8006510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	1e5a      	subs	r2, r3, #1
 8006518:	62ba      	str	r2, [r7, #40]	; 0x28
 800651a:	3330      	adds	r3, #48	; 0x30
 800651c:	443b      	add	r3, r7
 800651e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006522:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	091b      	lsrs	r3, r3, #4
 800652a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1df      	bne.n	80064f2 <gen_numname+0x7a>
	ns[i] = '~';
 8006532:	f107 0214 	add.w	r2, r7, #20
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	4413      	add	r3, r2
 800653a:	227e      	movs	r2, #126	; 0x7e
 800653c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800653e:	2300      	movs	r3, #0
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
 8006542:	e002      	b.n	800654a <gen_numname+0xd2>
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	3301      	adds	r3, #1
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
 800654a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	429a      	cmp	r2, r3
 8006550:	d205      	bcs.n	800655e <gen_numname+0xe6>
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	4413      	add	r3, r2
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b20      	cmp	r3, #32
 800655c:	d1f2      	bne.n	8006544 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	2b07      	cmp	r3, #7
 8006562:	d807      	bhi.n	8006574 <gen_numname+0xfc>
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	62ba      	str	r2, [r7, #40]	; 0x28
 800656a:	3330      	adds	r3, #48	; 0x30
 800656c:	443b      	add	r3, r7
 800656e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006572:	e000      	b.n	8006576 <gen_numname+0xfe>
 8006574:	2120      	movs	r1, #32
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	627a      	str	r2, [r7, #36]	; 0x24
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	460a      	mov	r2, r1
 8006582:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	2b07      	cmp	r3, #7
 8006588:	d9e9      	bls.n	800655e <gen_numname+0xe6>
}
 800658a:	bf00      	nop
 800658c:	bf00      	nop
 800658e:	3730      	adds	r7, #48	; 0x30
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80065a0:	230b      	movs	r3, #11
 80065a2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	0852      	lsrs	r2, r2, #1
 80065aa:	01db      	lsls	r3, r3, #7
 80065ac:	4313      	orrs	r3, r2
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	1c59      	adds	r1, r3, #1
 80065b4:	6079      	str	r1, [r7, #4]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	4413      	add	r3, r2
 80065ba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	3b01      	subs	r3, #1
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1ed      	bne.n	80065a4 <sum_sfn+0x10>
	return sum;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80065e4:	2100      	movs	r1, #0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff fc88 	bl	8005efc <dir_sdi>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <dir_find+0x24>
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	e0a9      	b.n	800674e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80065fa:	23ff      	movs	r3, #255	; 0xff
 80065fc:	753b      	strb	r3, [r7, #20]
 80065fe:	7d3b      	ldrb	r3, [r7, #20]
 8006600:	757b      	strb	r3, [r7, #21]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f04f 32ff 	mov.w	r2, #4294967295
 8006608:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	4619      	mov	r1, r3
 8006610:	6938      	ldr	r0, [r7, #16]
 8006612:	f7ff f893 	bl	800573c <move_window>
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f040 8090 	bne.w	8006742 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800662a:	7dbb      	ldrb	r3, [r7, #22]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <dir_find+0x60>
 8006630:	2304      	movs	r3, #4
 8006632:	75fb      	strb	r3, [r7, #23]
 8006634:	e08a      	b.n	800674c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	330b      	adds	r3, #11
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006642:	73fb      	strb	r3, [r7, #15]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7bfa      	ldrb	r2, [r7, #15]
 8006648:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800664a:	7dbb      	ldrb	r3, [r7, #22]
 800664c:	2be5      	cmp	r3, #229	; 0xe5
 800664e:	d007      	beq.n	8006660 <dir_find+0x8a>
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <dir_find+0x98>
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b0f      	cmp	r3, #15
 800665e:	d006      	beq.n	800666e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006660:	23ff      	movs	r3, #255	; 0xff
 8006662:	757b      	strb	r3, [r7, #21]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f04f 32ff 	mov.w	r2, #4294967295
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
 800666c:	e05e      	b.n	800672c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	2b0f      	cmp	r3, #15
 8006672:	d136      	bne.n	80066e2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	d154      	bne.n	800672c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006682:	7dbb      	ldrb	r3, [r7, #22]
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00d      	beq.n	80066a8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	7b5b      	ldrb	r3, [r3, #13]
 8006692:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006694:	7dbb      	ldrb	r3, [r7, #22]
 8006696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669a:	75bb      	strb	r3, [r7, #22]
 800669c:	7dbb      	ldrb	r3, [r7, #22]
 800669e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80066a8:	7dba      	ldrb	r2, [r7, #22]
 80066aa:	7d7b      	ldrb	r3, [r7, #21]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d115      	bne.n	80066dc <dir_find+0x106>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	330d      	adds	r3, #13
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	7d3a      	ldrb	r2, [r7, #20]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d10e      	bne.n	80066dc <dir_find+0x106>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f7ff fdfd 	bl	80062c8 <cmp_lfn>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <dir_find+0x106>
 80066d4:	7d7b      	ldrb	r3, [r7, #21]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	e000      	b.n	80066de <dir_find+0x108>
 80066dc:	23ff      	movs	r3, #255	; 0xff
 80066de:	757b      	strb	r3, [r7, #21]
 80066e0:	e024      	b.n	800672c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80066e2:	7d7b      	ldrb	r3, [r7, #21]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d109      	bne.n	80066fc <dir_find+0x126>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff ff51 	bl	8006594 <sum_sfn>
 80066f2:	4603      	mov	r3, r0
 80066f4:	461a      	mov	r2, r3
 80066f6:	7d3b      	ldrb	r3, [r7, #20]
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d024      	beq.n	8006746 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <dir_find+0x14a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a18      	ldr	r0, [r3, #32]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3324      	adds	r3, #36	; 0x24
 8006712:	220b      	movs	r2, #11
 8006714:	4619      	mov	r1, r3
 8006716:	f7fe fe1f 	bl	8005358 <mem_cmp>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d014      	beq.n	800674a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006720:	23ff      	movs	r3, #255	; 0xff
 8006722:	757b      	strb	r3, [r7, #21]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800672c:	2100      	movs	r1, #0
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff fc6d 	bl	800600e <dir_next>
 8006734:	4603      	mov	r3, r0
 8006736:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f43f af65 	beq.w	800660a <dir_find+0x34>
 8006740:	e004      	b.n	800674c <dir_find+0x176>
		if (res != FR_OK) break;
 8006742:	bf00      	nop
 8006744:	e002      	b.n	800674c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006746:	bf00      	nop
 8006748:	e000      	b.n	800674c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800674a:	bf00      	nop

	return res;
 800674c:	7dfb      	ldrb	r3, [r7, #23]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08c      	sub	sp, #48	; 0x30
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800676c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <dir_register+0x20>
 8006774:	2306      	movs	r3, #6
 8006776:	e0e0      	b.n	800693a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006778:	2300      	movs	r3, #0
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
 800677c:	e002      	b.n	8006784 <dir_register+0x2c>
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	3301      	adds	r3, #1
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1f4      	bne.n	800677e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800679a:	f107 030c 	add.w	r3, r7, #12
 800679e:	220c      	movs	r2, #12
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fe fd9d 	bl	80052e0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d032      	beq.n	8006816 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2240      	movs	r2, #64	; 0x40
 80067b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80067b8:	2301      	movs	r3, #1
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80067bc:	e016      	b.n	80067ec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	f107 010c 	add.w	r1, r7, #12
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	f7ff fe53 	bl	8006478 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff feff 	bl	80065d6 <dir_find>
 80067d8:	4603      	mov	r3, r0
 80067da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80067de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	3301      	adds	r3, #1
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	2b63      	cmp	r3, #99	; 0x63
 80067f0:	d9e5      	bls.n	80067be <dir_register+0x66>
 80067f2:	e000      	b.n	80067f6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80067f4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	2b64      	cmp	r3, #100	; 0x64
 80067fa:	d101      	bne.n	8006800 <dir_register+0xa8>
 80067fc:	2307      	movs	r3, #7
 80067fe:	e09c      	b.n	800693a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006804:	2b04      	cmp	r3, #4
 8006806:	d002      	beq.n	800680e <dir_register+0xb6>
 8006808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800680c:	e095      	b.n	800693a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800680e:	7dfa      	ldrb	r2, [r7, #23]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <dir_register+0xd8>
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	330c      	adds	r3, #12
 8006824:	4a47      	ldr	r2, [pc, #284]	; (8006944 <dir_register+0x1ec>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	089b      	lsrs	r3, r3, #2
 800682c:	3301      	adds	r3, #1
 800682e:	e000      	b.n	8006832 <dir_register+0xda>
 8006830:	2301      	movs	r3, #1
 8006832:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006834:	6a39      	ldr	r1, [r7, #32]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff fcbf 	bl	80061ba <dir_alloc>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006846:	2b00      	cmp	r3, #0
 8006848:	d148      	bne.n	80068dc <dir_register+0x184>
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	3b01      	subs	r3, #1
 800684e:	623b      	str	r3, [r7, #32]
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d042      	beq.n	80068dc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	015b      	lsls	r3, r3, #5
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff fb4a 	bl	8005efc <dir_sdi>
 8006868:	4603      	mov	r3, r0
 800686a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800686e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006872:	2b00      	cmp	r3, #0
 8006874:	d132      	bne.n	80068dc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3324      	adds	r3, #36	; 0x24
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fe8a 	bl	8006594 <sum_sfn>
 8006880:	4603      	mov	r3, r0
 8006882:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	4619      	mov	r1, r3
 800688a:	69f8      	ldr	r0, [r7, #28]
 800688c:	f7fe ff56 	bl	800573c <move_window>
 8006890:	4603      	mov	r3, r0
 8006892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800689a:	2b00      	cmp	r3, #0
 800689c:	d11d      	bne.n	80068da <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	6918      	ldr	r0, [r3, #16]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a19      	ldr	r1, [r3, #32]
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	7efb      	ldrb	r3, [r7, #27]
 80068ac:	f7ff fd7c 	bl	80063a8 <put_lfn>
				fs->wflag = 1;
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2201      	movs	r2, #1
 80068b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80068b6:	2100      	movs	r1, #0
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fba8 	bl	800600e <dir_next>
 80068be:	4603      	mov	r3, r0
 80068c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80068c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d107      	bne.n	80068dc <dir_register+0x184>
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	623b      	str	r3, [r7, #32]
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1d5      	bne.n	8006884 <dir_register+0x12c>
 80068d8:	e000      	b.n	80068dc <dir_register+0x184>
				if (res != FR_OK) break;
 80068da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80068dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d128      	bne.n	8006936 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	4619      	mov	r1, r3
 80068ea:	69f8      	ldr	r0, [r7, #28]
 80068ec:	f7fe ff26 	bl	800573c <move_window>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80068f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11b      	bne.n	8006936 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	2220      	movs	r2, #32
 8006904:	2100      	movs	r1, #0
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe fd0b 	bl	8005322 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a18      	ldr	r0, [r3, #32]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3324      	adds	r3, #36	; 0x24
 8006914:	220b      	movs	r2, #11
 8006916:	4619      	mov	r1, r3
 8006918:	f7fe fce2 	bl	80052e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	330c      	adds	r3, #12
 8006928:	f002 0218 	and.w	r2, r2, #24
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	2201      	movs	r2, #1
 8006934:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800693a:	4618      	mov	r0, r3
 800693c:	3730      	adds	r7, #48	; 0x30
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	4ec4ec4f 	.word	0x4ec4ec4f

08006948 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08a      	sub	sp, #40	; 0x28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	61ba      	str	r2, [r7, #24]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4413      	add	r3, r2
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006978:	2b1f      	cmp	r3, #31
 800697a:	d940      	bls.n	80069fe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800697c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800697e:	2b2f      	cmp	r3, #47	; 0x2f
 8006980:	d006      	beq.n	8006990 <create_name+0x48>
 8006982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006984:	2b5c      	cmp	r3, #92	; 0x5c
 8006986:	d110      	bne.n	80069aa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006988:	e002      	b.n	8006990 <create_name+0x48>
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	3301      	adds	r3, #1
 800698e:	61bb      	str	r3, [r7, #24]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	4413      	add	r3, r2
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b2f      	cmp	r3, #47	; 0x2f
 800699a:	d0f6      	beq.n	800698a <create_name+0x42>
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	4413      	add	r3, r2
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b5c      	cmp	r3, #92	; 0x5c
 80069a6:	d0f0      	beq.n	800698a <create_name+0x42>
			break;
 80069a8:	e02a      	b.n	8006a00 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2bfe      	cmp	r3, #254	; 0xfe
 80069ae:	d901      	bls.n	80069b4 <create_name+0x6c>
 80069b0:	2306      	movs	r3, #6
 80069b2:	e17d      	b.n	8006cb0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80069b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80069ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069bc:	2101      	movs	r1, #1
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fc14 	bl	80081ec <ff_convert>
 80069c4:	4603      	mov	r3, r0
 80069c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80069c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <create_name+0x8a>
 80069ce:	2306      	movs	r3, #6
 80069d0:	e16e      	b.n	8006cb0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80069d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d4:	2b7f      	cmp	r3, #127	; 0x7f
 80069d6:	d809      	bhi.n	80069ec <create_name+0xa4>
 80069d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069da:	4619      	mov	r1, r3
 80069dc:	488d      	ldr	r0, [pc, #564]	; (8006c14 <create_name+0x2cc>)
 80069de:	f7fe fce2 	bl	80053a6 <chk_chr>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <create_name+0xa4>
 80069e8:	2306      	movs	r3, #6
 80069ea:	e161      	b.n	8006cb0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	617a      	str	r2, [r7, #20]
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069fa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80069fc:	e7b4      	b.n	8006968 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80069fe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	441a      	add	r2, r3
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a0c:	2b1f      	cmp	r3, #31
 8006a0e:	d801      	bhi.n	8006a14 <create_name+0xcc>
 8006a10:	2304      	movs	r3, #4
 8006a12:	e000      	b.n	8006a16 <create_name+0xce>
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006a1a:	e011      	b.n	8006a40 <create_name+0xf8>
		w = lfn[di - 1];
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006a22:	3b01      	subs	r3, #1
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d002      	beq.n	8006a3a <create_name+0xf2>
 8006a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a36:	2b2e      	cmp	r3, #46	; 0x2e
 8006a38:	d106      	bne.n	8006a48 <create_name+0x100>
		di--;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1ea      	bne.n	8006a1c <create_name+0xd4>
 8006a46:	e000      	b.n	8006a4a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006a48:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	2200      	movs	r2, #0
 8006a54:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <create_name+0x118>
 8006a5c:	2306      	movs	r3, #6
 8006a5e:	e127      	b.n	8006cb0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3324      	adds	r3, #36	; 0x24
 8006a64:	220b      	movs	r2, #11
 8006a66:	2120      	movs	r1, #32
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe fc5a 	bl	8005322 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e002      	b.n	8006a7a <create_name+0x132>
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	3301      	adds	r3, #1
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d0f5      	beq.n	8006a74 <create_name+0x12c>
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	2b2e      	cmp	r3, #46	; 0x2e
 8006a94:	d0ee      	beq.n	8006a74 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <create_name+0x168>
 8006a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aa0:	f043 0303 	orr.w	r3, r3, #3
 8006aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006aa8:	e002      	b.n	8006ab0 <create_name+0x168>
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <create_name+0x182>
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006abc:	3b01      	subs	r3, #1
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ac8:	d1ef      	bne.n	8006aaa <create_name+0x162>

	i = b = 0; ni = 8;
 8006aca:	2300      	movs	r3, #0
 8006acc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	623b      	str	r3, [r7, #32]
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	61ba      	str	r2, [r7, #24]
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 8090 	beq.w	8006c10 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d006      	beq.n	8006b04 <create_name+0x1bc>
 8006af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006af8:	2b2e      	cmp	r3, #46	; 0x2e
 8006afa:	d10a      	bne.n	8006b12 <create_name+0x1ca>
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d006      	beq.n	8006b12 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b08:	f043 0303 	orr.w	r3, r3, #3
 8006b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b10:	e07d      	b.n	8006c0e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006b12:	6a3a      	ldr	r2, [r7, #32]
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d203      	bcs.n	8006b22 <create_name+0x1da>
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d123      	bne.n	8006b6a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	2b0b      	cmp	r3, #11
 8006b26:	d106      	bne.n	8006b36 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b2c:	f043 0303 	orr.w	r3, r3, #3
 8006b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b34:	e075      	b.n	8006c22 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d005      	beq.n	8006b4a <create_name+0x202>
 8006b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b42:	f043 0303 	orr.w	r3, r3, #3
 8006b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d866      	bhi.n	8006c20 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	2308      	movs	r3, #8
 8006b58:	623b      	str	r3, [r7, #32]
 8006b5a:	230b      	movs	r3, #11
 8006b5c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b68:	e051      	b.n	8006c0e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b6e:	d914      	bls.n	8006b9a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b72:	2100      	movs	r1, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 fb39 	bl	80081ec <ff_convert>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <create_name+0x246>
 8006b84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b86:	3b80      	subs	r3, #128	; 0x80
 8006b88:	4a23      	ldr	r2, [pc, #140]	; (8006c18 <create_name+0x2d0>)
 8006b8a:	5cd3      	ldrb	r3, [r2, r3]
 8006b8c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b92:	f043 0302 	orr.w	r3, r3, #2
 8006b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d007      	beq.n	8006bb0 <create_name+0x268>
 8006ba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	481d      	ldr	r0, [pc, #116]	; (8006c1c <create_name+0x2d4>)
 8006ba6:	f7fe fbfe 	bl	80053a6 <chk_chr>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006bb0:	235f      	movs	r3, #95	; 0x5f
 8006bb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb8:	f043 0303 	orr.w	r3, r3, #3
 8006bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bc0:	e01b      	b.n	8006bfa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bc4:	2b40      	cmp	r3, #64	; 0x40
 8006bc6:	d909      	bls.n	8006bdc <create_name+0x294>
 8006bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bca:	2b5a      	cmp	r3, #90	; 0x5a
 8006bcc:	d806      	bhi.n	8006bdc <create_name+0x294>
					b |= 2;
 8006bce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bd2:	f043 0302 	orr.w	r3, r3, #2
 8006bd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006bda:	e00e      	b.n	8006bfa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bde:	2b60      	cmp	r3, #96	; 0x60
 8006be0:	d90b      	bls.n	8006bfa <create_name+0x2b2>
 8006be2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006be4:	2b7a      	cmp	r3, #122	; 0x7a
 8006be6:	d808      	bhi.n	8006bfa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006be8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf6:	3b20      	subs	r3, #32
 8006bf8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	623a      	str	r2, [r7, #32]
 8006c00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c02:	b2d1      	uxtb	r1, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4413      	add	r3, r2
 8006c08:	460a      	mov	r2, r1
 8006c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006c0e:	e763      	b.n	8006ad8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006c10:	bf00      	nop
 8006c12:	e006      	b.n	8006c22 <create_name+0x2da>
 8006c14:	08009520 	.word	0x08009520
 8006c18:	08009580 	.word	0x08009580
 8006c1c:	0800952c 	.word	0x0800952c
			if (si > di) break;			/* No extension */
 8006c20:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c28:	2be5      	cmp	r3, #229	; 0xe5
 8006c2a:	d103      	bne.n	8006c34 <create_name+0x2ec>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2205      	movs	r2, #5
 8006c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d104      	bne.n	8006c44 <create_name+0x2fc>
 8006c3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c48:	f003 030c 	and.w	r3, r3, #12
 8006c4c:	2b0c      	cmp	r3, #12
 8006c4e:	d005      	beq.n	8006c5c <create_name+0x314>
 8006c50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c54:	f003 0303 	and.w	r3, r3, #3
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d105      	bne.n	8006c68 <create_name+0x320>
 8006c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c60:	f043 0302 	orr.w	r3, r3, #2
 8006c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d117      	bne.n	8006ca4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006c74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c78:	f003 0303 	and.w	r3, r3, #3
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d105      	bne.n	8006c8c <create_name+0x344>
 8006c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c84:	f043 0310 	orr.w	r3, r3, #16
 8006c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c90:	f003 030c 	and.w	r3, r3, #12
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d105      	bne.n	8006ca4 <create_name+0x35c>
 8006c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c9c:	f043 0308 	orr.w	r3, r3, #8
 8006ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006caa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006cae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3728      	adds	r7, #40	; 0x28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ccc:	e002      	b.n	8006cd4 <follow_path+0x1c>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b2f      	cmp	r3, #47	; 0x2f
 8006cda:	d0f8      	beq.n	8006cce <follow_path+0x16>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b5c      	cmp	r3, #92	; 0x5c
 8006ce2:	d0f4      	beq.n	8006cce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b1f      	cmp	r3, #31
 8006cf0:	d80a      	bhi.n	8006d08 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2280      	movs	r2, #128	; 0x80
 8006cf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff f8fd 	bl	8005efc <dir_sdi>
 8006d02:	4603      	mov	r3, r0
 8006d04:	75fb      	strb	r3, [r7, #23]
 8006d06:	e048      	b.n	8006d9a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d08:	463b      	mov	r3, r7
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff fe1b 	bl	8006948 <create_name>
 8006d12:	4603      	mov	r3, r0
 8006d14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d139      	bne.n	8006d90 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff fc5a 	bl	80065d6 <dir_find>
 8006d22:	4603      	mov	r3, r0
 8006d24:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d2c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d12c      	bne.n	8006d94 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006d3a:	7afb      	ldrb	r3, [r7, #11]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d127      	bne.n	8006d94 <follow_path+0xdc>
 8006d44:	2305      	movs	r3, #5
 8006d46:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006d48:	e024      	b.n	8006d94 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d4a:	7afb      	ldrb	r3, [r7, #11]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d121      	bne.n	8006d98 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	799b      	ldrb	r3, [r3, #6]
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006d60:	2305      	movs	r3, #5
 8006d62:	75fb      	strb	r3, [r7, #23]
 8006d64:	e019      	b.n	8006d9a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	8992      	ldrh	r2, [r2, #12]
 8006d74:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d78:	fb00 f202 	mul.w	r2, r0, r2
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	440b      	add	r3, r1
 8006d80:	4619      	mov	r1, r3
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff fa60 	bl	8006248 <ld_clust>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d8e:	e7bb      	b.n	8006d08 <follow_path+0x50>
			if (res != FR_OK) break;
 8006d90:	bf00      	nop
 8006d92:	e002      	b.n	8006d9a <follow_path+0xe2>
				break;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d98:	bf00      	nop
			}
		}
	}

	return res;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006dac:	f04f 33ff 	mov.w	r3, #4294967295
 8006db0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d031      	beq.n	8006e1e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	e002      	b.n	8006dc8 <get_ldnumber+0x24>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b1f      	cmp	r3, #31
 8006dce:	d903      	bls.n	8006dd8 <get_ldnumber+0x34>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b3a      	cmp	r3, #58	; 0x3a
 8006dd6:	d1f4      	bne.n	8006dc2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b3a      	cmp	r3, #58	; 0x3a
 8006dde:	d11c      	bne.n	8006e1a <get_ldnumber+0x76>
			tp = *path;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	60fa      	str	r2, [r7, #12]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	3b30      	subs	r3, #48	; 0x30
 8006df0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b09      	cmp	r3, #9
 8006df6:	d80e      	bhi.n	8006e16 <get_ldnumber+0x72>
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d10a      	bne.n	8006e16 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d107      	bne.n	8006e16 <get_ldnumber+0x72>
					vol = (int)i;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	e002      	b.n	8006e20 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006e1e:	693b      	ldr	r3, [r7, #16]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	70da      	strb	r2, [r3, #3]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e42:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fe fc78 	bl	800573c <move_window>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <check_fs+0x2a>
 8006e52:	2304      	movs	r3, #4
 8006e54:	e038      	b.n	8006ec8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3338      	adds	r3, #56	; 0x38
 8006e5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe f9bc 	bl	80051dc <ld_word>
 8006e64:	4603      	mov	r3, r0
 8006e66:	461a      	mov	r2, r3
 8006e68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d001      	beq.n	8006e74 <check_fs+0x48>
 8006e70:	2303      	movs	r3, #3
 8006e72:	e029      	b.n	8006ec8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e7a:	2be9      	cmp	r3, #233	; 0xe9
 8006e7c:	d009      	beq.n	8006e92 <check_fs+0x66>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e84:	2beb      	cmp	r3, #235	; 0xeb
 8006e86:	d11e      	bne.n	8006ec6 <check_fs+0x9a>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e8e:	2b90      	cmp	r3, #144	; 0x90
 8006e90:	d119      	bne.n	8006ec6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3338      	adds	r3, #56	; 0x38
 8006e96:	3336      	adds	r3, #54	; 0x36
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe f9b7 	bl	800520c <ld_dword>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ea4:	4a0a      	ldr	r2, [pc, #40]	; (8006ed0 <check_fs+0xa4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d101      	bne.n	8006eae <check_fs+0x82>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e00c      	b.n	8006ec8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3338      	adds	r3, #56	; 0x38
 8006eb2:	3352      	adds	r3, #82	; 0x52
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe f9a9 	bl	800520c <ld_dword>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	4a05      	ldr	r2, [pc, #20]	; (8006ed4 <check_fs+0xa8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d101      	bne.n	8006ec6 <check_fs+0x9a>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e000      	b.n	8006ec8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006ec6:	2302      	movs	r3, #2
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	00544146 	.word	0x00544146
 8006ed4:	33544146 	.word	0x33544146

08006ed8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b096      	sub	sp, #88	; 0x58
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff ff59 	bl	8006da4 <get_ldnumber>
 8006ef2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	da01      	bge.n	8006efe <find_volume+0x26>
 8006efa:	230b      	movs	r3, #11
 8006efc:	e265      	b.n	80073ca <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006efe:	4a9f      	ldr	r2, [pc, #636]	; (800717c <find_volume+0x2a4>)
 8006f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <find_volume+0x3a>
 8006f0e:	230c      	movs	r3, #12
 8006f10:	e25b      	b.n	80073ca <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01a      	beq.n	8006f5e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe f8b7 	bl	80050a0 <disk_status>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10c      	bne.n	8006f5e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <find_volume+0x82>
 8006f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006f56:	230a      	movs	r3, #10
 8006f58:	e237      	b.n	80073ca <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e235      	b.n	80073ca <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe f8af 	bl	80050d4 <disk_initialize>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e21e      	b.n	80073ca <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006f8c:	79fb      	ldrb	r3, [r7, #7]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <find_volume+0xca>
 8006f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f96:	f003 0304 	and.w	r3, r3, #4
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006f9e:	230a      	movs	r3, #10
 8006fa0:	e213      	b.n	80073ca <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	7858      	ldrb	r0, [r3, #1]
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	330c      	adds	r3, #12
 8006faa:	461a      	mov	r2, r3
 8006fac:	2102      	movs	r1, #2
 8006fae:	f7fe f8f7 	bl	80051a0 <disk_ioctl>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <find_volume+0xe4>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e206      	b.n	80073ca <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	899b      	ldrh	r3, [r3, #12]
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc4:	d80d      	bhi.n	8006fe2 <find_volume+0x10a>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	899b      	ldrh	r3, [r3, #12]
 8006fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fce:	d308      	bcc.n	8006fe2 <find_volume+0x10a>
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	899b      	ldrh	r3, [r3, #12]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	899b      	ldrh	r3, [r3, #12]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	4013      	ands	r3, r2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <find_volume+0x10e>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e1f1      	b.n	80073ca <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006fea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006fec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fee:	f7ff ff1d 	bl	8006e2c <check_fs>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d149      	bne.n	8007094 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007000:	2300      	movs	r3, #0
 8007002:	643b      	str	r3, [r7, #64]	; 0x40
 8007004:	e01e      	b.n	8007044 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800700c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007014:	4413      	add	r3, r2
 8007016:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	3304      	adds	r3, #4
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d006      	beq.n	8007030 <find_volume+0x158>
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	3308      	adds	r3, #8
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe f8f0 	bl	800520c <ld_dword>
 800702c:	4602      	mov	r2, r0
 800702e:	e000      	b.n	8007032 <find_volume+0x15a>
 8007030:	2200      	movs	r2, #0
 8007032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	3358      	adds	r3, #88	; 0x58
 8007038:	443b      	add	r3, r7
 800703a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800703e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007040:	3301      	adds	r3, #1
 8007042:	643b      	str	r3, [r7, #64]	; 0x40
 8007044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007046:	2b03      	cmp	r3, #3
 8007048:	d9dd      	bls.n	8007006 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800704a:	2300      	movs	r3, #0
 800704c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800704e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <find_volume+0x182>
 8007054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007056:	3b01      	subs	r3, #1
 8007058:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800705a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	3358      	adds	r3, #88	; 0x58
 8007060:	443b      	add	r3, r7
 8007062:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007066:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <find_volume+0x1a2>
 800706e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007070:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007072:	f7ff fedb 	bl	8006e2c <check_fs>
 8007076:	4603      	mov	r3, r0
 8007078:	e000      	b.n	800707c <find_volume+0x1a4>
 800707a:	2303      	movs	r3, #3
 800707c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007084:	2b01      	cmp	r3, #1
 8007086:	d905      	bls.n	8007094 <find_volume+0x1bc>
 8007088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800708a:	3301      	adds	r3, #1
 800708c:	643b      	str	r3, [r7, #64]	; 0x40
 800708e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007090:	2b03      	cmp	r3, #3
 8007092:	d9e2      	bls.n	800705a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007094:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007098:	2b04      	cmp	r3, #4
 800709a:	d101      	bne.n	80070a0 <find_volume+0x1c8>
 800709c:	2301      	movs	r3, #1
 800709e:	e194      	b.n	80073ca <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80070a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d901      	bls.n	80070ac <find_volume+0x1d4>
 80070a8:	230d      	movs	r3, #13
 80070aa:	e18e      	b.n	80073ca <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	3338      	adds	r3, #56	; 0x38
 80070b0:	330b      	adds	r3, #11
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe f892 	bl	80051dc <ld_word>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	899b      	ldrh	r3, [r3, #12]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d001      	beq.n	80070c8 <find_volume+0x1f0>
 80070c4:	230d      	movs	r3, #13
 80070c6:	e180      	b.n	80073ca <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	3338      	adds	r3, #56	; 0x38
 80070cc:	3316      	adds	r3, #22
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe f884 	bl	80051dc <ld_word>
 80070d4:	4603      	mov	r3, r0
 80070d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80070d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <find_volume+0x214>
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	3338      	adds	r3, #56	; 0x38
 80070e2:	3324      	adds	r3, #36	; 0x24
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe f891 	bl	800520c <ld_dword>
 80070ea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070f0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	789b      	ldrb	r3, [r3, #2]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d005      	beq.n	8007110 <find_volume+0x238>
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	789b      	ldrb	r3, [r3, #2]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d001      	beq.n	8007110 <find_volume+0x238>
 800710c:	230d      	movs	r3, #13
 800710e:	e15c      	b.n	80073ca <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	789b      	ldrb	r3, [r3, #2]
 8007114:	461a      	mov	r2, r3
 8007116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007118:	fb02 f303 	mul.w	r3, r2, r3
 800711c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007124:	b29a      	uxth	r2, r3
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	895b      	ldrh	r3, [r3, #10]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d008      	beq.n	8007144 <find_volume+0x26c>
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	895b      	ldrh	r3, [r3, #10]
 8007136:	461a      	mov	r2, r3
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	895b      	ldrh	r3, [r3, #10]
 800713c:	3b01      	subs	r3, #1
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <find_volume+0x270>
 8007144:	230d      	movs	r3, #13
 8007146:	e140      	b.n	80073ca <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	3338      	adds	r3, #56	; 0x38
 800714c:	3311      	adds	r3, #17
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe f844 	bl	80051dc <ld_word>
 8007154:	4603      	mov	r3, r0
 8007156:	461a      	mov	r2, r3
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	891b      	ldrh	r3, [r3, #8]
 8007160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007162:	8992      	ldrh	r2, [r2, #12]
 8007164:	0952      	lsrs	r2, r2, #5
 8007166:	b292      	uxth	r2, r2
 8007168:	fbb3 f1f2 	udiv	r1, r3, r2
 800716c:	fb01 f202 	mul.w	r2, r1, r2
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <find_volume+0x2a8>
 8007178:	230d      	movs	r3, #13
 800717a:	e126      	b.n	80073ca <find_volume+0x4f2>
 800717c:	20003264 	.word	0x20003264

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	3338      	adds	r3, #56	; 0x38
 8007184:	3313      	adds	r3, #19
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe f828 	bl	80051dc <ld_word>
 800718c:	4603      	mov	r3, r0
 800718e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <find_volume+0x2cc>
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	3338      	adds	r3, #56	; 0x38
 800719a:	3320      	adds	r3, #32
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe f835 	bl	800520c <ld_dword>
 80071a2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	3338      	adds	r3, #56	; 0x38
 80071a8:	330e      	adds	r3, #14
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe f816 	bl	80051dc <ld_word>
 80071b0:	4603      	mov	r3, r0
 80071b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80071b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <find_volume+0x2e6>
 80071ba:	230d      	movs	r3, #13
 80071bc:	e105      	b.n	80073ca <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80071be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c2:	4413      	add	r3, r2
 80071c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c6:	8911      	ldrh	r1, [r2, #8]
 80071c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ca:	8992      	ldrh	r2, [r2, #12]
 80071cc:	0952      	lsrs	r2, r2, #5
 80071ce:	b292      	uxth	r2, r2
 80071d0:	fbb1 f2f2 	udiv	r2, r1, r2
 80071d4:	b292      	uxth	r2, r2
 80071d6:	4413      	add	r3, r2
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80071da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	429a      	cmp	r2, r3
 80071e0:	d201      	bcs.n	80071e6 <find_volume+0x30e>
 80071e2:	230d      	movs	r3, #13
 80071e4:	e0f1      	b.n	80073ca <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80071e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ee:	8952      	ldrh	r2, [r2, #10]
 80071f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <find_volume+0x328>
 80071fc:	230d      	movs	r3, #13
 80071fe:	e0e4      	b.n	80073ca <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007200:	2303      	movs	r3, #3
 8007202:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800720c:	4293      	cmp	r3, r2
 800720e:	d802      	bhi.n	8007216 <find_volume+0x33e>
 8007210:	2302      	movs	r3, #2
 8007212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	f640 72f5 	movw	r2, #4085	; 0xff5
 800721c:	4293      	cmp	r3, r2
 800721e:	d802      	bhi.n	8007226 <find_volume+0x34e>
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	1c9a      	adds	r2, r3, #2
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007232:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007234:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007238:	441a      	add	r2, r3
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800723e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	441a      	add	r2, r3
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800724c:	2b03      	cmp	r3, #3
 800724e:	d11e      	bne.n	800728e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	3338      	adds	r3, #56	; 0x38
 8007254:	332a      	adds	r3, #42	; 0x2a
 8007256:	4618      	mov	r0, r3
 8007258:	f7fd ffc0 	bl	80051dc <ld_word>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <find_volume+0x38e>
 8007262:	230d      	movs	r3, #13
 8007264:	e0b1      	b.n	80073ca <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	891b      	ldrh	r3, [r3, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <find_volume+0x39a>
 800726e:	230d      	movs	r3, #13
 8007270:	e0ab      	b.n	80073ca <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	3338      	adds	r3, #56	; 0x38
 8007276:	332c      	adds	r3, #44	; 0x2c
 8007278:	4618      	mov	r0, r3
 800727a:	f7fd ffc7 	bl	800520c <ld_dword>
 800727e:	4602      	mov	r2, r0
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	647b      	str	r3, [r7, #68]	; 0x44
 800728c:	e01f      	b.n	80072ce <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	891b      	ldrh	r3, [r3, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <find_volume+0x3c2>
 8007296:	230d      	movs	r3, #13
 8007298:	e097      	b.n	80073ca <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800729e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a0:	441a      	add	r2, r3
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d103      	bne.n	80072b6 <find_volume+0x3de>
 80072ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	e00a      	b.n	80072cc <find_volume+0x3f4>
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	69da      	ldr	r2, [r3, #28]
 80072ba:	4613      	mov	r3, r2
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	4413      	add	r3, r2
 80072c0:	085a      	lsrs	r2, r3, #1
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80072cc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	6a1a      	ldr	r2, [r3, #32]
 80072d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d4:	899b      	ldrh	r3, [r3, #12]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072da:	440b      	add	r3, r1
 80072dc:	3b01      	subs	r3, #1
 80072de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072e0:	8989      	ldrh	r1, [r1, #12]
 80072e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d201      	bcs.n	80072ee <find_volume+0x416>
 80072ea:	230d      	movs	r3, #13
 80072ec:	e06d      	b.n	80073ca <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	f04f 32ff 	mov.w	r2, #4294967295
 80072f4:	619a      	str	r2, [r3, #24]
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	2280      	movs	r2, #128	; 0x80
 8007302:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007304:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007308:	2b03      	cmp	r3, #3
 800730a:	d149      	bne.n	80073a0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	3338      	adds	r3, #56	; 0x38
 8007310:	3330      	adds	r3, #48	; 0x30
 8007312:	4618      	mov	r0, r3
 8007314:	f7fd ff62 	bl	80051dc <ld_word>
 8007318:	4603      	mov	r3, r0
 800731a:	2b01      	cmp	r3, #1
 800731c:	d140      	bne.n	80073a0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800731e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007320:	3301      	adds	r3, #1
 8007322:	4619      	mov	r1, r3
 8007324:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007326:	f7fe fa09 	bl	800573c <move_window>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d137      	bne.n	80073a0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	2200      	movs	r2, #0
 8007334:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	3338      	adds	r3, #56	; 0x38
 800733a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800733e:	4618      	mov	r0, r3
 8007340:	f7fd ff4c 	bl	80051dc <ld_word>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800734c:	429a      	cmp	r2, r3
 800734e:	d127      	bne.n	80073a0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	3338      	adds	r3, #56	; 0x38
 8007354:	4618      	mov	r0, r3
 8007356:	f7fd ff59 	bl	800520c <ld_dword>
 800735a:	4603      	mov	r3, r0
 800735c:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <find_volume+0x4fc>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d11e      	bne.n	80073a0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	3338      	adds	r3, #56	; 0x38
 8007366:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800736a:	4618      	mov	r0, r3
 800736c:	f7fd ff4e 	bl	800520c <ld_dword>
 8007370:	4603      	mov	r3, r0
 8007372:	4a19      	ldr	r2, [pc, #100]	; (80073d8 <find_volume+0x500>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d113      	bne.n	80073a0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	3338      	adds	r3, #56	; 0x38
 800737c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007380:	4618      	mov	r0, r3
 8007382:	f7fd ff43 	bl	800520c <ld_dword>
 8007386:	4602      	mov	r2, r0
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	3338      	adds	r3, #56	; 0x38
 8007390:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007394:	4618      	mov	r0, r3
 8007396:	f7fd ff39 	bl	800520c <ld_dword>
 800739a:	4602      	mov	r2, r0
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073a8:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <find_volume+0x504>)
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	3301      	adds	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <find_volume+0x504>)
 80073b2:	801a      	strh	r2, [r3, #0]
 80073b4:	4b09      	ldr	r3, [pc, #36]	; (80073dc <find_volume+0x504>)
 80073b6:	881a      	ldrh	r2, [r3, #0]
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	4a08      	ldr	r2, [pc, #32]	; (80073e0 <find_volume+0x508>)
 80073c0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80073c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073c4:	f7fe f952 	bl	800566c <clear_lock>
#endif
	return FR_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3758      	adds	r7, #88	; 0x58
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	41615252 	.word	0x41615252
 80073d8:	61417272 	.word	0x61417272
 80073dc:	20003268 	.word	0x20003268
 80073e0:	2000328c 	.word	0x2000328c

080073e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80073ee:	2309      	movs	r3, #9
 80073f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01c      	beq.n	8007432 <validate+0x4e>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d018      	beq.n	8007432 <validate+0x4e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d013      	beq.n	8007432 <validate+0x4e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	889a      	ldrh	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	88db      	ldrh	r3, [r3, #6]
 8007414:	429a      	cmp	r2, r3
 8007416:	d10c      	bne.n	8007432 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	4618      	mov	r0, r3
 8007420:	f7fd fe3e 	bl	80050a0 <disk_status>
 8007424:	4603      	mov	r3, r0
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <validate+0x4e>
			res = FR_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <validate+0x5a>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	e000      	b.n	8007440 <validate+0x5c>
 800743e:	2300      	movs	r3, #0
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	6013      	str	r3, [r2, #0]
	return res;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007462:	f107 0310 	add.w	r3, r7, #16
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff fc9c 	bl	8006da4 <get_ldnumber>
 800746c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	2b00      	cmp	r3, #0
 8007472:	da01      	bge.n	8007478 <f_mount+0x28>
 8007474:	230b      	movs	r3, #11
 8007476:	e02b      	b.n	80074d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007478:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <f_mount+0x88>)
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007480:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007488:	69b8      	ldr	r0, [r7, #24]
 800748a:	f7fe f8ef 	bl	800566c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	490d      	ldr	r1, [pc, #52]	; (80074d8 <f_mount+0x88>)
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <f_mount+0x66>
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d001      	beq.n	80074ba <f_mount+0x6a>
 80074b6:	2300      	movs	r3, #0
 80074b8:	e00a      	b.n	80074d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80074ba:	f107 010c 	add.w	r1, r7, #12
 80074be:	f107 0308 	add.w	r3, r7, #8
 80074c2:	2200      	movs	r2, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff fd07 	bl	8006ed8 <find_volume>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3720      	adds	r7, #32
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20003264 	.word	0x20003264

080074dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b09a      	sub	sp, #104	; 0x68
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <f_open+0x18>
 80074f0:	2309      	movs	r3, #9
 80074f2:	e1bb      	b.n	800786c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80074fc:	79fa      	ldrb	r2, [r7, #7]
 80074fe:	f107 0114 	add.w	r1, r7, #20
 8007502:	f107 0308 	add.w	r3, r7, #8
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff fce6 	bl	8006ed8 <find_volume>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007512:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007516:	2b00      	cmp	r3, #0
 8007518:	f040 819f 	bne.w	800785a <f_open+0x37e>
		dj.obj.fs = fs;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	f107 0318 	add.w	r3, r7, #24
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff fbc5 	bl	8006cb8 <follow_path>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007534:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007538:	2b00      	cmp	r3, #0
 800753a:	d11a      	bne.n	8007572 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800753c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007540:	b25b      	sxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	da03      	bge.n	800754e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007546:	2306      	movs	r3, #6
 8007548:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800754c:	e011      	b.n	8007572 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	bf14      	ite	ne
 8007558:	2301      	movne	r3, #1
 800755a:	2300      	moveq	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	461a      	mov	r2, r3
 8007560:	f107 0318 	add.w	r3, r7, #24
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7fd ff38 	bl	80053dc <chk_lock>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	f003 031c 	and.w	r3, r3, #28
 8007578:	2b00      	cmp	r3, #0
 800757a:	d07f      	beq.n	800767c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800757c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007580:	2b00      	cmp	r3, #0
 8007582:	d017      	beq.n	80075b4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007584:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007588:	2b04      	cmp	r3, #4
 800758a:	d10e      	bne.n	80075aa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800758c:	f7fd ff82 	bl	8005494 <enq_lock>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d006      	beq.n	80075a4 <f_open+0xc8>
 8007596:	f107 0318 	add.w	r3, r7, #24
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff f8dc 	bl	8006758 <dir_register>
 80075a0:	4603      	mov	r3, r0
 80075a2:	e000      	b.n	80075a6 <f_open+0xca>
 80075a4:	2312      	movs	r3, #18
 80075a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	f043 0308 	orr.w	r3, r3, #8
 80075b0:	71fb      	strb	r3, [r7, #7]
 80075b2:	e010      	b.n	80075d6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80075b4:	7fbb      	ldrb	r3, [r7, #30]
 80075b6:	f003 0311 	and.w	r3, r3, #17
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <f_open+0xea>
					res = FR_DENIED;
 80075be:	2307      	movs	r3, #7
 80075c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075c4:	e007      	b.n	80075d6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <f_open+0xfa>
 80075d0:	2308      	movs	r3, #8
 80075d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80075d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d168      	bne.n	80076b0 <f_open+0x1d4>
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d063      	beq.n	80076b0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80075e8:	f7fd fcfc 	bl	8004fe4 <get_fattime>
 80075ec:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	330e      	adds	r3, #14
 80075f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fd fe47 	bl	8005288 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	3316      	adds	r3, #22
 80075fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007600:	4618      	mov	r0, r3
 8007602:	f7fd fe41 	bl	8005288 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007608:	330b      	adds	r3, #11
 800760a:	2220      	movs	r2, #32
 800760c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe fe17 	bl	8006248 <ld_clust>
 800761a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007620:	2200      	movs	r2, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fe2f 	bl	8006286 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	331c      	adds	r3, #28
 800762c:	2100      	movs	r1, #0
 800762e:	4618      	mov	r0, r3
 8007630:	f7fd fe2a 	bl	8005288 <st_dword>
					fs->wflag = 1;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2201      	movs	r2, #1
 8007638:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800763a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800763c:	2b00      	cmp	r3, #0
 800763e:	d037      	beq.n	80076b0 <f_open+0x1d4>
						dw = fs->winsect;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007644:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007646:	f107 0318 	add.w	r3, r7, #24
 800764a:	2200      	movs	r2, #0
 800764c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fb1f 	bl	8005c92 <remove_chain>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800765a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800765e:	2b00      	cmp	r3, #0
 8007660:	d126      	bne.n	80076b0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe f868 	bl	800573c <move_window>
 800766c:	4603      	mov	r3, r0
 800766e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007676:	3a01      	subs	r2, #1
 8007678:	615a      	str	r2, [r3, #20]
 800767a:	e019      	b.n	80076b0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800767c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007680:	2b00      	cmp	r3, #0
 8007682:	d115      	bne.n	80076b0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007684:	7fbb      	ldrb	r3, [r7, #30]
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <f_open+0x1ba>
					res = FR_NO_FILE;
 800768e:	2304      	movs	r3, #4
 8007690:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007694:	e00c      	b.n	80076b0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d007      	beq.n	80076b0 <f_open+0x1d4>
 80076a0:	7fbb      	ldrb	r3, [r7, #30]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <f_open+0x1d4>
						res = FR_DENIED;
 80076aa:	2307      	movs	r3, #7
 80076ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80076b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d128      	bne.n	800770a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80076d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	f023 0301 	bic.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bf14      	ite	ne
 80076e2:	2301      	movne	r3, #1
 80076e4:	2300      	moveq	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	f107 0318 	add.w	r3, r7, #24
 80076ee:	4611      	mov	r1, r2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fd fef1 	bl	80054d8 <inc_lock>
 80076f6:	4602      	mov	r2, r0
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <f_open+0x22e>
 8007704:	2302      	movs	r3, #2
 8007706:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800770a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800770e:	2b00      	cmp	r3, #0
 8007710:	f040 80a3 	bne.w	800785a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe fd94 	bl	8006248 <ld_clust>
 8007720:	4602      	mov	r2, r0
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	331c      	adds	r3, #28
 800772a:	4618      	mov	r0, r3
 800772c:	f7fd fd6e 	bl	800520c <ld_dword>
 8007730:	4602      	mov	r2, r0
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	88da      	ldrh	r2, [r3, #6]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	79fa      	ldrb	r2, [r7, #7]
 800774e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3330      	adds	r3, #48	; 0x30
 8007766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800776a:	2100      	movs	r1, #0
 800776c:	4618      	mov	r0, r3
 800776e:	f7fd fdd8 	bl	8005322 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d06e      	beq.n	800785a <f_open+0x37e>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d06a      	beq.n	800785a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	895b      	ldrh	r3, [r3, #10]
 8007790:	461a      	mov	r2, r3
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	899b      	ldrh	r3, [r3, #12]
 8007796:	fb02 f303 	mul.w	r3, r2, r3
 800779a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a8:	e016      	b.n	80077d8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe f881 	bl	80058b6 <get_fat>
 80077b4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80077b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d802      	bhi.n	80077c2 <f_open+0x2e6>
 80077bc:	2302      	movs	r3, #2
 80077be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80077c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c8:	d102      	bne.n	80077d0 <f_open+0x2f4>
 80077ca:	2301      	movs	r3, #1
 80077cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <f_open+0x30c>
 80077e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d8e0      	bhi.n	80077aa <f_open+0x2ce>
				}
				fp->clust = clst;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80077ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d131      	bne.n	800785a <f_open+0x37e>
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	899b      	ldrh	r3, [r3, #12]
 80077fa:	461a      	mov	r2, r3
 80077fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007802:	fb01 f202 	mul.w	r2, r1, r2
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d026      	beq.n	800785a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007810:	4618      	mov	r0, r3
 8007812:	f7fe f831 	bl	8005878 <clust2sect>
 8007816:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d103      	bne.n	8007826 <f_open+0x34a>
						res = FR_INT_ERR;
 800781e:	2302      	movs	r3, #2
 8007820:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007824:	e019      	b.n	800785a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	899b      	ldrh	r3, [r3, #12]
 800782a:	461a      	mov	r2, r3
 800782c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800782e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007834:	441a      	add	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	7858      	ldrb	r0, [r3, #1]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1a      	ldr	r2, [r3, #32]
 8007848:	2301      	movs	r3, #1
 800784a:	f7fd fc69 	bl	8005120 <disk_read>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <f_open+0x37e>
 8007854:	2301      	movs	r3, #1
 8007856:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800785a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <f_open+0x38c>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800786c:	4618      	mov	r0, r3
 800786e:	3768      	adds	r7, #104	; 0x68
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08c      	sub	sp, #48	; 0x30
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f107 0210 	add.w	r2, r7, #16
 8007892:	4611      	mov	r1, r2
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff fda5 	bl	80073e4 <validate>
 800789a:	4603      	mov	r3, r0
 800789c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80078a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d107      	bne.n	80078b8 <f_write+0x44>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	7d5b      	ldrb	r3, [r3, #21]
 80078ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80078b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <f_write+0x4a>
 80078b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078bc:	e16a      	b.n	8007b94 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	7d1b      	ldrb	r3, [r3, #20]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <f_write+0x5a>
 80078ca:	2307      	movs	r3, #7
 80078cc:	e162      	b.n	8007b94 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	699a      	ldr	r2, [r3, #24]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	441a      	add	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	429a      	cmp	r2, r3
 80078dc:	f080 814c 	bcs.w	8007b78 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	43db      	mvns	r3, r3
 80078e6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80078e8:	e146      	b.n	8007b78 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	8992      	ldrh	r2, [r2, #12]
 80078f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80078f6:	fb01 f202 	mul.w	r2, r1, r2
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 80f1 	bne.w	8007ae4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	8992      	ldrh	r2, [r2, #12]
 800790a:	fbb3 f3f2 	udiv	r3, r3, r2
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	8952      	ldrh	r2, [r2, #10]
 8007912:	3a01      	subs	r2, #1
 8007914:	4013      	ands	r3, r2
 8007916:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d143      	bne.n	80079a6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10c      	bne.n	8007940 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	2b00      	cmp	r3, #0
 8007930:	d11a      	bne.n	8007968 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2100      	movs	r1, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f7fe fa10 	bl	8005d5c <create_chain>
 800793c:	62b8      	str	r0, [r7, #40]	; 0x28
 800793e:	e013      	b.n	8007968 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	4619      	mov	r1, r3
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7fe fa9c 	bl	8005e8c <clmt_clust>
 8007954:	62b8      	str	r0, [r7, #40]	; 0x28
 8007956:	e007      	b.n	8007968 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f7fe f9fb 	bl	8005d5c <create_chain>
 8007966:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 8109 	beq.w	8007b82 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	2b01      	cmp	r3, #1
 8007974:	d104      	bne.n	8007980 <f_write+0x10c>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2202      	movs	r2, #2
 800797a:	755a      	strb	r2, [r3, #21]
 800797c:	2302      	movs	r3, #2
 800797e:	e109      	b.n	8007b94 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007986:	d104      	bne.n	8007992 <f_write+0x11e>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	755a      	strb	r2, [r3, #21]
 800798e:	2301      	movs	r3, #1
 8007990:	e100      	b.n	8007b94 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007996:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <f_write+0x132>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	7d1b      	ldrb	r3, [r3, #20]
 80079aa:	b25b      	sxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	da18      	bge.n	80079e2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	7858      	ldrb	r0, [r3, #1]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	2301      	movs	r3, #1
 80079c0:	f7fd fbce 	bl	8005160 <disk_write>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d004      	beq.n	80079d4 <f_write+0x160>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	755a      	strb	r2, [r3, #21]
 80079d0:	2301      	movs	r3, #1
 80079d2:	e0df      	b.n	8007b94 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	7d1b      	ldrb	r3, [r3, #20]
 80079d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f7fd ff44 	bl	8005878 <clust2sect>
 80079f0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <f_write+0x18e>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2202      	movs	r2, #2
 80079fc:	755a      	strb	r2, [r3, #21]
 80079fe:	2302      	movs	r3, #2
 8007a00:	e0c8      	b.n	8007b94 <f_write+0x320>
			sect += csect;
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	4413      	add	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	899b      	ldrh	r3, [r3, #12]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a16:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d043      	beq.n	8007aa6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	4413      	add	r3, r2
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	8952      	ldrh	r2, [r2, #10]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d905      	bls.n	8007a38 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	895b      	ldrh	r3, [r3, #10]
 8007a30:	461a      	mov	r2, r3
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	7858      	ldrb	r0, [r3, #1]
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	69f9      	ldr	r1, [r7, #28]
 8007a42:	f7fd fb8d 	bl	8005160 <disk_write>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <f_write+0x1e2>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	755a      	strb	r2, [r3, #21]
 8007a52:	2301      	movs	r3, #1
 8007a54:	e09e      	b.n	8007b94 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a1a      	ldr	r2, [r3, #32]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	6a3a      	ldr	r2, [r7, #32]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d918      	bls.n	8007a96 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6a1a      	ldr	r2, [r3, #32]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	8992      	ldrh	r2, [r2, #12]
 8007a76:	fb02 f303 	mul.w	r3, r2, r3
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	18d1      	adds	r1, r2, r3
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	899b      	ldrh	r3, [r3, #12]
 8007a82:	461a      	mov	r2, r3
 8007a84:	f7fd fc2c 	bl	80052e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	7d1b      	ldrb	r3, [r3, #20]
 8007a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	899b      	ldrh	r3, [r3, #12]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	fb02 f303 	mul.w	r3, r2, r3
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007aa4:	e04b      	b.n	8007b3e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d016      	beq.n	8007ade <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	699a      	ldr	r2, [r3, #24]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d210      	bcs.n	8007ade <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	7858      	ldrb	r0, [r3, #1]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	f7fd fb29 	bl	8005120 <disk_read>
 8007ace:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	755a      	strb	r2, [r3, #21]
 8007ada:	2301      	movs	r3, #1
 8007adc:	e05a      	b.n	8007b94 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	899b      	ldrh	r3, [r3, #12]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	8992      	ldrh	r2, [r2, #12]
 8007af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007af6:	fb01 f202 	mul.w	r2, r1, r2
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	1ac3      	subs	r3, r0, r3
 8007afe:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d901      	bls.n	8007b0c <f_write+0x298>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	8992      	ldrh	r2, [r2, #12]
 8007b1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b1e:	fb00 f202 	mul.w	r2, r0, r2
 8007b22:	1a9b      	subs	r3, r3, r2
 8007b24:	440b      	add	r3, r1
 8007b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b28:	69f9      	ldr	r1, [r7, #28]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fd fbd8 	bl	80052e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	7d1b      	ldrb	r3, [r3, #20]
 8007b34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	4413      	add	r3, r2
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	699a      	ldr	r2, [r3, #24]
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	441a      	add	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	619a      	str	r2, [r3, #24]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	bf38      	it	cc
 8007b5e:	461a      	movcc	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	60da      	str	r2, [r3, #12]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	441a      	add	r2, r3
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f47f aeb5 	bne.w	80078ea <f_write+0x76>
 8007b80:	e000      	b.n	8007b84 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b82:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	7d1b      	ldrb	r3, [r3, #20]
 8007b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3730      	adds	r7, #48	; 0x30
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f107 0208 	add.w	r2, r7, #8
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff fc19 	bl	80073e4 <validate>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d168      	bne.n	8007c8e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	7d1b      	ldrb	r3, [r3, #20]
 8007bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d062      	beq.n	8007c8e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	7d1b      	ldrb	r3, [r3, #20]
 8007bcc:	b25b      	sxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da15      	bge.n	8007bfe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	7858      	ldrb	r0, [r3, #1]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1a      	ldr	r2, [r3, #32]
 8007be0:	2301      	movs	r3, #1
 8007be2:	f7fd fabd 	bl	8005160 <disk_write>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <f_sync+0x54>
 8007bec:	2301      	movs	r3, #1
 8007bee:	e04f      	b.n	8007c90 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7d1b      	ldrb	r3, [r3, #20]
 8007bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007bfe:	f7fd f9f1 	bl	8004fe4 <get_fattime>
 8007c02:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	f7fd fd95 	bl	800573c <move_window>
 8007c12:	4603      	mov	r3, r0
 8007c14:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d138      	bne.n	8007c8e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	330b      	adds	r3, #11
 8007c26:	781a      	ldrb	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	330b      	adds	r3, #11
 8007c2c:	f042 0220 	orr.w	r2, r2, #32
 8007c30:	b2d2      	uxtb	r2, r2
 8007c32:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	68f9      	ldr	r1, [r7, #12]
 8007c40:	f7fe fb21 	bl	8006286 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f103 021c 	add.w	r2, r3, #28
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4610      	mov	r0, r2
 8007c52:	f7fd fb19 	bl	8005288 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3316      	adds	r3, #22
 8007c5a:	6939      	ldr	r1, [r7, #16]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fd fb13 	bl	8005288 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3312      	adds	r3, #18
 8007c66:	2100      	movs	r1, #0
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fd faf2 	bl	8005252 <st_word>
					fs->wflag = 1;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2201      	movs	r2, #1
 8007c72:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fd fd8e 	bl	8005798 <sync_fs>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7d1b      	ldrb	r3, [r3, #20]
 8007c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff ff7b 	bl	8007b9c <f_sync>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d118      	bne.n	8007ce2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f107 0208 	add.w	r2, r7, #8
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff fb93 	bl	80073e4 <validate>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10c      	bne.n	8007ce2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fd fc91 	bl	80055f4 <dec_lock>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d102      	bne.n	8007ce2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b090      	sub	sp, #64	; 0x40
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f107 0208 	add.w	r2, r7, #8
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fb70 	bl	80073e4 <validate>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007d0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d103      	bne.n	8007d1a <f_lseek+0x2e>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7d5b      	ldrb	r3, [r3, #21]
 8007d16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007d1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <f_lseek+0x3c>
 8007d22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d26:	e201      	b.n	800812c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80d9 	beq.w	8007ee4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d15a      	bne.n	8007df0 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	1d1a      	adds	r2, r3, #4
 8007d44:	627a      	str	r2, [r7, #36]	; 0x24
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d03a      	beq.n	8007dd0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d64:	3302      	adds	r3, #2
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6e:	3301      	adds	r3, #1
 8007d70:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fd fd9d 	bl	80058b6 <get_fat>
 8007d7c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d804      	bhi.n	8007d8e <f_lseek+0xa2>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	755a      	strb	r2, [r3, #21]
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e1ce      	b.n	800812c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d104      	bne.n	8007da0 <f_lseek+0xb4>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	755a      	strb	r2, [r3, #21]
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e1c5      	b.n	800812c <f_lseek+0x440>
					} while (cl == pcl + 1);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d0de      	beq.n	8007d68 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d809      	bhi.n	8007dc6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	1d1a      	adds	r2, r3, #4
 8007db6:	627a      	str	r2, [r7, #36]	; 0x24
 8007db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dba:	601a      	str	r2, [r3, #0]
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	627a      	str	r2, [r7, #36]	; 0x24
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d3c4      	bcc.n	8007d5a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dd6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d803      	bhi.n	8007de8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	e19f      	b.n	8008128 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007de8:	2311      	movs	r3, #17
 8007dea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007dee:	e19b      	b.n	8008128 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d902      	bls.n	8007e00 <f_lseek+0x114>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 818d 	beq.w	8008128 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fe f839 	bl	8005e8c <clmt_clust>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	4619      	mov	r1, r3
 8007e28:	4610      	mov	r0, r2
 8007e2a:	f7fd fd25 	bl	8005878 <clust2sect>
 8007e2e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d104      	bne.n	8007e40 <f_lseek+0x154>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	755a      	strb	r2, [r3, #21]
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e175      	b.n	800812c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	8992      	ldrh	r2, [r2, #12]
 8007e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	8952      	ldrh	r2, [r2, #10]
 8007e50:	3a01      	subs	r2, #1
 8007e52:	4013      	ands	r3, r2
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4413      	add	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	8992      	ldrh	r2, [r2, #12]
 8007e62:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e66:	fb01 f202 	mul.w	r2, r1, r2
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 815b 	beq.w	8008128 <f_lseek+0x43c>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	f000 8155 	beq.w	8008128 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	7d1b      	ldrb	r3, [r3, #20]
 8007e82:	b25b      	sxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	da18      	bge.n	8007eba <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	7858      	ldrb	r0, [r3, #1]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1a      	ldr	r2, [r3, #32]
 8007e96:	2301      	movs	r3, #1
 8007e98:	f7fd f962 	bl	8005160 <disk_write>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <f_lseek+0x1c0>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	755a      	strb	r2, [r3, #21]
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e13f      	b.n	800812c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7d1b      	ldrb	r3, [r3, #20]
 8007eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	7858      	ldrb	r0, [r3, #1]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	f7fd f92a 	bl	8005120 <disk_read>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d004      	beq.n	8007edc <f_lseek+0x1f0>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	755a      	strb	r2, [r3, #21]
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e127      	b.n	800812c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	621a      	str	r2, [r3, #32]
 8007ee2:	e121      	b.n	8008128 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d908      	bls.n	8007f00 <f_lseek+0x214>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	7d1b      	ldrb	r3, [r3, #20]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d102      	bne.n	8007f00 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f0e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 80b5 	beq.w	8008082 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	895b      	ldrh	r3, [r3, #10]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	899b      	ldrh	r3, [r3, #12]
 8007f22:	fb02 f303 	mul.w	r3, r2, r3
 8007f26:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d01b      	beq.n	8007f66 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	1e5a      	subs	r2, r3, #1
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	1e59      	subs	r1, r3, #1
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d30f      	bcc.n	8007f66 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	1e5a      	subs	r2, r3, #1
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	401a      	ands	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f64:	e022      	b.n	8007fac <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d119      	bne.n	8007fa6 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fd fef0 	bl	8005d5c <create_chain>
 8007f7c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d104      	bne.n	8007f8e <f_lseek+0x2a2>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	755a      	strb	r2, [r3, #21]
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e0ce      	b.n	800812c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f94:	d104      	bne.n	8007fa0 <f_lseek+0x2b4>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	755a      	strb	r2, [r3, #21]
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e0c5      	b.n	800812c <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fa4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007faa:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d067      	beq.n	8008082 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007fb2:	e03a      	b.n	800802a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	441a      	add	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	7d1b      	ldrb	r3, [r3, #20]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00b      	beq.n	8007fec <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fd febf 	bl	8005d5c <create_chain>
 8007fde:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d108      	bne.n	8007ff8 <f_lseek+0x30c>
							ofs = 0; break;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	603b      	str	r3, [r7, #0]
 8007fea:	e022      	b.n	8008032 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fd fc60 	bl	80058b6 <get_fat>
 8007ff6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffe:	d104      	bne.n	800800a <f_lseek+0x31e>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	755a      	strb	r2, [r3, #21]
 8008006:	2301      	movs	r3, #1
 8008008:	e090      	b.n	800812c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	2b01      	cmp	r3, #1
 800800e:	d904      	bls.n	800801a <f_lseek+0x32e>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008016:	429a      	cmp	r2, r3
 8008018:	d304      	bcc.n	8008024 <f_lseek+0x338>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	755a      	strb	r2, [r3, #21]
 8008020:	2302      	movs	r3, #2
 8008022:	e083      	b.n	800812c <f_lseek+0x440>
					fp->clust = clst;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008028:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	429a      	cmp	r2, r3
 8008030:	d8c0      	bhi.n	8007fb4 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	441a      	add	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	899b      	ldrh	r3, [r3, #12]
 8008042:	461a      	mov	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	fbb3 f1f2 	udiv	r1, r3, r2
 800804a:	fb01 f202 	mul.w	r2, r1, r2
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d016      	beq.n	8008082 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008058:	4618      	mov	r0, r3
 800805a:	f7fd fc0d 	bl	8005878 <clust2sect>
 800805e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <f_lseek+0x384>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2202      	movs	r2, #2
 800806a:	755a      	strb	r2, [r3, #21]
 800806c:	2302      	movs	r3, #2
 800806e:	e05d      	b.n	800812c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	899b      	ldrh	r3, [r3, #12]
 8008074:	461a      	mov	r2, r3
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	fbb3 f3f2 	udiv	r3, r3, r2
 800807c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800807e:	4413      	add	r3, r2
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699a      	ldr	r2, [r3, #24]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	429a      	cmp	r2, r3
 800808c:	d90a      	bls.n	80080a4 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	7d1b      	ldrb	r3, [r3, #20]
 800809a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	8992      	ldrh	r2, [r2, #12]
 80080ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80080b0:	fb01 f202 	mul.w	r2, r1, r2
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d036      	beq.n	8008128 <f_lseek+0x43c>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d031      	beq.n	8008128 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	7d1b      	ldrb	r3, [r3, #20]
 80080c8:	b25b      	sxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da18      	bge.n	8008100 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	7858      	ldrb	r0, [r3, #1]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1a      	ldr	r2, [r3, #32]
 80080dc:	2301      	movs	r3, #1
 80080de:	f7fd f83f 	bl	8005160 <disk_write>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d004      	beq.n	80080f2 <f_lseek+0x406>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	755a      	strb	r2, [r3, #21]
 80080ee:	2301      	movs	r3, #1
 80080f0:	e01c      	b.n	800812c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	7d1b      	ldrb	r3, [r3, #20]
 80080f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	7858      	ldrb	r0, [r3, #1]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800810a:	2301      	movs	r3, #1
 800810c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800810e:	f7fd f807 	bl	8005120 <disk_read>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d004      	beq.n	8008122 <f_lseek+0x436>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	755a      	strb	r2, [r3, #21]
 800811e:	2301      	movs	r3, #1
 8008120:	e004      	b.n	800812c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008126:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008128:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800812c:	4618      	mov	r0, r3
 800812e:	3740      	adds	r7, #64	; 0x40
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008142:	2301      	movs	r3, #1
 8008144:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800814a:	4b1f      	ldr	r3, [pc, #124]	; (80081c8 <FATFS_LinkDriverEx+0x94>)
 800814c:	7a5b      	ldrb	r3, [r3, #9]
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d131      	bne.n	80081b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008154:	4b1c      	ldr	r3, [pc, #112]	; (80081c8 <FATFS_LinkDriverEx+0x94>)
 8008156:	7a5b      	ldrb	r3, [r3, #9]
 8008158:	b2db      	uxtb	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <FATFS_LinkDriverEx+0x94>)
 800815e:	2100      	movs	r1, #0
 8008160:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008162:	4b19      	ldr	r3, [pc, #100]	; (80081c8 <FATFS_LinkDriverEx+0x94>)
 8008164:	7a5b      	ldrb	r3, [r3, #9]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	4a17      	ldr	r2, [pc, #92]	; (80081c8 <FATFS_LinkDriverEx+0x94>)
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008172:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <FATFS_LinkDriverEx+0x94>)
 8008174:	7a5b      	ldrb	r3, [r3, #9]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <FATFS_LinkDriverEx+0x94>)
 800817c:	4413      	add	r3, r2
 800817e:	79fa      	ldrb	r2, [r7, #7]
 8008180:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008182:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <FATFS_LinkDriverEx+0x94>)
 8008184:	7a5b      	ldrb	r3, [r3, #9]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	b2d1      	uxtb	r1, r2
 800818c:	4a0e      	ldr	r2, [pc, #56]	; (80081c8 <FATFS_LinkDriverEx+0x94>)
 800818e:	7251      	strb	r1, [r2, #9]
 8008190:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008192:	7dbb      	ldrb	r3, [r7, #22]
 8008194:	3330      	adds	r3, #48	; 0x30
 8008196:	b2da      	uxtb	r2, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	3301      	adds	r3, #1
 80081a0:	223a      	movs	r2, #58	; 0x3a
 80081a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	3302      	adds	r3, #2
 80081a8:	222f      	movs	r2, #47	; 0x2f
 80081aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	3303      	adds	r3, #3
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	2000348c 	.word	0x2000348c

080081cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80081d6:	2200      	movs	r2, #0
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff ffaa 	bl	8008134 <FATFS_LinkDriverEx>
 80081e0:	4603      	mov	r3, r0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	6039      	str	r1, [r7, #0]
 80081f6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80081f8:	88fb      	ldrh	r3, [r7, #6]
 80081fa:	2b7f      	cmp	r3, #127	; 0x7f
 80081fc:	d802      	bhi.n	8008204 <ff_convert+0x18>
		c = chr;
 80081fe:	88fb      	ldrh	r3, [r7, #6]
 8008200:	81fb      	strh	r3, [r7, #14]
 8008202:	e025      	b.n	8008250 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00b      	beq.n	8008222 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	2bff      	cmp	r3, #255	; 0xff
 800820e:	d805      	bhi.n	800821c <ff_convert+0x30>
 8008210:	88fb      	ldrh	r3, [r7, #6]
 8008212:	3b80      	subs	r3, #128	; 0x80
 8008214:	4a12      	ldr	r2, [pc, #72]	; (8008260 <ff_convert+0x74>)
 8008216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800821a:	e000      	b.n	800821e <ff_convert+0x32>
 800821c:	2300      	movs	r3, #0
 800821e:	81fb      	strh	r3, [r7, #14]
 8008220:	e016      	b.n	8008250 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008222:	2300      	movs	r3, #0
 8008224:	81fb      	strh	r3, [r7, #14]
 8008226:	e009      	b.n	800823c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008228:	89fb      	ldrh	r3, [r7, #14]
 800822a:	4a0d      	ldr	r2, [pc, #52]	; (8008260 <ff_convert+0x74>)
 800822c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008230:	88fa      	ldrh	r2, [r7, #6]
 8008232:	429a      	cmp	r2, r3
 8008234:	d006      	beq.n	8008244 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008236:	89fb      	ldrh	r3, [r7, #14]
 8008238:	3301      	adds	r3, #1
 800823a:	81fb      	strh	r3, [r7, #14]
 800823c:	89fb      	ldrh	r3, [r7, #14]
 800823e:	2b7f      	cmp	r3, #127	; 0x7f
 8008240:	d9f2      	bls.n	8008228 <ff_convert+0x3c>
 8008242:	e000      	b.n	8008246 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008244:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008246:	89fb      	ldrh	r3, [r7, #14]
 8008248:	3380      	adds	r3, #128	; 0x80
 800824a:	b29b      	uxth	r3, r3
 800824c:	b2db      	uxtb	r3, r3
 800824e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008250:	89fb      	ldrh	r3, [r7, #14]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	08009610 	.word	0x08009610

08008264 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008274:	d201      	bcs.n	800827a <ff_wtoupper+0x16>
 8008276:	4b3e      	ldr	r3, [pc, #248]	; (8008370 <ff_wtoupper+0x10c>)
 8008278:	e000      	b.n	800827c <ff_wtoupper+0x18>
 800827a:	4b3e      	ldr	r3, [pc, #248]	; (8008374 <ff_wtoupper+0x110>)
 800827c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	1c9a      	adds	r2, r3, #2
 8008282:	617a      	str	r2, [r7, #20]
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008288:	8a7b      	ldrh	r3, [r7, #18]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d068      	beq.n	8008360 <ff_wtoupper+0xfc>
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	8a7b      	ldrh	r3, [r7, #18]
 8008292:	429a      	cmp	r2, r3
 8008294:	d364      	bcc.n	8008360 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	1c9a      	adds	r2, r3, #2
 800829a:	617a      	str	r2, [r7, #20]
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	823b      	strh	r3, [r7, #16]
 80082a0:	8a3b      	ldrh	r3, [r7, #16]
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	81fb      	strh	r3, [r7, #14]
 80082a6:	8a3b      	ldrh	r3, [r7, #16]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	8a79      	ldrh	r1, [r7, #18]
 80082b0:	8a3b      	ldrh	r3, [r7, #16]
 80082b2:	440b      	add	r3, r1
 80082b4:	429a      	cmp	r2, r3
 80082b6:	da49      	bge.n	800834c <ff_wtoupper+0xe8>
			switch (cmd) {
 80082b8:	89fb      	ldrh	r3, [r7, #14]
 80082ba:	2b08      	cmp	r3, #8
 80082bc:	d84f      	bhi.n	800835e <ff_wtoupper+0xfa>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <ff_wtoupper+0x60>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082e9 	.word	0x080082e9
 80082c8:	080082fb 	.word	0x080082fb
 80082cc:	08008311 	.word	0x08008311
 80082d0:	08008319 	.word	0x08008319
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008329 	.word	0x08008329
 80082dc:	08008331 	.word	0x08008331
 80082e0:	08008339 	.word	0x08008339
 80082e4:	08008341 	.word	0x08008341
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	8a7b      	ldrh	r3, [r7, #18]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	4413      	add	r3, r2
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	80fb      	strh	r3, [r7, #6]
 80082f8:	e027      	b.n	800834a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	8a7b      	ldrh	r3, [r7, #18]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	b29b      	uxth	r3, r3
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	b29b      	uxth	r3, r3
 8008308:	88fa      	ldrh	r2, [r7, #6]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	80fb      	strh	r3, [r7, #6]
 800830e:	e01c      	b.n	800834a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	3b10      	subs	r3, #16
 8008314:	80fb      	strh	r3, [r7, #6]
 8008316:	e018      	b.n	800834a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	3b20      	subs	r3, #32
 800831c:	80fb      	strh	r3, [r7, #6]
 800831e:	e014      	b.n	800834a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008320:	88fb      	ldrh	r3, [r7, #6]
 8008322:	3b30      	subs	r3, #48	; 0x30
 8008324:	80fb      	strh	r3, [r7, #6]
 8008326:	e010      	b.n	800834a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008328:	88fb      	ldrh	r3, [r7, #6]
 800832a:	3b1a      	subs	r3, #26
 800832c:	80fb      	strh	r3, [r7, #6]
 800832e:	e00c      	b.n	800834a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008330:	88fb      	ldrh	r3, [r7, #6]
 8008332:	3308      	adds	r3, #8
 8008334:	80fb      	strh	r3, [r7, #6]
 8008336:	e008      	b.n	800834a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008338:	88fb      	ldrh	r3, [r7, #6]
 800833a:	3b50      	subs	r3, #80	; 0x50
 800833c:	80fb      	strh	r3, [r7, #6]
 800833e:	e004      	b.n	800834a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008340:	88fb      	ldrh	r3, [r7, #6]
 8008342:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008346:	80fb      	strh	r3, [r7, #6]
 8008348:	bf00      	nop
			}
			break;
 800834a:	e008      	b.n	800835e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800834c:	89fb      	ldrh	r3, [r7, #14]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d195      	bne.n	800827e <ff_wtoupper+0x1a>
 8008352:	8a3b      	ldrh	r3, [r7, #16]
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4413      	add	r3, r2
 800835a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800835c:	e78f      	b.n	800827e <ff_wtoupper+0x1a>
			break;
 800835e:	bf00      	nop
	}

	return chr;
 8008360:	88fb      	ldrh	r3, [r7, #6]
}
 8008362:	4618      	mov	r0, r3
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	08009710 	.word	0x08009710
 8008374:	08009904 	.word	0x08009904

08008378 <std>:
 8008378:	2300      	movs	r3, #0
 800837a:	b510      	push	{r4, lr}
 800837c:	4604      	mov	r4, r0
 800837e:	e9c0 3300 	strd	r3, r3, [r0]
 8008382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008386:	6083      	str	r3, [r0, #8]
 8008388:	8181      	strh	r1, [r0, #12]
 800838a:	6643      	str	r3, [r0, #100]	; 0x64
 800838c:	81c2      	strh	r2, [r0, #14]
 800838e:	6183      	str	r3, [r0, #24]
 8008390:	4619      	mov	r1, r3
 8008392:	2208      	movs	r2, #8
 8008394:	305c      	adds	r0, #92	; 0x5c
 8008396:	f000 f9f7 	bl	8008788 <memset>
 800839a:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <std+0x58>)
 800839c:	6263      	str	r3, [r4, #36]	; 0x24
 800839e:	4b0d      	ldr	r3, [pc, #52]	; (80083d4 <std+0x5c>)
 80083a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80083a2:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <std+0x60>)
 80083a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083a6:	4b0d      	ldr	r3, [pc, #52]	; (80083dc <std+0x64>)
 80083a8:	6323      	str	r3, [r4, #48]	; 0x30
 80083aa:	4b0d      	ldr	r3, [pc, #52]	; (80083e0 <std+0x68>)
 80083ac:	6224      	str	r4, [r4, #32]
 80083ae:	429c      	cmp	r4, r3
 80083b0:	d006      	beq.n	80083c0 <std+0x48>
 80083b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80083b6:	4294      	cmp	r4, r2
 80083b8:	d002      	beq.n	80083c0 <std+0x48>
 80083ba:	33d0      	adds	r3, #208	; 0xd0
 80083bc:	429c      	cmp	r4, r3
 80083be:	d105      	bne.n	80083cc <std+0x54>
 80083c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c8:	f000 ba56 	b.w	8008878 <__retarget_lock_init_recursive>
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	bf00      	nop
 80083d0:	080085d9 	.word	0x080085d9
 80083d4:	080085fb 	.word	0x080085fb
 80083d8:	08008633 	.word	0x08008633
 80083dc:	08008657 	.word	0x08008657
 80083e0:	20003498 	.word	0x20003498

080083e4 <stdio_exit_handler>:
 80083e4:	4a02      	ldr	r2, [pc, #8]	; (80083f0 <stdio_exit_handler+0xc>)
 80083e6:	4903      	ldr	r1, [pc, #12]	; (80083f4 <stdio_exit_handler+0x10>)
 80083e8:	4803      	ldr	r0, [pc, #12]	; (80083f8 <stdio_exit_handler+0x14>)
 80083ea:	f000 b869 	b.w	80084c0 <_fwalk_sglue>
 80083ee:	bf00      	nop
 80083f0:	2000005c 	.word	0x2000005c
 80083f4:	08009125 	.word	0x08009125
 80083f8:	20000068 	.word	0x20000068

080083fc <cleanup_stdio>:
 80083fc:	6841      	ldr	r1, [r0, #4]
 80083fe:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <cleanup_stdio+0x34>)
 8008400:	4299      	cmp	r1, r3
 8008402:	b510      	push	{r4, lr}
 8008404:	4604      	mov	r4, r0
 8008406:	d001      	beq.n	800840c <cleanup_stdio+0x10>
 8008408:	f000 fe8c 	bl	8009124 <_fflush_r>
 800840c:	68a1      	ldr	r1, [r4, #8]
 800840e:	4b09      	ldr	r3, [pc, #36]	; (8008434 <cleanup_stdio+0x38>)
 8008410:	4299      	cmp	r1, r3
 8008412:	d002      	beq.n	800841a <cleanup_stdio+0x1e>
 8008414:	4620      	mov	r0, r4
 8008416:	f000 fe85 	bl	8009124 <_fflush_r>
 800841a:	68e1      	ldr	r1, [r4, #12]
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <cleanup_stdio+0x3c>)
 800841e:	4299      	cmp	r1, r3
 8008420:	d004      	beq.n	800842c <cleanup_stdio+0x30>
 8008422:	4620      	mov	r0, r4
 8008424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008428:	f000 be7c 	b.w	8009124 <_fflush_r>
 800842c:	bd10      	pop	{r4, pc}
 800842e:	bf00      	nop
 8008430:	20003498 	.word	0x20003498
 8008434:	20003500 	.word	0x20003500
 8008438:	20003568 	.word	0x20003568

0800843c <global_stdio_init.part.0>:
 800843c:	b510      	push	{r4, lr}
 800843e:	4b0b      	ldr	r3, [pc, #44]	; (800846c <global_stdio_init.part.0+0x30>)
 8008440:	4c0b      	ldr	r4, [pc, #44]	; (8008470 <global_stdio_init.part.0+0x34>)
 8008442:	4a0c      	ldr	r2, [pc, #48]	; (8008474 <global_stdio_init.part.0+0x38>)
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	4620      	mov	r0, r4
 8008448:	2200      	movs	r2, #0
 800844a:	2104      	movs	r1, #4
 800844c:	f7ff ff94 	bl	8008378 <std>
 8008450:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008454:	2201      	movs	r2, #1
 8008456:	2109      	movs	r1, #9
 8008458:	f7ff ff8e 	bl	8008378 <std>
 800845c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008460:	2202      	movs	r2, #2
 8008462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008466:	2112      	movs	r1, #18
 8008468:	f7ff bf86 	b.w	8008378 <std>
 800846c:	200035d0 	.word	0x200035d0
 8008470:	20003498 	.word	0x20003498
 8008474:	080083e5 	.word	0x080083e5

08008478 <__sfp_lock_acquire>:
 8008478:	4801      	ldr	r0, [pc, #4]	; (8008480 <__sfp_lock_acquire+0x8>)
 800847a:	f000 b9fe 	b.w	800887a <__retarget_lock_acquire_recursive>
 800847e:	bf00      	nop
 8008480:	200035d9 	.word	0x200035d9

08008484 <__sfp_lock_release>:
 8008484:	4801      	ldr	r0, [pc, #4]	; (800848c <__sfp_lock_release+0x8>)
 8008486:	f000 b9f9 	b.w	800887c <__retarget_lock_release_recursive>
 800848a:	bf00      	nop
 800848c:	200035d9 	.word	0x200035d9

08008490 <__sinit>:
 8008490:	b510      	push	{r4, lr}
 8008492:	4604      	mov	r4, r0
 8008494:	f7ff fff0 	bl	8008478 <__sfp_lock_acquire>
 8008498:	6a23      	ldr	r3, [r4, #32]
 800849a:	b11b      	cbz	r3, 80084a4 <__sinit+0x14>
 800849c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a0:	f7ff bff0 	b.w	8008484 <__sfp_lock_release>
 80084a4:	4b04      	ldr	r3, [pc, #16]	; (80084b8 <__sinit+0x28>)
 80084a6:	6223      	str	r3, [r4, #32]
 80084a8:	4b04      	ldr	r3, [pc, #16]	; (80084bc <__sinit+0x2c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1f5      	bne.n	800849c <__sinit+0xc>
 80084b0:	f7ff ffc4 	bl	800843c <global_stdio_init.part.0>
 80084b4:	e7f2      	b.n	800849c <__sinit+0xc>
 80084b6:	bf00      	nop
 80084b8:	080083fd 	.word	0x080083fd
 80084bc:	200035d0 	.word	0x200035d0

080084c0 <_fwalk_sglue>:
 80084c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c4:	4607      	mov	r7, r0
 80084c6:	4688      	mov	r8, r1
 80084c8:	4614      	mov	r4, r2
 80084ca:	2600      	movs	r6, #0
 80084cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084d0:	f1b9 0901 	subs.w	r9, r9, #1
 80084d4:	d505      	bpl.n	80084e2 <_fwalk_sglue+0x22>
 80084d6:	6824      	ldr	r4, [r4, #0]
 80084d8:	2c00      	cmp	r4, #0
 80084da:	d1f7      	bne.n	80084cc <_fwalk_sglue+0xc>
 80084dc:	4630      	mov	r0, r6
 80084de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d907      	bls.n	80084f8 <_fwalk_sglue+0x38>
 80084e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084ec:	3301      	adds	r3, #1
 80084ee:	d003      	beq.n	80084f8 <_fwalk_sglue+0x38>
 80084f0:	4629      	mov	r1, r5
 80084f2:	4638      	mov	r0, r7
 80084f4:	47c0      	blx	r8
 80084f6:	4306      	orrs	r6, r0
 80084f8:	3568      	adds	r5, #104	; 0x68
 80084fa:	e7e9      	b.n	80084d0 <_fwalk_sglue+0x10>

080084fc <iprintf>:
 80084fc:	b40f      	push	{r0, r1, r2, r3}
 80084fe:	b507      	push	{r0, r1, r2, lr}
 8008500:	4906      	ldr	r1, [pc, #24]	; (800851c <iprintf+0x20>)
 8008502:	ab04      	add	r3, sp, #16
 8008504:	6808      	ldr	r0, [r1, #0]
 8008506:	f853 2b04 	ldr.w	r2, [r3], #4
 800850a:	6881      	ldr	r1, [r0, #8]
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	f000 fad9 	bl	8008ac4 <_vfiprintf_r>
 8008512:	b003      	add	sp, #12
 8008514:	f85d eb04 	ldr.w	lr, [sp], #4
 8008518:	b004      	add	sp, #16
 800851a:	4770      	bx	lr
 800851c:	200000b4 	.word	0x200000b4

08008520 <_puts_r>:
 8008520:	6a03      	ldr	r3, [r0, #32]
 8008522:	b570      	push	{r4, r5, r6, lr}
 8008524:	6884      	ldr	r4, [r0, #8]
 8008526:	4605      	mov	r5, r0
 8008528:	460e      	mov	r6, r1
 800852a:	b90b      	cbnz	r3, 8008530 <_puts_r+0x10>
 800852c:	f7ff ffb0 	bl	8008490 <__sinit>
 8008530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008532:	07db      	lsls	r3, r3, #31
 8008534:	d405      	bmi.n	8008542 <_puts_r+0x22>
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	0598      	lsls	r0, r3, #22
 800853a:	d402      	bmi.n	8008542 <_puts_r+0x22>
 800853c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800853e:	f000 f99c 	bl	800887a <__retarget_lock_acquire_recursive>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	0719      	lsls	r1, r3, #28
 8008546:	d513      	bpl.n	8008570 <_puts_r+0x50>
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	b18b      	cbz	r3, 8008570 <_puts_r+0x50>
 800854c:	3e01      	subs	r6, #1
 800854e:	68a3      	ldr	r3, [r4, #8]
 8008550:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008554:	3b01      	subs	r3, #1
 8008556:	60a3      	str	r3, [r4, #8]
 8008558:	b9e9      	cbnz	r1, 8008596 <_puts_r+0x76>
 800855a:	2b00      	cmp	r3, #0
 800855c:	da2e      	bge.n	80085bc <_puts_r+0x9c>
 800855e:	4622      	mov	r2, r4
 8008560:	210a      	movs	r1, #10
 8008562:	4628      	mov	r0, r5
 8008564:	f000 f87b 	bl	800865e <__swbuf_r>
 8008568:	3001      	adds	r0, #1
 800856a:	d007      	beq.n	800857c <_puts_r+0x5c>
 800856c:	250a      	movs	r5, #10
 800856e:	e007      	b.n	8008580 <_puts_r+0x60>
 8008570:	4621      	mov	r1, r4
 8008572:	4628      	mov	r0, r5
 8008574:	f000 f8b0 	bl	80086d8 <__swsetup_r>
 8008578:	2800      	cmp	r0, #0
 800857a:	d0e7      	beq.n	800854c <_puts_r+0x2c>
 800857c:	f04f 35ff 	mov.w	r5, #4294967295
 8008580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008582:	07da      	lsls	r2, r3, #31
 8008584:	d405      	bmi.n	8008592 <_puts_r+0x72>
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	059b      	lsls	r3, r3, #22
 800858a:	d402      	bmi.n	8008592 <_puts_r+0x72>
 800858c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858e:	f000 f975 	bl	800887c <__retarget_lock_release_recursive>
 8008592:	4628      	mov	r0, r5
 8008594:	bd70      	pop	{r4, r5, r6, pc}
 8008596:	2b00      	cmp	r3, #0
 8008598:	da04      	bge.n	80085a4 <_puts_r+0x84>
 800859a:	69a2      	ldr	r2, [r4, #24]
 800859c:	429a      	cmp	r2, r3
 800859e:	dc06      	bgt.n	80085ae <_puts_r+0x8e>
 80085a0:	290a      	cmp	r1, #10
 80085a2:	d004      	beq.n	80085ae <_puts_r+0x8e>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	6022      	str	r2, [r4, #0]
 80085aa:	7019      	strb	r1, [r3, #0]
 80085ac:	e7cf      	b.n	800854e <_puts_r+0x2e>
 80085ae:	4622      	mov	r2, r4
 80085b0:	4628      	mov	r0, r5
 80085b2:	f000 f854 	bl	800865e <__swbuf_r>
 80085b6:	3001      	adds	r0, #1
 80085b8:	d1c9      	bne.n	800854e <_puts_r+0x2e>
 80085ba:	e7df      	b.n	800857c <_puts_r+0x5c>
 80085bc:	6823      	ldr	r3, [r4, #0]
 80085be:	250a      	movs	r5, #10
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	6022      	str	r2, [r4, #0]
 80085c4:	701d      	strb	r5, [r3, #0]
 80085c6:	e7db      	b.n	8008580 <_puts_r+0x60>

080085c8 <puts>:
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <puts+0xc>)
 80085ca:	4601      	mov	r1, r0
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	f7ff bfa7 	b.w	8008520 <_puts_r>
 80085d2:	bf00      	nop
 80085d4:	200000b4 	.word	0x200000b4

080085d8 <__sread>:
 80085d8:	b510      	push	{r4, lr}
 80085da:	460c      	mov	r4, r1
 80085dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e0:	f000 f8fc 	bl	80087dc <_read_r>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	bfab      	itete	ge
 80085e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085ea:	89a3      	ldrhlt	r3, [r4, #12]
 80085ec:	181b      	addge	r3, r3, r0
 80085ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085f2:	bfac      	ite	ge
 80085f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80085f6:	81a3      	strhlt	r3, [r4, #12]
 80085f8:	bd10      	pop	{r4, pc}

080085fa <__swrite>:
 80085fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085fe:	461f      	mov	r7, r3
 8008600:	898b      	ldrh	r3, [r1, #12]
 8008602:	05db      	lsls	r3, r3, #23
 8008604:	4605      	mov	r5, r0
 8008606:	460c      	mov	r4, r1
 8008608:	4616      	mov	r6, r2
 800860a:	d505      	bpl.n	8008618 <__swrite+0x1e>
 800860c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008610:	2302      	movs	r3, #2
 8008612:	2200      	movs	r2, #0
 8008614:	f000 f8d0 	bl	80087b8 <_lseek_r>
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800861e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008622:	81a3      	strh	r3, [r4, #12]
 8008624:	4632      	mov	r2, r6
 8008626:	463b      	mov	r3, r7
 8008628:	4628      	mov	r0, r5
 800862a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800862e:	f000 b8e7 	b.w	8008800 <_write_r>

08008632 <__sseek>:
 8008632:	b510      	push	{r4, lr}
 8008634:	460c      	mov	r4, r1
 8008636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800863a:	f000 f8bd 	bl	80087b8 <_lseek_r>
 800863e:	1c43      	adds	r3, r0, #1
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	bf15      	itete	ne
 8008644:	6560      	strne	r0, [r4, #84]	; 0x54
 8008646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800864a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800864e:	81a3      	strheq	r3, [r4, #12]
 8008650:	bf18      	it	ne
 8008652:	81a3      	strhne	r3, [r4, #12]
 8008654:	bd10      	pop	{r4, pc}

08008656 <__sclose>:
 8008656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800865a:	f000 b89d 	b.w	8008798 <_close_r>

0800865e <__swbuf_r>:
 800865e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008660:	460e      	mov	r6, r1
 8008662:	4614      	mov	r4, r2
 8008664:	4605      	mov	r5, r0
 8008666:	b118      	cbz	r0, 8008670 <__swbuf_r+0x12>
 8008668:	6a03      	ldr	r3, [r0, #32]
 800866a:	b90b      	cbnz	r3, 8008670 <__swbuf_r+0x12>
 800866c:	f7ff ff10 	bl	8008490 <__sinit>
 8008670:	69a3      	ldr	r3, [r4, #24]
 8008672:	60a3      	str	r3, [r4, #8]
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	071a      	lsls	r2, r3, #28
 8008678:	d525      	bpl.n	80086c6 <__swbuf_r+0x68>
 800867a:	6923      	ldr	r3, [r4, #16]
 800867c:	b31b      	cbz	r3, 80086c6 <__swbuf_r+0x68>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	6922      	ldr	r2, [r4, #16]
 8008682:	1a98      	subs	r0, r3, r2
 8008684:	6963      	ldr	r3, [r4, #20]
 8008686:	b2f6      	uxtb	r6, r6
 8008688:	4283      	cmp	r3, r0
 800868a:	4637      	mov	r7, r6
 800868c:	dc04      	bgt.n	8008698 <__swbuf_r+0x3a>
 800868e:	4621      	mov	r1, r4
 8008690:	4628      	mov	r0, r5
 8008692:	f000 fd47 	bl	8009124 <_fflush_r>
 8008696:	b9e0      	cbnz	r0, 80086d2 <__swbuf_r+0x74>
 8008698:	68a3      	ldr	r3, [r4, #8]
 800869a:	3b01      	subs	r3, #1
 800869c:	60a3      	str	r3, [r4, #8]
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	701e      	strb	r6, [r3, #0]
 80086a6:	6962      	ldr	r2, [r4, #20]
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d004      	beq.n	80086b8 <__swbuf_r+0x5a>
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	07db      	lsls	r3, r3, #31
 80086b2:	d506      	bpl.n	80086c2 <__swbuf_r+0x64>
 80086b4:	2e0a      	cmp	r6, #10
 80086b6:	d104      	bne.n	80086c2 <__swbuf_r+0x64>
 80086b8:	4621      	mov	r1, r4
 80086ba:	4628      	mov	r0, r5
 80086bc:	f000 fd32 	bl	8009124 <_fflush_r>
 80086c0:	b938      	cbnz	r0, 80086d2 <__swbuf_r+0x74>
 80086c2:	4638      	mov	r0, r7
 80086c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c6:	4621      	mov	r1, r4
 80086c8:	4628      	mov	r0, r5
 80086ca:	f000 f805 	bl	80086d8 <__swsetup_r>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d0d5      	beq.n	800867e <__swbuf_r+0x20>
 80086d2:	f04f 37ff 	mov.w	r7, #4294967295
 80086d6:	e7f4      	b.n	80086c2 <__swbuf_r+0x64>

080086d8 <__swsetup_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4b2a      	ldr	r3, [pc, #168]	; (8008784 <__swsetup_r+0xac>)
 80086dc:	4605      	mov	r5, r0
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	460c      	mov	r4, r1
 80086e2:	b118      	cbz	r0, 80086ec <__swsetup_r+0x14>
 80086e4:	6a03      	ldr	r3, [r0, #32]
 80086e6:	b90b      	cbnz	r3, 80086ec <__swsetup_r+0x14>
 80086e8:	f7ff fed2 	bl	8008490 <__sinit>
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f2:	0718      	lsls	r0, r3, #28
 80086f4:	d422      	bmi.n	800873c <__swsetup_r+0x64>
 80086f6:	06d9      	lsls	r1, r3, #27
 80086f8:	d407      	bmi.n	800870a <__swsetup_r+0x32>
 80086fa:	2309      	movs	r3, #9
 80086fc:	602b      	str	r3, [r5, #0]
 80086fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008702:	81a3      	strh	r3, [r4, #12]
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	e034      	b.n	8008774 <__swsetup_r+0x9c>
 800870a:	0758      	lsls	r0, r3, #29
 800870c:	d512      	bpl.n	8008734 <__swsetup_r+0x5c>
 800870e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008710:	b141      	cbz	r1, 8008724 <__swsetup_r+0x4c>
 8008712:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008716:	4299      	cmp	r1, r3
 8008718:	d002      	beq.n	8008720 <__swsetup_r+0x48>
 800871a:	4628      	mov	r0, r5
 800871c:	f000 f8b0 	bl	8008880 <_free_r>
 8008720:	2300      	movs	r3, #0
 8008722:	6363      	str	r3, [r4, #52]	; 0x34
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	2300      	movs	r3, #0
 800872e:	6063      	str	r3, [r4, #4]
 8008730:	6923      	ldr	r3, [r4, #16]
 8008732:	6023      	str	r3, [r4, #0]
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	f043 0308 	orr.w	r3, r3, #8
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	6923      	ldr	r3, [r4, #16]
 800873e:	b94b      	cbnz	r3, 8008754 <__swsetup_r+0x7c>
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800874a:	d003      	beq.n	8008754 <__swsetup_r+0x7c>
 800874c:	4621      	mov	r1, r4
 800874e:	4628      	mov	r0, r5
 8008750:	f000 fd36 	bl	80091c0 <__smakebuf_r>
 8008754:	89a0      	ldrh	r0, [r4, #12]
 8008756:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800875a:	f010 0301 	ands.w	r3, r0, #1
 800875e:	d00a      	beq.n	8008776 <__swsetup_r+0x9e>
 8008760:	2300      	movs	r3, #0
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	6963      	ldr	r3, [r4, #20]
 8008766:	425b      	negs	r3, r3
 8008768:	61a3      	str	r3, [r4, #24]
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	b943      	cbnz	r3, 8008780 <__swsetup_r+0xa8>
 800876e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008772:	d1c4      	bne.n	80086fe <__swsetup_r+0x26>
 8008774:	bd38      	pop	{r3, r4, r5, pc}
 8008776:	0781      	lsls	r1, r0, #30
 8008778:	bf58      	it	pl
 800877a:	6963      	ldrpl	r3, [r4, #20]
 800877c:	60a3      	str	r3, [r4, #8]
 800877e:	e7f4      	b.n	800876a <__swsetup_r+0x92>
 8008780:	2000      	movs	r0, #0
 8008782:	e7f7      	b.n	8008774 <__swsetup_r+0x9c>
 8008784:	200000b4 	.word	0x200000b4

08008788 <memset>:
 8008788:	4402      	add	r2, r0
 800878a:	4603      	mov	r3, r0
 800878c:	4293      	cmp	r3, r2
 800878e:	d100      	bne.n	8008792 <memset+0xa>
 8008790:	4770      	bx	lr
 8008792:	f803 1b01 	strb.w	r1, [r3], #1
 8008796:	e7f9      	b.n	800878c <memset+0x4>

08008798 <_close_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	; (80087b4 <_close_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7f9 f94b 	bl	8001a3e <_close>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_close_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_close_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	200035d4 	.word	0x200035d4

080087b8 <_lseek_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4d07      	ldr	r5, [pc, #28]	; (80087d8 <_lseek_r+0x20>)
 80087bc:	4604      	mov	r4, r0
 80087be:	4608      	mov	r0, r1
 80087c0:	4611      	mov	r1, r2
 80087c2:	2200      	movs	r2, #0
 80087c4:	602a      	str	r2, [r5, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	f7f9 f960 	bl	8001a8c <_lseek>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_lseek_r+0x1e>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_lseek_r+0x1e>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	200035d4 	.word	0x200035d4

080087dc <_read_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4d07      	ldr	r5, [pc, #28]	; (80087fc <_read_r+0x20>)
 80087e0:	4604      	mov	r4, r0
 80087e2:	4608      	mov	r0, r1
 80087e4:	4611      	mov	r1, r2
 80087e6:	2200      	movs	r2, #0
 80087e8:	602a      	str	r2, [r5, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	f7f9 f90a 	bl	8001a04 <_read>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_read_r+0x1e>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_read_r+0x1e>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	200035d4 	.word	0x200035d4

08008800 <_write_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d07      	ldr	r5, [pc, #28]	; (8008820 <_write_r+0x20>)
 8008804:	4604      	mov	r4, r0
 8008806:	4608      	mov	r0, r1
 8008808:	4611      	mov	r1, r2
 800880a:	2200      	movs	r2, #0
 800880c:	602a      	str	r2, [r5, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	f7f8 ff38 	bl	8001684 <_write>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_write_r+0x1e>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	b103      	cbz	r3, 800881e <_write_r+0x1e>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	200035d4 	.word	0x200035d4

08008824 <__errno>:
 8008824:	4b01      	ldr	r3, [pc, #4]	; (800882c <__errno+0x8>)
 8008826:	6818      	ldr	r0, [r3, #0]
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	200000b4 	.word	0x200000b4

08008830 <__libc_init_array>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	4d0d      	ldr	r5, [pc, #52]	; (8008868 <__libc_init_array+0x38>)
 8008834:	4c0d      	ldr	r4, [pc, #52]	; (800886c <__libc_init_array+0x3c>)
 8008836:	1b64      	subs	r4, r4, r5
 8008838:	10a4      	asrs	r4, r4, #2
 800883a:	2600      	movs	r6, #0
 800883c:	42a6      	cmp	r6, r4
 800883e:	d109      	bne.n	8008854 <__libc_init_array+0x24>
 8008840:	4d0b      	ldr	r5, [pc, #44]	; (8008870 <__libc_init_array+0x40>)
 8008842:	4c0c      	ldr	r4, [pc, #48]	; (8008874 <__libc_init_array+0x44>)
 8008844:	f000 fd2a 	bl	800929c <_init>
 8008848:	1b64      	subs	r4, r4, r5
 800884a:	10a4      	asrs	r4, r4, #2
 800884c:	2600      	movs	r6, #0
 800884e:	42a6      	cmp	r6, r4
 8008850:	d105      	bne.n	800885e <__libc_init_array+0x2e>
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	f855 3b04 	ldr.w	r3, [r5], #4
 8008858:	4798      	blx	r3
 800885a:	3601      	adds	r6, #1
 800885c:	e7ee      	b.n	800883c <__libc_init_array+0xc>
 800885e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008862:	4798      	blx	r3
 8008864:	3601      	adds	r6, #1
 8008866:	e7f2      	b.n	800884e <__libc_init_array+0x1e>
 8008868:	080099fc 	.word	0x080099fc
 800886c:	080099fc 	.word	0x080099fc
 8008870:	080099fc 	.word	0x080099fc
 8008874:	08009a00 	.word	0x08009a00

08008878 <__retarget_lock_init_recursive>:
 8008878:	4770      	bx	lr

0800887a <__retarget_lock_acquire_recursive>:
 800887a:	4770      	bx	lr

0800887c <__retarget_lock_release_recursive>:
 800887c:	4770      	bx	lr
	...

08008880 <_free_r>:
 8008880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008882:	2900      	cmp	r1, #0
 8008884:	d044      	beq.n	8008910 <_free_r+0x90>
 8008886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800888a:	9001      	str	r0, [sp, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	f1a1 0404 	sub.w	r4, r1, #4
 8008892:	bfb8      	it	lt
 8008894:	18e4      	addlt	r4, r4, r3
 8008896:	f000 f8df 	bl	8008a58 <__malloc_lock>
 800889a:	4a1e      	ldr	r2, [pc, #120]	; (8008914 <_free_r+0x94>)
 800889c:	9801      	ldr	r0, [sp, #4]
 800889e:	6813      	ldr	r3, [r2, #0]
 80088a0:	b933      	cbnz	r3, 80088b0 <_free_r+0x30>
 80088a2:	6063      	str	r3, [r4, #4]
 80088a4:	6014      	str	r4, [r2, #0]
 80088a6:	b003      	add	sp, #12
 80088a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088ac:	f000 b8da 	b.w	8008a64 <__malloc_unlock>
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	d908      	bls.n	80088c6 <_free_r+0x46>
 80088b4:	6825      	ldr	r5, [r4, #0]
 80088b6:	1961      	adds	r1, r4, r5
 80088b8:	428b      	cmp	r3, r1
 80088ba:	bf01      	itttt	eq
 80088bc:	6819      	ldreq	r1, [r3, #0]
 80088be:	685b      	ldreq	r3, [r3, #4]
 80088c0:	1949      	addeq	r1, r1, r5
 80088c2:	6021      	streq	r1, [r4, #0]
 80088c4:	e7ed      	b.n	80088a2 <_free_r+0x22>
 80088c6:	461a      	mov	r2, r3
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	b10b      	cbz	r3, 80088d0 <_free_r+0x50>
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	d9fa      	bls.n	80088c6 <_free_r+0x46>
 80088d0:	6811      	ldr	r1, [r2, #0]
 80088d2:	1855      	adds	r5, r2, r1
 80088d4:	42a5      	cmp	r5, r4
 80088d6:	d10b      	bne.n	80088f0 <_free_r+0x70>
 80088d8:	6824      	ldr	r4, [r4, #0]
 80088da:	4421      	add	r1, r4
 80088dc:	1854      	adds	r4, r2, r1
 80088de:	42a3      	cmp	r3, r4
 80088e0:	6011      	str	r1, [r2, #0]
 80088e2:	d1e0      	bne.n	80088a6 <_free_r+0x26>
 80088e4:	681c      	ldr	r4, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	6053      	str	r3, [r2, #4]
 80088ea:	440c      	add	r4, r1
 80088ec:	6014      	str	r4, [r2, #0]
 80088ee:	e7da      	b.n	80088a6 <_free_r+0x26>
 80088f0:	d902      	bls.n	80088f8 <_free_r+0x78>
 80088f2:	230c      	movs	r3, #12
 80088f4:	6003      	str	r3, [r0, #0]
 80088f6:	e7d6      	b.n	80088a6 <_free_r+0x26>
 80088f8:	6825      	ldr	r5, [r4, #0]
 80088fa:	1961      	adds	r1, r4, r5
 80088fc:	428b      	cmp	r3, r1
 80088fe:	bf04      	itt	eq
 8008900:	6819      	ldreq	r1, [r3, #0]
 8008902:	685b      	ldreq	r3, [r3, #4]
 8008904:	6063      	str	r3, [r4, #4]
 8008906:	bf04      	itt	eq
 8008908:	1949      	addeq	r1, r1, r5
 800890a:	6021      	streq	r1, [r4, #0]
 800890c:	6054      	str	r4, [r2, #4]
 800890e:	e7ca      	b.n	80088a6 <_free_r+0x26>
 8008910:	b003      	add	sp, #12
 8008912:	bd30      	pop	{r4, r5, pc}
 8008914:	200035dc 	.word	0x200035dc

08008918 <sbrk_aligned>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	4e0e      	ldr	r6, [pc, #56]	; (8008954 <sbrk_aligned+0x3c>)
 800891c:	460c      	mov	r4, r1
 800891e:	6831      	ldr	r1, [r6, #0]
 8008920:	4605      	mov	r5, r0
 8008922:	b911      	cbnz	r1, 800892a <sbrk_aligned+0x12>
 8008924:	f000 fcaa 	bl	800927c <_sbrk_r>
 8008928:	6030      	str	r0, [r6, #0]
 800892a:	4621      	mov	r1, r4
 800892c:	4628      	mov	r0, r5
 800892e:	f000 fca5 	bl	800927c <_sbrk_r>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	d00a      	beq.n	800894c <sbrk_aligned+0x34>
 8008936:	1cc4      	adds	r4, r0, #3
 8008938:	f024 0403 	bic.w	r4, r4, #3
 800893c:	42a0      	cmp	r0, r4
 800893e:	d007      	beq.n	8008950 <sbrk_aligned+0x38>
 8008940:	1a21      	subs	r1, r4, r0
 8008942:	4628      	mov	r0, r5
 8008944:	f000 fc9a 	bl	800927c <_sbrk_r>
 8008948:	3001      	adds	r0, #1
 800894a:	d101      	bne.n	8008950 <sbrk_aligned+0x38>
 800894c:	f04f 34ff 	mov.w	r4, #4294967295
 8008950:	4620      	mov	r0, r4
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	200035e0 	.word	0x200035e0

08008958 <_malloc_r>:
 8008958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800895c:	1ccd      	adds	r5, r1, #3
 800895e:	f025 0503 	bic.w	r5, r5, #3
 8008962:	3508      	adds	r5, #8
 8008964:	2d0c      	cmp	r5, #12
 8008966:	bf38      	it	cc
 8008968:	250c      	movcc	r5, #12
 800896a:	2d00      	cmp	r5, #0
 800896c:	4607      	mov	r7, r0
 800896e:	db01      	blt.n	8008974 <_malloc_r+0x1c>
 8008970:	42a9      	cmp	r1, r5
 8008972:	d905      	bls.n	8008980 <_malloc_r+0x28>
 8008974:	230c      	movs	r3, #12
 8008976:	603b      	str	r3, [r7, #0]
 8008978:	2600      	movs	r6, #0
 800897a:	4630      	mov	r0, r6
 800897c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008980:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a54 <_malloc_r+0xfc>
 8008984:	f000 f868 	bl	8008a58 <__malloc_lock>
 8008988:	f8d8 3000 	ldr.w	r3, [r8]
 800898c:	461c      	mov	r4, r3
 800898e:	bb5c      	cbnz	r4, 80089e8 <_malloc_r+0x90>
 8008990:	4629      	mov	r1, r5
 8008992:	4638      	mov	r0, r7
 8008994:	f7ff ffc0 	bl	8008918 <sbrk_aligned>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	4604      	mov	r4, r0
 800899c:	d155      	bne.n	8008a4a <_malloc_r+0xf2>
 800899e:	f8d8 4000 	ldr.w	r4, [r8]
 80089a2:	4626      	mov	r6, r4
 80089a4:	2e00      	cmp	r6, #0
 80089a6:	d145      	bne.n	8008a34 <_malloc_r+0xdc>
 80089a8:	2c00      	cmp	r4, #0
 80089aa:	d048      	beq.n	8008a3e <_malloc_r+0xe6>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	4631      	mov	r1, r6
 80089b0:	4638      	mov	r0, r7
 80089b2:	eb04 0903 	add.w	r9, r4, r3
 80089b6:	f000 fc61 	bl	800927c <_sbrk_r>
 80089ba:	4581      	cmp	r9, r0
 80089bc:	d13f      	bne.n	8008a3e <_malloc_r+0xe6>
 80089be:	6821      	ldr	r1, [r4, #0]
 80089c0:	1a6d      	subs	r5, r5, r1
 80089c2:	4629      	mov	r1, r5
 80089c4:	4638      	mov	r0, r7
 80089c6:	f7ff ffa7 	bl	8008918 <sbrk_aligned>
 80089ca:	3001      	adds	r0, #1
 80089cc:	d037      	beq.n	8008a3e <_malloc_r+0xe6>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	442b      	add	r3, r5
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	f8d8 3000 	ldr.w	r3, [r8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d038      	beq.n	8008a4e <_malloc_r+0xf6>
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	42a2      	cmp	r2, r4
 80089e0:	d12b      	bne.n	8008a3a <_malloc_r+0xe2>
 80089e2:	2200      	movs	r2, #0
 80089e4:	605a      	str	r2, [r3, #4]
 80089e6:	e00f      	b.n	8008a08 <_malloc_r+0xb0>
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	1b52      	subs	r2, r2, r5
 80089ec:	d41f      	bmi.n	8008a2e <_malloc_r+0xd6>
 80089ee:	2a0b      	cmp	r2, #11
 80089f0:	d917      	bls.n	8008a22 <_malloc_r+0xca>
 80089f2:	1961      	adds	r1, r4, r5
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	6025      	str	r5, [r4, #0]
 80089f8:	bf18      	it	ne
 80089fa:	6059      	strne	r1, [r3, #4]
 80089fc:	6863      	ldr	r3, [r4, #4]
 80089fe:	bf08      	it	eq
 8008a00:	f8c8 1000 	streq.w	r1, [r8]
 8008a04:	5162      	str	r2, [r4, r5]
 8008a06:	604b      	str	r3, [r1, #4]
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f104 060b 	add.w	r6, r4, #11
 8008a0e:	f000 f829 	bl	8008a64 <__malloc_unlock>
 8008a12:	f026 0607 	bic.w	r6, r6, #7
 8008a16:	1d23      	adds	r3, r4, #4
 8008a18:	1af2      	subs	r2, r6, r3
 8008a1a:	d0ae      	beq.n	800897a <_malloc_r+0x22>
 8008a1c:	1b9b      	subs	r3, r3, r6
 8008a1e:	50a3      	str	r3, [r4, r2]
 8008a20:	e7ab      	b.n	800897a <_malloc_r+0x22>
 8008a22:	42a3      	cmp	r3, r4
 8008a24:	6862      	ldr	r2, [r4, #4]
 8008a26:	d1dd      	bne.n	80089e4 <_malloc_r+0x8c>
 8008a28:	f8c8 2000 	str.w	r2, [r8]
 8008a2c:	e7ec      	b.n	8008a08 <_malloc_r+0xb0>
 8008a2e:	4623      	mov	r3, r4
 8008a30:	6864      	ldr	r4, [r4, #4]
 8008a32:	e7ac      	b.n	800898e <_malloc_r+0x36>
 8008a34:	4634      	mov	r4, r6
 8008a36:	6876      	ldr	r6, [r6, #4]
 8008a38:	e7b4      	b.n	80089a4 <_malloc_r+0x4c>
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	e7cc      	b.n	80089d8 <_malloc_r+0x80>
 8008a3e:	230c      	movs	r3, #12
 8008a40:	603b      	str	r3, [r7, #0]
 8008a42:	4638      	mov	r0, r7
 8008a44:	f000 f80e 	bl	8008a64 <__malloc_unlock>
 8008a48:	e797      	b.n	800897a <_malloc_r+0x22>
 8008a4a:	6025      	str	r5, [r4, #0]
 8008a4c:	e7dc      	b.n	8008a08 <_malloc_r+0xb0>
 8008a4e:	605b      	str	r3, [r3, #4]
 8008a50:	deff      	udf	#255	; 0xff
 8008a52:	bf00      	nop
 8008a54:	200035dc 	.word	0x200035dc

08008a58 <__malloc_lock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	; (8008a60 <__malloc_lock+0x8>)
 8008a5a:	f7ff bf0e 	b.w	800887a <__retarget_lock_acquire_recursive>
 8008a5e:	bf00      	nop
 8008a60:	200035d8 	.word	0x200035d8

08008a64 <__malloc_unlock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_unlock+0x8>)
 8008a66:	f7ff bf09 	b.w	800887c <__retarget_lock_release_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	200035d8 	.word	0x200035d8

08008a70 <__sfputc_r>:
 8008a70:	6893      	ldr	r3, [r2, #8]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	b410      	push	{r4}
 8008a78:	6093      	str	r3, [r2, #8]
 8008a7a:	da08      	bge.n	8008a8e <__sfputc_r+0x1e>
 8008a7c:	6994      	ldr	r4, [r2, #24]
 8008a7e:	42a3      	cmp	r3, r4
 8008a80:	db01      	blt.n	8008a86 <__sfputc_r+0x16>
 8008a82:	290a      	cmp	r1, #10
 8008a84:	d103      	bne.n	8008a8e <__sfputc_r+0x1e>
 8008a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a8a:	f7ff bde8 	b.w	800865e <__swbuf_r>
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	1c58      	adds	r0, r3, #1
 8008a92:	6010      	str	r0, [r2, #0]
 8008a94:	7019      	strb	r1, [r3, #0]
 8008a96:	4608      	mov	r0, r1
 8008a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <__sfputs_r>:
 8008a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	460f      	mov	r7, r1
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	18d5      	adds	r5, r2, r3
 8008aa8:	42ac      	cmp	r4, r5
 8008aaa:	d101      	bne.n	8008ab0 <__sfputs_r+0x12>
 8008aac:	2000      	movs	r0, #0
 8008aae:	e007      	b.n	8008ac0 <__sfputs_r+0x22>
 8008ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab4:	463a      	mov	r2, r7
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7ff ffda 	bl	8008a70 <__sfputc_r>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d1f3      	bne.n	8008aa8 <__sfputs_r+0xa>
 8008ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ac4 <_vfiprintf_r>:
 8008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	460d      	mov	r5, r1
 8008aca:	b09d      	sub	sp, #116	; 0x74
 8008acc:	4614      	mov	r4, r2
 8008ace:	4698      	mov	r8, r3
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	b118      	cbz	r0, 8008adc <_vfiprintf_r+0x18>
 8008ad4:	6a03      	ldr	r3, [r0, #32]
 8008ad6:	b90b      	cbnz	r3, 8008adc <_vfiprintf_r+0x18>
 8008ad8:	f7ff fcda 	bl	8008490 <__sinit>
 8008adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ade:	07d9      	lsls	r1, r3, #31
 8008ae0:	d405      	bmi.n	8008aee <_vfiprintf_r+0x2a>
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	059a      	lsls	r2, r3, #22
 8008ae6:	d402      	bmi.n	8008aee <_vfiprintf_r+0x2a>
 8008ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aea:	f7ff fec6 	bl	800887a <__retarget_lock_acquire_recursive>
 8008aee:	89ab      	ldrh	r3, [r5, #12]
 8008af0:	071b      	lsls	r3, r3, #28
 8008af2:	d501      	bpl.n	8008af8 <_vfiprintf_r+0x34>
 8008af4:	692b      	ldr	r3, [r5, #16]
 8008af6:	b99b      	cbnz	r3, 8008b20 <_vfiprintf_r+0x5c>
 8008af8:	4629      	mov	r1, r5
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff fdec 	bl	80086d8 <__swsetup_r>
 8008b00:	b170      	cbz	r0, 8008b20 <_vfiprintf_r+0x5c>
 8008b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b04:	07dc      	lsls	r4, r3, #31
 8008b06:	d504      	bpl.n	8008b12 <_vfiprintf_r+0x4e>
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	b01d      	add	sp, #116	; 0x74
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	89ab      	ldrh	r3, [r5, #12]
 8008b14:	0598      	lsls	r0, r3, #22
 8008b16:	d4f7      	bmi.n	8008b08 <_vfiprintf_r+0x44>
 8008b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1a:	f7ff feaf 	bl	800887c <__retarget_lock_release_recursive>
 8008b1e:	e7f3      	b.n	8008b08 <_vfiprintf_r+0x44>
 8008b20:	2300      	movs	r3, #0
 8008b22:	9309      	str	r3, [sp, #36]	; 0x24
 8008b24:	2320      	movs	r3, #32
 8008b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b2e:	2330      	movs	r3, #48	; 0x30
 8008b30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ce4 <_vfiprintf_r+0x220>
 8008b34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b38:	f04f 0901 	mov.w	r9, #1
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	469a      	mov	sl, r3
 8008b40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b44:	b10a      	cbz	r2, 8008b4a <_vfiprintf_r+0x86>
 8008b46:	2a25      	cmp	r2, #37	; 0x25
 8008b48:	d1f9      	bne.n	8008b3e <_vfiprintf_r+0x7a>
 8008b4a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b4e:	d00b      	beq.n	8008b68 <_vfiprintf_r+0xa4>
 8008b50:	465b      	mov	r3, fp
 8008b52:	4622      	mov	r2, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff ffa1 	bl	8008a9e <__sfputs_r>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	f000 80a9 	beq.w	8008cb4 <_vfiprintf_r+0x1f0>
 8008b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b64:	445a      	add	r2, fp
 8008b66:	9209      	str	r2, [sp, #36]	; 0x24
 8008b68:	f89a 3000 	ldrb.w	r3, [sl]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 80a1 	beq.w	8008cb4 <_vfiprintf_r+0x1f0>
 8008b72:	2300      	movs	r3, #0
 8008b74:	f04f 32ff 	mov.w	r2, #4294967295
 8008b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b7c:	f10a 0a01 	add.w	sl, sl, #1
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	9307      	str	r3, [sp, #28]
 8008b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b88:	931a      	str	r3, [sp, #104]	; 0x68
 8008b8a:	4654      	mov	r4, sl
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b92:	4854      	ldr	r0, [pc, #336]	; (8008ce4 <_vfiprintf_r+0x220>)
 8008b94:	f7f7 fb3c 	bl	8000210 <memchr>
 8008b98:	9a04      	ldr	r2, [sp, #16]
 8008b9a:	b9d8      	cbnz	r0, 8008bd4 <_vfiprintf_r+0x110>
 8008b9c:	06d1      	lsls	r1, r2, #27
 8008b9e:	bf44      	itt	mi
 8008ba0:	2320      	movmi	r3, #32
 8008ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba6:	0713      	lsls	r3, r2, #28
 8008ba8:	bf44      	itt	mi
 8008baa:	232b      	movmi	r3, #43	; 0x2b
 8008bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb6:	d015      	beq.n	8008be4 <_vfiprintf_r+0x120>
 8008bb8:	9a07      	ldr	r2, [sp, #28]
 8008bba:	4654      	mov	r4, sl
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	f04f 0c0a 	mov.w	ip, #10
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bc8:	3b30      	subs	r3, #48	; 0x30
 8008bca:	2b09      	cmp	r3, #9
 8008bcc:	d94d      	bls.n	8008c6a <_vfiprintf_r+0x1a6>
 8008bce:	b1b0      	cbz	r0, 8008bfe <_vfiprintf_r+0x13a>
 8008bd0:	9207      	str	r2, [sp, #28]
 8008bd2:	e014      	b.n	8008bfe <_vfiprintf_r+0x13a>
 8008bd4:	eba0 0308 	sub.w	r3, r0, r8
 8008bd8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	46a2      	mov	sl, r4
 8008be2:	e7d2      	b.n	8008b8a <_vfiprintf_r+0xc6>
 8008be4:	9b03      	ldr	r3, [sp, #12]
 8008be6:	1d19      	adds	r1, r3, #4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	9103      	str	r1, [sp, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bfbb      	ittet	lt
 8008bf0:	425b      	neglt	r3, r3
 8008bf2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bf6:	9307      	strge	r3, [sp, #28]
 8008bf8:	9307      	strlt	r3, [sp, #28]
 8008bfa:	bfb8      	it	lt
 8008bfc:	9204      	strlt	r2, [sp, #16]
 8008bfe:	7823      	ldrb	r3, [r4, #0]
 8008c00:	2b2e      	cmp	r3, #46	; 0x2e
 8008c02:	d10c      	bne.n	8008c1e <_vfiprintf_r+0x15a>
 8008c04:	7863      	ldrb	r3, [r4, #1]
 8008c06:	2b2a      	cmp	r3, #42	; 0x2a
 8008c08:	d134      	bne.n	8008c74 <_vfiprintf_r+0x1b0>
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	1d1a      	adds	r2, r3, #4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	9203      	str	r2, [sp, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bfb8      	it	lt
 8008c16:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c1a:	3402      	adds	r4, #2
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008cf4 <_vfiprintf_r+0x230>
 8008c22:	7821      	ldrb	r1, [r4, #0]
 8008c24:	2203      	movs	r2, #3
 8008c26:	4650      	mov	r0, sl
 8008c28:	f7f7 faf2 	bl	8000210 <memchr>
 8008c2c:	b138      	cbz	r0, 8008c3e <_vfiprintf_r+0x17a>
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	eba0 000a 	sub.w	r0, r0, sl
 8008c34:	2240      	movs	r2, #64	; 0x40
 8008c36:	4082      	lsls	r2, r0
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	3401      	adds	r4, #1
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c42:	4829      	ldr	r0, [pc, #164]	; (8008ce8 <_vfiprintf_r+0x224>)
 8008c44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c48:	2206      	movs	r2, #6
 8008c4a:	f7f7 fae1 	bl	8000210 <memchr>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d03f      	beq.n	8008cd2 <_vfiprintf_r+0x20e>
 8008c52:	4b26      	ldr	r3, [pc, #152]	; (8008cec <_vfiprintf_r+0x228>)
 8008c54:	bb1b      	cbnz	r3, 8008c9e <_vfiprintf_r+0x1da>
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	3307      	adds	r3, #7
 8008c5a:	f023 0307 	bic.w	r3, r3, #7
 8008c5e:	3308      	adds	r3, #8
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c64:	443b      	add	r3, r7
 8008c66:	9309      	str	r3, [sp, #36]	; 0x24
 8008c68:	e768      	b.n	8008b3c <_vfiprintf_r+0x78>
 8008c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c6e:	460c      	mov	r4, r1
 8008c70:	2001      	movs	r0, #1
 8008c72:	e7a6      	b.n	8008bc2 <_vfiprintf_r+0xfe>
 8008c74:	2300      	movs	r3, #0
 8008c76:	3401      	adds	r4, #1
 8008c78:	9305      	str	r3, [sp, #20]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	f04f 0c0a 	mov.w	ip, #10
 8008c80:	4620      	mov	r0, r4
 8008c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c86:	3a30      	subs	r2, #48	; 0x30
 8008c88:	2a09      	cmp	r2, #9
 8008c8a:	d903      	bls.n	8008c94 <_vfiprintf_r+0x1d0>
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0c6      	beq.n	8008c1e <_vfiprintf_r+0x15a>
 8008c90:	9105      	str	r1, [sp, #20]
 8008c92:	e7c4      	b.n	8008c1e <_vfiprintf_r+0x15a>
 8008c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c98:	4604      	mov	r4, r0
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e7f0      	b.n	8008c80 <_vfiprintf_r+0x1bc>
 8008c9e:	ab03      	add	r3, sp, #12
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	4b12      	ldr	r3, [pc, #72]	; (8008cf0 <_vfiprintf_r+0x22c>)
 8008ca6:	a904      	add	r1, sp, #16
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f3af 8000 	nop.w
 8008cae:	4607      	mov	r7, r0
 8008cb0:	1c78      	adds	r0, r7, #1
 8008cb2:	d1d6      	bne.n	8008c62 <_vfiprintf_r+0x19e>
 8008cb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cb6:	07d9      	lsls	r1, r3, #31
 8008cb8:	d405      	bmi.n	8008cc6 <_vfiprintf_r+0x202>
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	059a      	lsls	r2, r3, #22
 8008cbe:	d402      	bmi.n	8008cc6 <_vfiprintf_r+0x202>
 8008cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cc2:	f7ff fddb 	bl	800887c <__retarget_lock_release_recursive>
 8008cc6:	89ab      	ldrh	r3, [r5, #12]
 8008cc8:	065b      	lsls	r3, r3, #25
 8008cca:	f53f af1d 	bmi.w	8008b08 <_vfiprintf_r+0x44>
 8008cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd0:	e71c      	b.n	8008b0c <_vfiprintf_r+0x48>
 8008cd2:	ab03      	add	r3, sp, #12
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	462a      	mov	r2, r5
 8008cd8:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <_vfiprintf_r+0x22c>)
 8008cda:	a904      	add	r1, sp, #16
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f000 f879 	bl	8008dd4 <_printf_i>
 8008ce2:	e7e4      	b.n	8008cae <_vfiprintf_r+0x1ea>
 8008ce4:	080099c0 	.word	0x080099c0
 8008ce8:	080099ca 	.word	0x080099ca
 8008cec:	00000000 	.word	0x00000000
 8008cf0:	08008a9f 	.word	0x08008a9f
 8008cf4:	080099c6 	.word	0x080099c6

08008cf8 <_printf_common>:
 8008cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfc:	4616      	mov	r6, r2
 8008cfe:	4699      	mov	r9, r3
 8008d00:	688a      	ldr	r2, [r1, #8]
 8008d02:	690b      	ldr	r3, [r1, #16]
 8008d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	bfb8      	it	lt
 8008d0c:	4613      	movlt	r3, r2
 8008d0e:	6033      	str	r3, [r6, #0]
 8008d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d14:	4607      	mov	r7, r0
 8008d16:	460c      	mov	r4, r1
 8008d18:	b10a      	cbz	r2, 8008d1e <_printf_common+0x26>
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	6033      	str	r3, [r6, #0]
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	0699      	lsls	r1, r3, #26
 8008d22:	bf42      	ittt	mi
 8008d24:	6833      	ldrmi	r3, [r6, #0]
 8008d26:	3302      	addmi	r3, #2
 8008d28:	6033      	strmi	r3, [r6, #0]
 8008d2a:	6825      	ldr	r5, [r4, #0]
 8008d2c:	f015 0506 	ands.w	r5, r5, #6
 8008d30:	d106      	bne.n	8008d40 <_printf_common+0x48>
 8008d32:	f104 0a19 	add.w	sl, r4, #25
 8008d36:	68e3      	ldr	r3, [r4, #12]
 8008d38:	6832      	ldr	r2, [r6, #0]
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	42ab      	cmp	r3, r5
 8008d3e:	dc26      	bgt.n	8008d8e <_printf_common+0x96>
 8008d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d44:	1e13      	subs	r3, r2, #0
 8008d46:	6822      	ldr	r2, [r4, #0]
 8008d48:	bf18      	it	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	0692      	lsls	r2, r2, #26
 8008d4e:	d42b      	bmi.n	8008da8 <_printf_common+0xb0>
 8008d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d54:	4649      	mov	r1, r9
 8008d56:	4638      	mov	r0, r7
 8008d58:	47c0      	blx	r8
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	d01e      	beq.n	8008d9c <_printf_common+0xa4>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	6922      	ldr	r2, [r4, #16]
 8008d62:	f003 0306 	and.w	r3, r3, #6
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	bf02      	ittt	eq
 8008d6a:	68e5      	ldreq	r5, [r4, #12]
 8008d6c:	6833      	ldreq	r3, [r6, #0]
 8008d6e:	1aed      	subeq	r5, r5, r3
 8008d70:	68a3      	ldr	r3, [r4, #8]
 8008d72:	bf0c      	ite	eq
 8008d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d78:	2500      	movne	r5, #0
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	bfc4      	itt	gt
 8008d7e:	1a9b      	subgt	r3, r3, r2
 8008d80:	18ed      	addgt	r5, r5, r3
 8008d82:	2600      	movs	r6, #0
 8008d84:	341a      	adds	r4, #26
 8008d86:	42b5      	cmp	r5, r6
 8008d88:	d11a      	bne.n	8008dc0 <_printf_common+0xc8>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	e008      	b.n	8008da0 <_printf_common+0xa8>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4652      	mov	r2, sl
 8008d92:	4649      	mov	r1, r9
 8008d94:	4638      	mov	r0, r7
 8008d96:	47c0      	blx	r8
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d103      	bne.n	8008da4 <_printf_common+0xac>
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da4:	3501      	adds	r5, #1
 8008da6:	e7c6      	b.n	8008d36 <_printf_common+0x3e>
 8008da8:	18e1      	adds	r1, r4, r3
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	2030      	movs	r0, #48	; 0x30
 8008dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008db2:	4422      	add	r2, r4
 8008db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	e7c7      	b.n	8008d50 <_printf_common+0x58>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	47c0      	blx	r8
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d0e6      	beq.n	8008d9c <_printf_common+0xa4>
 8008dce:	3601      	adds	r6, #1
 8008dd0:	e7d9      	b.n	8008d86 <_printf_common+0x8e>
	...

08008dd4 <_printf_i>:
 8008dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	7e0f      	ldrb	r7, [r1, #24]
 8008dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ddc:	2f78      	cmp	r7, #120	; 0x78
 8008dde:	4691      	mov	r9, r2
 8008de0:	4680      	mov	r8, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	469a      	mov	sl, r3
 8008de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dea:	d807      	bhi.n	8008dfc <_printf_i+0x28>
 8008dec:	2f62      	cmp	r7, #98	; 0x62
 8008dee:	d80a      	bhi.n	8008e06 <_printf_i+0x32>
 8008df0:	2f00      	cmp	r7, #0
 8008df2:	f000 80d4 	beq.w	8008f9e <_printf_i+0x1ca>
 8008df6:	2f58      	cmp	r7, #88	; 0x58
 8008df8:	f000 80c0 	beq.w	8008f7c <_printf_i+0x1a8>
 8008dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e04:	e03a      	b.n	8008e7c <_printf_i+0xa8>
 8008e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e0a:	2b15      	cmp	r3, #21
 8008e0c:	d8f6      	bhi.n	8008dfc <_printf_i+0x28>
 8008e0e:	a101      	add	r1, pc, #4	; (adr r1, 8008e14 <_printf_i+0x40>)
 8008e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e14:	08008e6d 	.word	0x08008e6d
 8008e18:	08008e81 	.word	0x08008e81
 8008e1c:	08008dfd 	.word	0x08008dfd
 8008e20:	08008dfd 	.word	0x08008dfd
 8008e24:	08008dfd 	.word	0x08008dfd
 8008e28:	08008dfd 	.word	0x08008dfd
 8008e2c:	08008e81 	.word	0x08008e81
 8008e30:	08008dfd 	.word	0x08008dfd
 8008e34:	08008dfd 	.word	0x08008dfd
 8008e38:	08008dfd 	.word	0x08008dfd
 8008e3c:	08008dfd 	.word	0x08008dfd
 8008e40:	08008f85 	.word	0x08008f85
 8008e44:	08008ead 	.word	0x08008ead
 8008e48:	08008f3f 	.word	0x08008f3f
 8008e4c:	08008dfd 	.word	0x08008dfd
 8008e50:	08008dfd 	.word	0x08008dfd
 8008e54:	08008fa7 	.word	0x08008fa7
 8008e58:	08008dfd 	.word	0x08008dfd
 8008e5c:	08008ead 	.word	0x08008ead
 8008e60:	08008dfd 	.word	0x08008dfd
 8008e64:	08008dfd 	.word	0x08008dfd
 8008e68:	08008f47 	.word	0x08008f47
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	1d1a      	adds	r2, r3, #4
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	602a      	str	r2, [r5, #0]
 8008e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e09f      	b.n	8008fc0 <_printf_i+0x1ec>
 8008e80:	6820      	ldr	r0, [r4, #0]
 8008e82:	682b      	ldr	r3, [r5, #0]
 8008e84:	0607      	lsls	r7, r0, #24
 8008e86:	f103 0104 	add.w	r1, r3, #4
 8008e8a:	6029      	str	r1, [r5, #0]
 8008e8c:	d501      	bpl.n	8008e92 <_printf_i+0xbe>
 8008e8e:	681e      	ldr	r6, [r3, #0]
 8008e90:	e003      	b.n	8008e9a <_printf_i+0xc6>
 8008e92:	0646      	lsls	r6, r0, #25
 8008e94:	d5fb      	bpl.n	8008e8e <_printf_i+0xba>
 8008e96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e9a:	2e00      	cmp	r6, #0
 8008e9c:	da03      	bge.n	8008ea6 <_printf_i+0xd2>
 8008e9e:	232d      	movs	r3, #45	; 0x2d
 8008ea0:	4276      	negs	r6, r6
 8008ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ea6:	485a      	ldr	r0, [pc, #360]	; (8009010 <_printf_i+0x23c>)
 8008ea8:	230a      	movs	r3, #10
 8008eaa:	e012      	b.n	8008ed2 <_printf_i+0xfe>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	6820      	ldr	r0, [r4, #0]
 8008eb0:	1d19      	adds	r1, r3, #4
 8008eb2:	6029      	str	r1, [r5, #0]
 8008eb4:	0605      	lsls	r5, r0, #24
 8008eb6:	d501      	bpl.n	8008ebc <_printf_i+0xe8>
 8008eb8:	681e      	ldr	r6, [r3, #0]
 8008eba:	e002      	b.n	8008ec2 <_printf_i+0xee>
 8008ebc:	0641      	lsls	r1, r0, #25
 8008ebe:	d5fb      	bpl.n	8008eb8 <_printf_i+0xe4>
 8008ec0:	881e      	ldrh	r6, [r3, #0]
 8008ec2:	4853      	ldr	r0, [pc, #332]	; (8009010 <_printf_i+0x23c>)
 8008ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2308      	moveq	r3, #8
 8008eca:	230a      	movne	r3, #10
 8008ecc:	2100      	movs	r1, #0
 8008ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ed2:	6865      	ldr	r5, [r4, #4]
 8008ed4:	60a5      	str	r5, [r4, #8]
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	bfa2      	ittt	ge
 8008eda:	6821      	ldrge	r1, [r4, #0]
 8008edc:	f021 0104 	bicge.w	r1, r1, #4
 8008ee0:	6021      	strge	r1, [r4, #0]
 8008ee2:	b90e      	cbnz	r6, 8008ee8 <_printf_i+0x114>
 8008ee4:	2d00      	cmp	r5, #0
 8008ee6:	d04b      	beq.n	8008f80 <_printf_i+0x1ac>
 8008ee8:	4615      	mov	r5, r2
 8008eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eee:	fb03 6711 	mls	r7, r3, r1, r6
 8008ef2:	5dc7      	ldrb	r7, [r0, r7]
 8008ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ef8:	4637      	mov	r7, r6
 8008efa:	42bb      	cmp	r3, r7
 8008efc:	460e      	mov	r6, r1
 8008efe:	d9f4      	bls.n	8008eea <_printf_i+0x116>
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d10b      	bne.n	8008f1c <_printf_i+0x148>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	07de      	lsls	r6, r3, #31
 8008f08:	d508      	bpl.n	8008f1c <_printf_i+0x148>
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	6861      	ldr	r1, [r4, #4]
 8008f0e:	4299      	cmp	r1, r3
 8008f10:	bfde      	ittt	le
 8008f12:	2330      	movle	r3, #48	; 0x30
 8008f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f1c:	1b52      	subs	r2, r2, r5
 8008f1e:	6122      	str	r2, [r4, #16]
 8008f20:	f8cd a000 	str.w	sl, [sp]
 8008f24:	464b      	mov	r3, r9
 8008f26:	aa03      	add	r2, sp, #12
 8008f28:	4621      	mov	r1, r4
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	f7ff fee4 	bl	8008cf8 <_printf_common>
 8008f30:	3001      	adds	r0, #1
 8008f32:	d14a      	bne.n	8008fca <_printf_i+0x1f6>
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	b004      	add	sp, #16
 8008f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	f043 0320 	orr.w	r3, r3, #32
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	4833      	ldr	r0, [pc, #204]	; (8009014 <_printf_i+0x240>)
 8008f48:	2778      	movs	r7, #120	; 0x78
 8008f4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	6829      	ldr	r1, [r5, #0]
 8008f52:	061f      	lsls	r7, r3, #24
 8008f54:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f58:	d402      	bmi.n	8008f60 <_printf_i+0x18c>
 8008f5a:	065f      	lsls	r7, r3, #25
 8008f5c:	bf48      	it	mi
 8008f5e:	b2b6      	uxthmi	r6, r6
 8008f60:	07df      	lsls	r7, r3, #31
 8008f62:	bf48      	it	mi
 8008f64:	f043 0320 	orrmi.w	r3, r3, #32
 8008f68:	6029      	str	r1, [r5, #0]
 8008f6a:	bf48      	it	mi
 8008f6c:	6023      	strmi	r3, [r4, #0]
 8008f6e:	b91e      	cbnz	r6, 8008f78 <_printf_i+0x1a4>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	f023 0320 	bic.w	r3, r3, #32
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	2310      	movs	r3, #16
 8008f7a:	e7a7      	b.n	8008ecc <_printf_i+0xf8>
 8008f7c:	4824      	ldr	r0, [pc, #144]	; (8009010 <_printf_i+0x23c>)
 8008f7e:	e7e4      	b.n	8008f4a <_printf_i+0x176>
 8008f80:	4615      	mov	r5, r2
 8008f82:	e7bd      	b.n	8008f00 <_printf_i+0x12c>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	6826      	ldr	r6, [r4, #0]
 8008f88:	6961      	ldr	r1, [r4, #20]
 8008f8a:	1d18      	adds	r0, r3, #4
 8008f8c:	6028      	str	r0, [r5, #0]
 8008f8e:	0635      	lsls	r5, r6, #24
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	d501      	bpl.n	8008f98 <_printf_i+0x1c4>
 8008f94:	6019      	str	r1, [r3, #0]
 8008f96:	e002      	b.n	8008f9e <_printf_i+0x1ca>
 8008f98:	0670      	lsls	r0, r6, #25
 8008f9a:	d5fb      	bpl.n	8008f94 <_printf_i+0x1c0>
 8008f9c:	8019      	strh	r1, [r3, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6123      	str	r3, [r4, #16]
 8008fa2:	4615      	mov	r5, r2
 8008fa4:	e7bc      	b.n	8008f20 <_printf_i+0x14c>
 8008fa6:	682b      	ldr	r3, [r5, #0]
 8008fa8:	1d1a      	adds	r2, r3, #4
 8008faa:	602a      	str	r2, [r5, #0]
 8008fac:	681d      	ldr	r5, [r3, #0]
 8008fae:	6862      	ldr	r2, [r4, #4]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f7f7 f92c 	bl	8000210 <memchr>
 8008fb8:	b108      	cbz	r0, 8008fbe <_printf_i+0x1ea>
 8008fba:	1b40      	subs	r0, r0, r5
 8008fbc:	6060      	str	r0, [r4, #4]
 8008fbe:	6863      	ldr	r3, [r4, #4]
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc8:	e7aa      	b.n	8008f20 <_printf_i+0x14c>
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	462a      	mov	r2, r5
 8008fce:	4649      	mov	r1, r9
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	47d0      	blx	sl
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d0ad      	beq.n	8008f34 <_printf_i+0x160>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	079b      	lsls	r3, r3, #30
 8008fdc:	d413      	bmi.n	8009006 <_printf_i+0x232>
 8008fde:	68e0      	ldr	r0, [r4, #12]
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	4298      	cmp	r0, r3
 8008fe4:	bfb8      	it	lt
 8008fe6:	4618      	movlt	r0, r3
 8008fe8:	e7a6      	b.n	8008f38 <_printf_i+0x164>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4632      	mov	r2, r6
 8008fee:	4649      	mov	r1, r9
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	47d0      	blx	sl
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d09d      	beq.n	8008f34 <_printf_i+0x160>
 8008ff8:	3501      	adds	r5, #1
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	9903      	ldr	r1, [sp, #12]
 8008ffe:	1a5b      	subs	r3, r3, r1
 8009000:	42ab      	cmp	r3, r5
 8009002:	dcf2      	bgt.n	8008fea <_printf_i+0x216>
 8009004:	e7eb      	b.n	8008fde <_printf_i+0x20a>
 8009006:	2500      	movs	r5, #0
 8009008:	f104 0619 	add.w	r6, r4, #25
 800900c:	e7f5      	b.n	8008ffa <_printf_i+0x226>
 800900e:	bf00      	nop
 8009010:	080099d1 	.word	0x080099d1
 8009014:	080099e2 	.word	0x080099e2

08009018 <__sflush_r>:
 8009018:	898a      	ldrh	r2, [r1, #12]
 800901a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901e:	4605      	mov	r5, r0
 8009020:	0710      	lsls	r0, r2, #28
 8009022:	460c      	mov	r4, r1
 8009024:	d458      	bmi.n	80090d8 <__sflush_r+0xc0>
 8009026:	684b      	ldr	r3, [r1, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	dc05      	bgt.n	8009038 <__sflush_r+0x20>
 800902c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	dc02      	bgt.n	8009038 <__sflush_r+0x20>
 8009032:	2000      	movs	r0, #0
 8009034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800903a:	2e00      	cmp	r6, #0
 800903c:	d0f9      	beq.n	8009032 <__sflush_r+0x1a>
 800903e:	2300      	movs	r3, #0
 8009040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009044:	682f      	ldr	r7, [r5, #0]
 8009046:	6a21      	ldr	r1, [r4, #32]
 8009048:	602b      	str	r3, [r5, #0]
 800904a:	d032      	beq.n	80090b2 <__sflush_r+0x9a>
 800904c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	075a      	lsls	r2, r3, #29
 8009052:	d505      	bpl.n	8009060 <__sflush_r+0x48>
 8009054:	6863      	ldr	r3, [r4, #4]
 8009056:	1ac0      	subs	r0, r0, r3
 8009058:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800905a:	b10b      	cbz	r3, 8009060 <__sflush_r+0x48>
 800905c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800905e:	1ac0      	subs	r0, r0, r3
 8009060:	2300      	movs	r3, #0
 8009062:	4602      	mov	r2, r0
 8009064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009066:	6a21      	ldr	r1, [r4, #32]
 8009068:	4628      	mov	r0, r5
 800906a:	47b0      	blx	r6
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	d106      	bne.n	8009080 <__sflush_r+0x68>
 8009072:	6829      	ldr	r1, [r5, #0]
 8009074:	291d      	cmp	r1, #29
 8009076:	d82b      	bhi.n	80090d0 <__sflush_r+0xb8>
 8009078:	4a29      	ldr	r2, [pc, #164]	; (8009120 <__sflush_r+0x108>)
 800907a:	410a      	asrs	r2, r1
 800907c:	07d6      	lsls	r6, r2, #31
 800907e:	d427      	bmi.n	80090d0 <__sflush_r+0xb8>
 8009080:	2200      	movs	r2, #0
 8009082:	6062      	str	r2, [r4, #4]
 8009084:	04d9      	lsls	r1, r3, #19
 8009086:	6922      	ldr	r2, [r4, #16]
 8009088:	6022      	str	r2, [r4, #0]
 800908a:	d504      	bpl.n	8009096 <__sflush_r+0x7e>
 800908c:	1c42      	adds	r2, r0, #1
 800908e:	d101      	bne.n	8009094 <__sflush_r+0x7c>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	b903      	cbnz	r3, 8009096 <__sflush_r+0x7e>
 8009094:	6560      	str	r0, [r4, #84]	; 0x54
 8009096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009098:	602f      	str	r7, [r5, #0]
 800909a:	2900      	cmp	r1, #0
 800909c:	d0c9      	beq.n	8009032 <__sflush_r+0x1a>
 800909e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a2:	4299      	cmp	r1, r3
 80090a4:	d002      	beq.n	80090ac <__sflush_r+0x94>
 80090a6:	4628      	mov	r0, r5
 80090a8:	f7ff fbea 	bl	8008880 <_free_r>
 80090ac:	2000      	movs	r0, #0
 80090ae:	6360      	str	r0, [r4, #52]	; 0x34
 80090b0:	e7c0      	b.n	8009034 <__sflush_r+0x1c>
 80090b2:	2301      	movs	r3, #1
 80090b4:	4628      	mov	r0, r5
 80090b6:	47b0      	blx	r6
 80090b8:	1c41      	adds	r1, r0, #1
 80090ba:	d1c8      	bne.n	800904e <__sflush_r+0x36>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d0c5      	beq.n	800904e <__sflush_r+0x36>
 80090c2:	2b1d      	cmp	r3, #29
 80090c4:	d001      	beq.n	80090ca <__sflush_r+0xb2>
 80090c6:	2b16      	cmp	r3, #22
 80090c8:	d101      	bne.n	80090ce <__sflush_r+0xb6>
 80090ca:	602f      	str	r7, [r5, #0]
 80090cc:	e7b1      	b.n	8009032 <__sflush_r+0x1a>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d4:	81a3      	strh	r3, [r4, #12]
 80090d6:	e7ad      	b.n	8009034 <__sflush_r+0x1c>
 80090d8:	690f      	ldr	r7, [r1, #16]
 80090da:	2f00      	cmp	r7, #0
 80090dc:	d0a9      	beq.n	8009032 <__sflush_r+0x1a>
 80090de:	0793      	lsls	r3, r2, #30
 80090e0:	680e      	ldr	r6, [r1, #0]
 80090e2:	bf08      	it	eq
 80090e4:	694b      	ldreq	r3, [r1, #20]
 80090e6:	600f      	str	r7, [r1, #0]
 80090e8:	bf18      	it	ne
 80090ea:	2300      	movne	r3, #0
 80090ec:	eba6 0807 	sub.w	r8, r6, r7
 80090f0:	608b      	str	r3, [r1, #8]
 80090f2:	f1b8 0f00 	cmp.w	r8, #0
 80090f6:	dd9c      	ble.n	8009032 <__sflush_r+0x1a>
 80090f8:	6a21      	ldr	r1, [r4, #32]
 80090fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090fc:	4643      	mov	r3, r8
 80090fe:	463a      	mov	r2, r7
 8009100:	4628      	mov	r0, r5
 8009102:	47b0      	blx	r6
 8009104:	2800      	cmp	r0, #0
 8009106:	dc06      	bgt.n	8009116 <__sflush_r+0xfe>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	e78e      	b.n	8009034 <__sflush_r+0x1c>
 8009116:	4407      	add	r7, r0
 8009118:	eba8 0800 	sub.w	r8, r8, r0
 800911c:	e7e9      	b.n	80090f2 <__sflush_r+0xda>
 800911e:	bf00      	nop
 8009120:	dfbffffe 	.word	0xdfbffffe

08009124 <_fflush_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	4605      	mov	r5, r0
 800912a:	460c      	mov	r4, r1
 800912c:	b913      	cbnz	r3, 8009134 <_fflush_r+0x10>
 800912e:	2500      	movs	r5, #0
 8009130:	4628      	mov	r0, r5
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	b118      	cbz	r0, 800913e <_fflush_r+0x1a>
 8009136:	6a03      	ldr	r3, [r0, #32]
 8009138:	b90b      	cbnz	r3, 800913e <_fflush_r+0x1a>
 800913a:	f7ff f9a9 	bl	8008490 <__sinit>
 800913e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f3      	beq.n	800912e <_fflush_r+0xa>
 8009146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009148:	07d0      	lsls	r0, r2, #31
 800914a:	d404      	bmi.n	8009156 <_fflush_r+0x32>
 800914c:	0599      	lsls	r1, r3, #22
 800914e:	d402      	bmi.n	8009156 <_fflush_r+0x32>
 8009150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009152:	f7ff fb92 	bl	800887a <__retarget_lock_acquire_recursive>
 8009156:	4628      	mov	r0, r5
 8009158:	4621      	mov	r1, r4
 800915a:	f7ff ff5d 	bl	8009018 <__sflush_r>
 800915e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009160:	07da      	lsls	r2, r3, #31
 8009162:	4605      	mov	r5, r0
 8009164:	d4e4      	bmi.n	8009130 <_fflush_r+0xc>
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	059b      	lsls	r3, r3, #22
 800916a:	d4e1      	bmi.n	8009130 <_fflush_r+0xc>
 800916c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800916e:	f7ff fb85 	bl	800887c <__retarget_lock_release_recursive>
 8009172:	e7dd      	b.n	8009130 <_fflush_r+0xc>

08009174 <__swhatbuf_r>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	460c      	mov	r4, r1
 8009178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917c:	2900      	cmp	r1, #0
 800917e:	b096      	sub	sp, #88	; 0x58
 8009180:	4615      	mov	r5, r2
 8009182:	461e      	mov	r6, r3
 8009184:	da0d      	bge.n	80091a2 <__swhatbuf_r+0x2e>
 8009186:	89a3      	ldrh	r3, [r4, #12]
 8009188:	f013 0f80 	tst.w	r3, #128	; 0x80
 800918c:	f04f 0100 	mov.w	r1, #0
 8009190:	bf0c      	ite	eq
 8009192:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009196:	2340      	movne	r3, #64	; 0x40
 8009198:	2000      	movs	r0, #0
 800919a:	6031      	str	r1, [r6, #0]
 800919c:	602b      	str	r3, [r5, #0]
 800919e:	b016      	add	sp, #88	; 0x58
 80091a0:	bd70      	pop	{r4, r5, r6, pc}
 80091a2:	466a      	mov	r2, sp
 80091a4:	f000 f848 	bl	8009238 <_fstat_r>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	dbec      	blt.n	8009186 <__swhatbuf_r+0x12>
 80091ac:	9901      	ldr	r1, [sp, #4]
 80091ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80091b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80091b6:	4259      	negs	r1, r3
 80091b8:	4159      	adcs	r1, r3
 80091ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091be:	e7eb      	b.n	8009198 <__swhatbuf_r+0x24>

080091c0 <__smakebuf_r>:
 80091c0:	898b      	ldrh	r3, [r1, #12]
 80091c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091c4:	079d      	lsls	r5, r3, #30
 80091c6:	4606      	mov	r6, r0
 80091c8:	460c      	mov	r4, r1
 80091ca:	d507      	bpl.n	80091dc <__smakebuf_r+0x1c>
 80091cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	6123      	str	r3, [r4, #16]
 80091d4:	2301      	movs	r3, #1
 80091d6:	6163      	str	r3, [r4, #20]
 80091d8:	b002      	add	sp, #8
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	ab01      	add	r3, sp, #4
 80091de:	466a      	mov	r2, sp
 80091e0:	f7ff ffc8 	bl	8009174 <__swhatbuf_r>
 80091e4:	9900      	ldr	r1, [sp, #0]
 80091e6:	4605      	mov	r5, r0
 80091e8:	4630      	mov	r0, r6
 80091ea:	f7ff fbb5 	bl	8008958 <_malloc_r>
 80091ee:	b948      	cbnz	r0, 8009204 <__smakebuf_r+0x44>
 80091f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f4:	059a      	lsls	r2, r3, #22
 80091f6:	d4ef      	bmi.n	80091d8 <__smakebuf_r+0x18>
 80091f8:	f023 0303 	bic.w	r3, r3, #3
 80091fc:	f043 0302 	orr.w	r3, r3, #2
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	e7e3      	b.n	80091cc <__smakebuf_r+0xc>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	6020      	str	r0, [r4, #0]
 8009208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	9b00      	ldr	r3, [sp, #0]
 8009210:	6163      	str	r3, [r4, #20]
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	6120      	str	r0, [r4, #16]
 8009216:	b15b      	cbz	r3, 8009230 <__smakebuf_r+0x70>
 8009218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800921c:	4630      	mov	r0, r6
 800921e:	f000 f81d 	bl	800925c <_isatty_r>
 8009222:	b128      	cbz	r0, 8009230 <__smakebuf_r+0x70>
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	f043 0301 	orr.w	r3, r3, #1
 800922e:	81a3      	strh	r3, [r4, #12]
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	431d      	orrs	r5, r3
 8009234:	81a5      	strh	r5, [r4, #12]
 8009236:	e7cf      	b.n	80091d8 <__smakebuf_r+0x18>

08009238 <_fstat_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4d07      	ldr	r5, [pc, #28]	; (8009258 <_fstat_r+0x20>)
 800923c:	2300      	movs	r3, #0
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	602b      	str	r3, [r5, #0]
 8009246:	f7f8 fc06 	bl	8001a56 <_fstat>
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	d102      	bne.n	8009254 <_fstat_r+0x1c>
 800924e:	682b      	ldr	r3, [r5, #0]
 8009250:	b103      	cbz	r3, 8009254 <_fstat_r+0x1c>
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	bd38      	pop	{r3, r4, r5, pc}
 8009256:	bf00      	nop
 8009258:	200035d4 	.word	0x200035d4

0800925c <_isatty_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4d06      	ldr	r5, [pc, #24]	; (8009278 <_isatty_r+0x1c>)
 8009260:	2300      	movs	r3, #0
 8009262:	4604      	mov	r4, r0
 8009264:	4608      	mov	r0, r1
 8009266:	602b      	str	r3, [r5, #0]
 8009268:	f7f8 fc05 	bl	8001a76 <_isatty>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_isatty_r+0x1a>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	b103      	cbz	r3, 8009276 <_isatty_r+0x1a>
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	200035d4 	.word	0x200035d4

0800927c <_sbrk_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d06      	ldr	r5, [pc, #24]	; (8009298 <_sbrk_r+0x1c>)
 8009280:	2300      	movs	r3, #0
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	f7f8 fc0e 	bl	8001aa8 <_sbrk>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_sbrk_r+0x1a>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_sbrk_r+0x1a>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	200035d4 	.word	0x200035d4

0800929c <_init>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr

080092a8 <_fini>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr
