
mic_tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b8  080053b8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c0  080053c0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080053c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002598  2000007c  08005444  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002614  08005444  00022614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de64  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae8  00000000  00000000  0002df53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00030a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f1  00000000  00000000  00031778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242b6  00000000  00000000  00032169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000132d2  00000000  00000000  0005641f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccb92  00000000  00000000  000696f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c54  00000000  00000000  00136284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00139ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800510c 	.word	0x0800510c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	0800510c 	.word	0x0800510c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <sd_card_init>:
static uint32_t wav_file_size;
static uint8_t first_time = 0;



void sd_card_init(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	//	mounting an sd card
//	sd_result = f_mount(&sdCard,SDPath, 1);
	sd_result = f_mount(&sdCard, USERPath, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	490c      	ldr	r1, [pc, #48]	; (80005e4 <sd_card_init+0x38>)
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <sd_card_init+0x3c>)
 80005b6:	f003 fd75 	bl	80040a4 <f_mount>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <sd_card_init+0x40>)
 80005c0:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <sd_card_init+0x40>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d006      	beq.n	80005d8 <sd_card_init+0x2c>
	{
		printf("Error mounting SD Card: %d \n", sd_result);
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <sd_card_init+0x40>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <sd_card_init+0x44>)
 80005d2:	f003 fecb 	bl	800436c <iprintf>
		while(1);
 80005d6:	e7fe      	b.n	80005d6 <sd_card_init+0x2a>
	}
	else
	{
		printf("Succeeded mounting SD Card\n");
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <sd_card_init+0x48>)
 80005da:	f003 ff2d 	bl	8004438 <puts>
//	while(sd_result != 0){
//		f_mount(&sdCard, USERPath, 1);
//		printf("welp\n");
//	}
//	printf("Succeeded mounting SD Card\n");
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20002290 	.word	0x20002290
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	20000098 	.word	0x20000098
 80005f0:	08005124 	.word	0x08005124
 80005f4:	08005144 	.word	0x08005144

080005f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000604:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	2b00      	cmp	r3, #0
 800060e:	d013      	beq.n	8000638 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000610:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000614:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000618:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00b      	beq.n	8000638 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000620:	e000      	b.n	8000624 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000622:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000624:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800062e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fcba 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f81e 	bl	8000690 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000654:	f000 f888 	bl	8000768 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f976 	bl	8000948 <MX_GPIO_Init>
  MX_DMA_Init();
 800065c:	f000 f93e 	bl	80008dc <MX_DMA_Init>
  MX_I2S2_Init();
 8000660:	f000 f8d8 	bl	8000814 <MX_I2S2_Init>
  MX_SPI3_Init();
 8000664:	f000 f904 	bl	8000870 <MX_SPI3_Init>
  MX_FATFS_Init();
 8000668:	f003 f822 	bl	80036b0 <MX_FATFS_Init>
  MX_I2S1_Init();
 800066c:	f000 f8a4 	bl	80007b8 <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */
  	HAL_Delay(1000);
 8000670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000674:	f000 fd18 	bl	80010a8 <HAL_Delay>
//	HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*) data_i2s, sizeof(data_i2s) / 2);
//	process_SD_card();
//	process_SD_card_wav();
	printf("Hello\n");
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <main+0x44>)
 800067a:	f003 fedd 	bl	8004438 <puts>
//	HAL_I2S_DMAStop(&hi2s2);
	HAL_Delay(500);
 800067e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000682:	f000 fd11 	bl	80010a8 <HAL_Delay>
	sd_card_init();
 8000686:	f7ff ff91 	bl	80005ac <sd_card_init>
//	^^^^^
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800068a:	e7fe      	b.n	800068a <main+0x42>
 800068c:	08005218 	.word	0x08005218

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 ffaa 	bl	80045f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a28      	ldr	r2, [pc, #160]	; (8000760 <SystemClock_Config+0xd0>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <SystemClock_Config+0xd4>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <SystemClock_Config+0xd4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fca1 	bl	8003060 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 f9c8 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2105      	movs	r1, #5
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fc88 	bl	800205c <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000752:	f000 f9b1 	bl	8000ab8 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b098      	sub	sp, #96	; 0x60
 800076c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	225c      	movs	r2, #92	; 0x5c
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f003 ff3f 	bl	80045f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_I2S_APB2;
 800077a:	2303      	movs	r3, #3
 800077c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800077e:	2332      	movs	r3, #50	; 0x32
 8000780:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000786:	2308      	movs	r3, #8
 8000788:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000792:	2301      	movs	r3, #1
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8000796:	2300      	movs	r3, #0
 8000798:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800079a:	2300      	movs	r3, #0
 800079c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fd41 	bl	8002228 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80007ac:	f000 f984 	bl	8000ab8 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3760      	adds	r7, #96	; 0x60
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_I2S1_Init+0x54>)
 80007be:	4a14      	ldr	r2, [pc, #80]	; (8000810 <MX_I2S1_Init+0x58>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2S1_Init+0x54>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_I2S1_Init+0x54>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_32B;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_I2S1_Init+0x54>)
 80007d2:	2205      	movs	r2, #5
 80007d4:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_I2S1_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_I2S1_Init+0x54>)
 80007de:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007e2:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_I2S1_Init+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_I2S1_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_I2S1_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_I2S1_Init+0x54>)
 80007f8:	f001 fa3c 	bl	8001c74 <HAL_I2S_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 8000802:	f000 f959 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200010d8 	.word	0x200010d8
 8000810:	40013000 	.word	0x40013000

08000814 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_I2S2_Init+0x54>)
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <MX_I2S2_Init+0x58>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2S2_Init+0x54>)
 8000820:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000824:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_I2S2_Init+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2S2_Init+0x54>)
 800082e:	2201      	movs	r2, #1
 8000830:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_I2S2_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_I2S2_Init+0x54>)
 800083a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800083e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2S2_Init+0x54>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_I2S2_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_I2S2_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_I2S2_Init+0x54>)
 8000854:	f001 fa0e 	bl	8001c74 <HAL_I2S_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800085e:	f000 f92b 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20001120 	.word	0x20001120
 800086c:	40003800 	.word	0x40003800

08000870 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_SPI3_Init+0x64>)
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <MX_SPI3_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI3_Init+0x64>)
 800087c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000880:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI3_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_SPI3_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI3_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI3_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI3_Init+0x64>)
 800089c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008a4:	2238      	movs	r2, #56	; 0x38
 80008a6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008bc:	220a      	movs	r2, #10
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008c2:	f002 fe6b 	bl	800359c <HAL_SPI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008cc:	f000 f8f4 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20001228 	.word	0x20001228
 80008d8:	40003c00 	.word	0x40003c00

080008dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_DMA_Init+0x68>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a16      	ldr	r2, [pc, #88]	; (8000944 <MX_DMA_Init+0x68>)
 80008ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_DMA_Init+0x68>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_DMA_Init+0x68>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <MX_DMA_Init+0x68>)
 8000908:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <MX_DMA_Init+0x68>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	200e      	movs	r0, #14
 8000920:	f000 fcc1 	bl	80012a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000924:	200e      	movs	r0, #14
 8000926:	f000 fcda 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	203b      	movs	r0, #59	; 0x3b
 8000930:	f000 fcb9 	bl	80012a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000934:	203b      	movs	r0, #59	; 0x3b
 8000936:	f000 fcd2 	bl	80012de <HAL_NVIC_EnableIRQ>

}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_GPIO_Init+0xd8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a2e      	ldr	r2, [pc, #184]	; (8000a20 <MX_GPIO_Init+0xd8>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_GPIO_Init+0xd8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_GPIO_Init+0xd8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <MX_GPIO_Init+0xd8>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_GPIO_Init+0xd8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_GPIO_Init+0xd8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <MX_GPIO_Init+0xd8>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_GPIO_Init+0xd8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b8:	481a      	ldr	r0, [pc, #104]	; (8000a24 <MX_GPIO_Init+0xdc>)
 80009ba:	f001 f929 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Encoder_Button_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Encoder_Button_Pin;
 80009be:	f640 0301 	movw	r3, #2049	; 0x801
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <MX_GPIO_Init+0xdc>)
 80009d6:	f000 ff87 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_GPIO_Init+0xdc>)
 80009f4:	f000 ff78 	bl	80018e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2006      	movs	r0, #6
 80009fe:	f000 fc52 	bl	80012a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a02:	2006      	movs	r0, #6
 8000a04:	f000 fc6b 	bl	80012de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2028      	movs	r0, #40	; 0x28
 8000a0e:	f000 fc4a 	bl	80012a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a12:	2028      	movs	r0, #40	; 0x28
 8000a14:	f000 fc63 	bl	80012de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000

08000a28 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e009      	b.n	8000a4e <_write+0x26>
		ITM_SendChar(*ptr++);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	60ba      	str	r2, [r7, #8]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fdd8 	bl	80005f8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	dbf1      	blt.n	8000a3a <_write+0x12>
	}
	return len;
 8000a56:	687b      	ldr	r3, [r7, #4]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	sample_i2s = data_i2s[0];
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_I2S_RxCpltCallback+0x24>)
 8000a6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_I2S_RxCpltCallback+0x28>)
 8000a70:	801a      	strh	r2, [r3, #0]
	full_i2s = 1;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_I2S_RxCpltCallback+0x2c>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	20001280 	.word	0x20001280
 8000a88:	20002280 	.word	0x20002280
 8000a8c:	20002283 	.word	0x20002283

08000a90 <HAL_GPIO_EXTI_Callback>:
//	sample_i2s = data_i2s[0];
	half_i2s = 1;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d102      	bne.n	8000aa6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x24>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20002282 	.word	0x20002282

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a62      	ldr	r2, [pc, #392]	; (8000cbc <HAL_I2S_MspInit+0x1a8>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d15c      	bne.n	8000bf0 <HAL_I2S_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	4b61      	ldr	r3, [pc, #388]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a60      	ldr	r2, [pc, #384]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b5e      	ldr	r3, [pc, #376]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	4b5a      	ldr	r3, [pc, #360]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a59      	ldr	r2, [pc, #356]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b57      	ldr	r3, [pc, #348]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000b6e:	23b0      	movs	r3, #176	; 0xb0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	484e      	ldr	r0, [pc, #312]	; (8000cc4 <HAL_I2S_MspInit+0x1b0>)
 8000b8a:	f000 fead 	bl	80018e8 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000b8e:	4b4e      	ldr	r3, [pc, #312]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000b90:	4a4e      	ldr	r2, [pc, #312]	; (8000ccc <HAL_I2S_MspInit+0x1b8>)
 8000b92:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000b94:	4b4c      	ldr	r3, [pc, #304]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000b96:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b9a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b9c:	4b4a      	ldr	r3, [pc, #296]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000b9e:	2240      	movs	r2, #64	; 0x40
 8000ba0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba2:	4b49      	ldr	r3, [pc, #292]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ba8:	4b47      	ldr	r3, [pc, #284]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bb0:	4b45      	ldr	r3, [pc, #276]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bb8:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000bc0:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bcc:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000bd2:	483d      	ldr	r0, [pc, #244]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000bd4:	f000 fb9e 	bl	8001314 <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_I2S_MspInit+0xce>
    {
      Error_Handler();
 8000bde:	f7ff ff6b 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a38      	ldr	r2, [pc, #224]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
 8000be8:	4a37      	ldr	r2, [pc, #220]	; (8000cc8 <HAL_I2S_MspInit+0x1b4>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bee:	e061      	b.n	8000cb4 <HAL_I2S_MspInit+0x1a0>
  else if(hi2s->Instance==SPI2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a36      	ldr	r2, [pc, #216]	; (8000cd0 <HAL_I2S_MspInit+0x1bc>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d15c      	bne.n	8000cb4 <HAL_I2S_MspInit+0x1a0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a2f      	ldr	r2, [pc, #188]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a28      	ldr	r2, [pc, #160]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <HAL_I2S_MspInit+0x1ac>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000c32:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c44:	2305      	movs	r3, #5
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4821      	ldr	r0, [pc, #132]	; (8000cd4 <HAL_I2S_MspInit+0x1c0>)
 8000c50:	f000 fe4a 	bl	80018e8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c56:	4a21      	ldr	r2, [pc, #132]	; (8000cdc <HAL_I2S_MspInit+0x1c8>)
 8000c58:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c72:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c7a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c82:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000c98:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000c9a:	f000 fb3b 	bl	8001314 <HAL_DMA_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_I2S_MspInit+0x194>
      Error_Handler();
 8000ca4:	f7ff ff08 	bl	8000ab8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_I2S_MspInit+0x1c4>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000cb4:	bf00      	nop
 8000cb6:	3730      	adds	r7, #48	; 0x30
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40013000 	.word	0x40013000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	20001168 	.word	0x20001168
 8000ccc:	40026458 	.word	0x40026458
 8000cd0:	40003800 	.word	0x40003800
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	200011c8 	.word	0x200011c8
 8000cdc:	40026058 	.word	0x40026058

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_SPI_MspInit+0x84>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12c      	bne.n	8000d5c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d4c:	2306      	movs	r3, #6
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_SPI_MspInit+0x8c>)
 8000d58:	f000 fdc6 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40003c00 	.word	0x40003c00
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020800 	.word	0x40020800

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <SysTick_Handler+0x34>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d005      	beq.n	8000dd0 <SysTick_Handler+0x18>
	  Timer1--;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <SysTick_Handler+0x34>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <SysTick_Handler+0x34>)
 8000dce:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <SysTick_Handler+0x38>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d005      	beq.n	8000de4 <SysTick_Handler+0x2c>
	  Timer2--;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Handler+0x38>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <SysTick_Handler+0x38>)
 8000de2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f940 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200010d4 	.word	0x200010d4
 8000df0:	200010d6 	.word	0x200010d6

08000df4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 ff23 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <DMA1_Stream3_IRQHandler+0x10>)
 8000e0a:	f000 fb31 	bl	8001470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200011c8 	.word	0x200011c8

08000e18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Button_Pin);
 8000e1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e20:	f000 ff10 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <DMA2_Stream3_IRQHandler+0x10>)
 8000e2e:	f000 fb1f 	bl	8001470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20001168 	.word	0x20001168

08000e3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e00a      	b.n	8000e64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e4e:	f3af 8000 	nop.w
 8000e52:	4601      	mov	r1, r0
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	60ba      	str	r2, [r7, #8]
 8000e5a:	b2ca      	uxtb	r2, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf0      	blt.n	8000e4e <_read+0x12>
  }

  return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_isatty>:

int _isatty(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f003 fbc0 	bl	8004694 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20020000 	.word	0x20020000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20002284 	.word	0x20002284
 8000f48:	20002618 	.word	0x20002618

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f76:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f8c:	4c0b      	ldr	r4, [pc, #44]	; (8000fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9a:	f7ff ffd7 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f003 fb7f 	bl	80046a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fb51 	bl	8000648 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fb4:	080053c8 	.word	0x080053c8
  ldr r2, =_sbss
 8000fb8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fbc:	20002614 	.word	0x20002614

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f94f 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fd64 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f967 	bl	80012fa <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f92f 	bl	80012a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000008 	.word	0x20000008
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	20002288 	.word	0x20002288

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20002288 	.word	0x20002288

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffde 	bl	8001090 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <__NVIC_SetPriorityGrouping>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <SysTick_Config>:
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800125c:	d301      	bcc.n	8001262 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <SysTick_Config+0x40>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126a:	210f      	movs	r1, #15
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f7ff ff8e 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <SysTick_Config+0x40>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <SysTick_Config+0x40>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff29 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b8:	f7ff ff3e 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80012bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff ff8e 	bl	80011e4 <NVIC_EncodePriority>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff5d 	bl	8001190 <__NVIC_SetPriority>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff31 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffa2 	bl	800124c <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff feb6 	bl	8001090 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e099      	b.n	8001464 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001350:	e00f      	b.n	8001372 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001352:	f7ff fe9d 	bl	8001090 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b05      	cmp	r3, #5
 800135e:	d908      	bls.n	8001372 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2220      	movs	r2, #32
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e078      	b.n	8001464 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e8      	bne.n	8001352 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_DMA_Init+0x158>)
 800138c:	4013      	ands	r3, r2
 800138e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800139e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d107      	bne.n	80013dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4313      	orrs	r3, r2
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f023 0307 	bic.w	r3, r3, #7
 80013f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	2b04      	cmp	r3, #4
 8001404:	d117      	bne.n	8001436 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4313      	orrs	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00e      	beq.n	8001436 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f9e9 	bl	80017f0 <DMA_CheckFifoParam>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d008      	beq.n	8001436 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2240      	movs	r2, #64	; 0x40
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001432:	2301      	movs	r3, #1
 8001434:	e016      	b.n	8001464 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f9a0 	bl	8001784 <DMA_CalcBaseAndBitshift>
 8001444:	4603      	mov	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	223f      	movs	r2, #63	; 0x3f
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	f010803f 	.word	0xf010803f

08001470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800147c:	4b8e      	ldr	r3, [pc, #568]	; (80016b8 <HAL_DMA_IRQHandler+0x248>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a8e      	ldr	r2, [pc, #568]	; (80016bc <HAL_DMA_IRQHandler+0x24c>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0a9b      	lsrs	r3, r3, #10
 8001488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149a:	2208      	movs	r2, #8
 800149c:	409a      	lsls	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d01a      	beq.n	80014dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0204 	bic.w	r2, r2, #4
 80014c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	2208      	movs	r2, #8
 80014ca:	409a      	lsls	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	2201      	movs	r2, #1
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d012      	beq.n	8001512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	2201      	movs	r2, #1
 8001500:	409a      	lsls	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	f043 0202 	orr.w	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2204      	movs	r2, #4
 8001518:	409a      	lsls	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d012      	beq.n	8001548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001534:	2204      	movs	r2, #4
 8001536:	409a      	lsls	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001540:	f043 0204 	orr.w	r2, r3, #4
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	2210      	movs	r2, #16
 800154e:	409a      	lsls	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d043      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d03c      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	2210      	movs	r2, #16
 800156c:	409a      	lsls	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d018      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d108      	bne.n	80015a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d024      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
 800159e:	e01f      	b.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01b      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
 80015b0:	e016      	b.n	80015e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d107      	bne.n	80015d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0208 	bic.w	r2, r2, #8
 80015ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	2220      	movs	r2, #32
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 808f 	beq.w	8001710 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8087 	beq.w	8001710 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	2220      	movs	r2, #32
 8001608:	409a      	lsls	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b05      	cmp	r3, #5
 8001618:	d136      	bne.n	8001688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0216 	bic.w	r2, r2, #22
 8001628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d103      	bne.n	800164a <HAL_DMA_IRQHandler+0x1da>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0208 	bic.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	223f      	movs	r2, #63	; 0x3f
 8001660:	409a      	lsls	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167a:	2b00      	cmp	r3, #0
 800167c:	d07e      	beq.n	800177c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
        }
        return;
 8001686:	e079      	b.n	800177c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01d      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10d      	bne.n	80016c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d031      	beq.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
 80016b4:	e02c      	b.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000
 80016bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
 80016d0:	e01e      	b.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10f      	bne.n	8001700 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0210 	bic.w	r2, r2, #16
 80016ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	2b00      	cmp	r3, #0
 8001716:	d032      	beq.n	800177e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d022      	beq.n	800176a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2205      	movs	r2, #5
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	3301      	adds	r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	429a      	cmp	r2, r3
 8001746:	d307      	bcc.n	8001758 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f2      	bne.n	800173c <HAL_DMA_IRQHandler+0x2cc>
 8001756:	e000      	b.n	800175a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001758:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
 800177a:	e000      	b.n	800177e <HAL_DMA_IRQHandler+0x30e>
        return;
 800177c:	bf00      	nop
    }
  }
}
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	3b10      	subs	r3, #16
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <DMA_CalcBaseAndBitshift+0x64>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <DMA_CalcBaseAndBitshift+0x68>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d909      	bls.n	80017c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ba:	f023 0303 	bic.w	r3, r3, #3
 80017be:	1d1a      	adds	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	659a      	str	r2, [r3, #88]	; 0x58
 80017c4:	e007      	b.n	80017d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ce:	f023 0303 	bic.w	r3, r3, #3
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	aaaaaaab 	.word	0xaaaaaaab
 80017ec:	0800537c 	.word	0x0800537c

080017f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d11f      	bne.n	800184a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d856      	bhi.n	80018be <DMA_CheckFifoParam+0xce>
 8001810:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <DMA_CheckFifoParam+0x28>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	08001829 	.word	0x08001829
 800181c:	0800183b 	.word	0x0800183b
 8001820:	08001829 	.word	0x08001829
 8001824:	080018bf 	.word	0x080018bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d046      	beq.n	80018c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001838:	e043      	b.n	80018c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001842:	d140      	bne.n	80018c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001848:	e03d      	b.n	80018c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001852:	d121      	bne.n	8001898 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d837      	bhi.n	80018ca <DMA_CheckFifoParam+0xda>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <DMA_CheckFifoParam+0x70>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001871 	.word	0x08001871
 8001864:	08001877 	.word	0x08001877
 8001868:	08001871 	.word	0x08001871
 800186c:	08001889 	.word	0x08001889
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
      break;
 8001874:	e030      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d025      	beq.n	80018ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001886:	e022      	b.n	80018ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001890:	d11f      	bne.n	80018d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001896:	e01c      	b.n	80018d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d903      	bls.n	80018a6 <DMA_CheckFifoParam+0xb6>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d003      	beq.n	80018ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018a4:	e018      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
      break;
 80018aa:	e015      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00e      	beq.n	80018d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
      break;
 80018bc:	e00b      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      break;
 80018be:	bf00      	nop
 80018c0:	e00a      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018c2:	bf00      	nop
 80018c4:	e008      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018c6:	bf00      	nop
 80018c8:	e006      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ca:	bf00      	nop
 80018cc:	e004      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ce:	bf00      	nop
 80018d0:	e002      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018d2:	bf00      	nop
 80018d4:	e000      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d6:	bf00      	nop
    }
  } 
  
  return status; 
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e165      	b.n	8001bd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8154 	bne.w	8001bca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d005      	beq.n	800193a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001936:	2b02      	cmp	r3, #2
 8001938:	d130      	bne.n	800199c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0201 	and.w	r2, r3, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d017      	beq.n	80019d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d123      	bne.n	8001a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80ae 	beq.w	8001bca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a5c      	ldr	r2, [pc, #368]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b5a      	ldr	r3, [pc, #360]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8a:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4f      	ldr	r2, [pc, #316]	; (8001bf0 <HAL_GPIO_Init+0x308>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d025      	beq.n	8001b02 <HAL_GPIO_Init+0x21a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4e      	ldr	r2, [pc, #312]	; (8001bf4 <HAL_GPIO_Init+0x30c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d01f      	beq.n	8001afe <HAL_GPIO_Init+0x216>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_GPIO_Init+0x310>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d019      	beq.n	8001afa <HAL_GPIO_Init+0x212>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_GPIO_Init+0x314>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0x20e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4b      	ldr	r2, [pc, #300]	; (8001c00 <HAL_GPIO_Init+0x318>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00d      	beq.n	8001af2 <HAL_GPIO_Init+0x20a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4a      	ldr	r2, [pc, #296]	; (8001c04 <HAL_GPIO_Init+0x31c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d007      	beq.n	8001aee <HAL_GPIO_Init+0x206>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a49      	ldr	r2, [pc, #292]	; (8001c08 <HAL_GPIO_Init+0x320>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_GPIO_Init+0x202>
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	e00c      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001aea:	2307      	movs	r3, #7
 8001aec:	e00a      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001b02:	2300      	movs	r3, #0
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b14:	4935      	ldr	r1, [pc, #212]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b22:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b46:	4a31      	ldr	r2, [pc, #196]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc4:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f67f ae96 	bls.w	8001904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40021400 	.word	0x40021400
 8001c08:	40021800 	.word	0x40021800
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	619a      	str	r2, [r3, #24]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe ff14 	bl	8000a90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40013c00 	.word	0x40013c00

08001c74 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0e1      	b.n	8001e4a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a6d      	ldr	r2, [pc, #436]	; (8001e54 <HAL_I2S_Init+0x1e0>)
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7fe ff37 	bl	8000b14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cbc:	f023 030f 	bic.w	r3, r3, #15
 8001cc0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d06f      	beq.n	8001db2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d102      	bne.n	8001ce0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001cda:	2310      	movs	r3, #16
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e001      	b.n	8001ce4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d802      	bhi.n	8001cf2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <HAL_I2S_Init+0x1e4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d004      	beq.n	8001d06 <HAL_I2S_Init+0x92>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a56      	ldr	r2, [pc, #344]	; (8001e5c <HAL_I2S_Init+0x1e8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d104      	bne.n	8001d10 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f000 fdb8 	bl	800287c <HAL_RCCEx_GetPeriphCLKFreq>
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	e003      	b.n	8001d18 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001d10:	2002      	movs	r0, #2
 8001d12:	f000 fdb3 	bl	800287c <HAL_RCCEx_GetPeriphCLKFreq>
 8001d16:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d20:	d125      	bne.n	8001d6e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d010      	beq.n	8001d4c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	3305      	adds	r3, #5
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	e01f      	b.n	8001d8c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	461a      	mov	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	3305      	adds	r3, #5
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	e00e      	b.n	8001d8c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	461a      	mov	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	3305      	adds	r3, #5
 8001d8a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4a34      	ldr	r2, [pc, #208]	; (8001e60 <HAL_I2S_Init+0x1ec>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	e003      	b.n	8001dba <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d902      	bls.n	8001dc6 <HAL_I2S_Init+0x152>
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2bff      	cmp	r3, #255	; 0xff
 8001dc4:	d907      	bls.n	8001dd6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f043 0210 	orr.w	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e039      	b.n	8001e4a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	ea42 0103 	orr.w	r1, r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001df4:	f023 030f 	bic.w	r3, r3, #15
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6851      	ldr	r1, [r2, #4]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6892      	ldr	r2, [r2, #8]
 8001e00:	4311      	orrs	r1, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68d2      	ldr	r2, [r2, #12]
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6992      	ldr	r2, [r2, #24]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e18:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b30      	cmp	r3, #48	; 0x30
 8001e20:	d003      	beq.n	8001e2a <HAL_I2S_Init+0x1b6>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2bb0      	cmp	r3, #176	; 0xb0
 8001e28:	d107      	bne.n	8001e3a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69da      	ldr	r2, [r3, #28]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e38:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	08001f47 	.word	0x08001f47
 8001e58:	40003800 	.word	0x40003800
 8001e5c:	40003c00 	.word	0x40003c00
 8001e60:	cccccccd 	.word	0xcccccccd

08001e64 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	1c9a      	adds	r2, r3, #2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10e      	bne.n	8001ee0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ed0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffc2 	bl	8001e64 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	b292      	uxth	r2, r2
 8001efc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	1c9a      	adds	r2, r3, #2
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10e      	bne.n	8001f3e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7fe fd91 	bl	8000a60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d13a      	bne.n	8001fd8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d109      	bne.n	8001f80 <I2S_IRQHandler+0x3a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	2b40      	cmp	r3, #64	; 0x40
 8001f78:	d102      	bne.n	8001f80 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffb4 	bl	8001ee8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f86:	2b40      	cmp	r3, #64	; 0x40
 8001f88:	d126      	bne.n	8001fd8 <I2S_IRQHandler+0x92>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d11f      	bne.n	8001fd8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fa6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f043 0202 	orr.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff50 	bl	8001e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d136      	bne.n	8002052 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d109      	bne.n	8002002 <I2S_IRQHandler+0xbc>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d102      	bne.n	8002002 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff45 	bl	8001e8c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b08      	cmp	r3, #8
 800200a:	d122      	bne.n	8002052 <I2S_IRQHandler+0x10c>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b20      	cmp	r3, #32
 8002018:	d11b      	bne.n	8002052 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002028:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	f043 0204 	orr.w	r2, r3, #4
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff13 	bl	8001e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0cc      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b68      	ldr	r3, [pc, #416]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d90c      	bls.n	8002098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b65      	ldr	r3, [pc, #404]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b63      	ldr	r3, [pc, #396]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0b8      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d020      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a58      	ldr	r2, [pc, #352]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d4:	4b50      	ldr	r3, [pc, #320]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	494d      	ldr	r1, [pc, #308]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d044      	beq.n	800217c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b47      	ldr	r3, [pc, #284]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d119      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e07f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d003      	beq.n	800211a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002116:	2b03      	cmp	r3, #3
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e06f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e067      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4934      	ldr	r1, [pc, #208]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800214c:	f7fe ffa0 	bl	8001090 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe ff9c 	bl	8001090 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e04f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d20c      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e032      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4916      	ldr	r1, [pc, #88]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	490e      	ldr	r1, [pc, #56]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021e2:	f000 fd93 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	490a      	ldr	r1, [pc, #40]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	5ccb      	ldrb	r3, [r1, r3]
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe ff00 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00
 8002218:	40023800 	.word	0x40023800
 800221c:	0800536c 	.word	0x0800536c
 8002220:	20000000 	.word	0x20000000
 8002224:	20000004 	.word	0x20000004

08002228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d010      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002260:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002266:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	496c      	ldr	r1, [pc, #432]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800227e:	2301      	movs	r3, #1
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800228e:	4b64      	ldr	r3, [pc, #400]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002294:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	4960      	ldr	r1, [pc, #384]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80022ac:	2301      	movs	r3, #1
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d017      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022bc:	4b58      	ldr	r3, [pc, #352]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4955      	ldr	r1, [pc, #340]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022da:	d101      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80022dc:	2301      	movs	r3, #1
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80022e8:	2301      	movs	r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d017      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022f8:	4b49      	ldr	r3, [pc, #292]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	4946      	ldr	r1, [pc, #280]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002316:	d101      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002318:	2301      	movs	r3, #1
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002324:	2301      	movs	r3, #1
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 808a 	beq.w	800244a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a38      	ldr	r2, [pc, #224]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002352:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a33      	ldr	r2, [pc, #204]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800235e:	f7fe fe97 	bl	8001090 <HAL_GetTick>
 8002362:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7fe fe93 	bl	8001090 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e278      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800238c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d02f      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d028      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023aa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d114      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe fe61 	bl	8001090 <HAL_GetTick>
 80023ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7fe fe5d 	bl	8001090 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e240      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ee      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002400:	d114      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002416:	4902      	ldr	r1, [pc, #8]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
 800241c:	e00c      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40007000 	.word	0x40007000
 8002428:	42470e40 	.word	0x42470e40
 800242c:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a49      	ldr	r2, [pc, #292]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002432:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002436:	6093      	str	r3, [r2, #8]
 8002438:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800243a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	4944      	ldr	r1, [pc, #272]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002446:	4313      	orrs	r3, r2
 8002448:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800245c:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800245e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800246c:	4b3a      	ldr	r3, [pc, #232]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002472:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	4937      	ldr	r1, [pc, #220]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800248e:	4b32      	ldr	r3, [pc, #200]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002494:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249c:	492e      	ldr	r1, [pc, #184]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d011      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024b0:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	4926      	ldr	r1, [pc, #152]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ce:	d101      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	491a      	ldr	r1, [pc, #104]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d011      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002508:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002510:	4911      	ldr	r1, [pc, #68]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002520:	d101      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002522:	2301      	movs	r3, #1
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d005      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002534:	f040 80ff 	bne.w	8002736 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800253e:	f7fe fda7 	bl	8001090 <HAL_GetTick>
 8002542:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002544:	e00e      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002546:	f7fe fda3 	bl	8001090 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d907      	bls.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e188      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002558:	40023800 	.word	0x40023800
 800255c:	424711e0 	.word	0x424711e0
 8002560:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002564:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ea      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	2b00      	cmp	r3, #0
 8002582:	d009      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800258c:	2b00      	cmp	r3, #0
 800258e:	d028      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d124      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002598:	4b71      	ldr	r3, [pc, #452]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800259a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	3301      	adds	r3, #1
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025aa:	4b6d      	ldr	r3, [pc, #436]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b0:	0e1b      	lsrs	r3, r3, #24
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	431a      	orrs	r2, r3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	3b01      	subs	r3, #1
 80025ca:	041b      	lsls	r3, r3, #16
 80025cc:	431a      	orrs	r2, r3
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	071b      	lsls	r3, r3, #28
 80025da:	4961      	ldr	r1, [pc, #388]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002600:	2b00      	cmp	r3, #0
 8002602:	d035      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260c:	d130      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800260e:	4b54      	ldr	r3, [pc, #336]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	3301      	adds	r3, #1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002620:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002626:	0f1b      	lsrs	r3, r3, #28
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	019b      	lsls	r3, r3, #6
 8002638:	431a      	orrs	r2, r3
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	085b      	lsrs	r3, r3, #1
 800263e:	3b01      	subs	r3, #1
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	431a      	orrs	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	071b      	lsls	r3, r3, #28
 8002650:	4943      	ldr	r1, [pc, #268]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002658:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800265a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800265e:	f023 021f 	bic.w	r2, r3, #31
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	3b01      	subs	r3, #1
 8002668:	493d      	ldr	r1, [pc, #244]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d029      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002684:	d124      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	3301      	adds	r3, #1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002698:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800269a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800269e:	0f1b      	lsrs	r3, r3, #28
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	019b      	lsls	r3, r3, #6
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	3b01      	subs	r3, #1
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	431a      	orrs	r2, r3
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	061b      	lsls	r3, r3, #24
 80026c2:	431a      	orrs	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	071b      	lsls	r3, r3, #28
 80026c8:	4925      	ldr	r1, [pc, #148]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d016      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	019b      	lsls	r3, r3, #6
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	3b01      	subs	r3, #1
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	071b      	lsls	r3, r3, #28
 8002702:	4917      	ldr	r1, [pc, #92]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002710:	f7fe fcbe 	bl	8001090 <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002718:	f7fe fcba 	bl	8001090 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e09f      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	2b01      	cmp	r3, #1
 800273a:	f040 8095 	bne.w	8002868 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002744:	f7fe fca4 	bl	8001090 <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800274a:	e00f      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800274c:	f7fe fca0 	bl	8001090 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d908      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e085      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	42470068 	.word	0x42470068
 8002768:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800276c:	4b41      	ldr	r3, [pc, #260]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002778:	d0e8      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002796:	2b00      	cmp	r3, #0
 8002798:	d02b      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d127      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80027a2:	4b34      	ldr	r3, [pc, #208]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	0c1b      	lsrs	r3, r3, #16
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	3301      	adds	r3, #1
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	431a      	orrs	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	3b01      	subs	r3, #1
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	061b      	lsls	r3, r3, #24
 80027d0:	4928      	ldr	r1, [pc, #160]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027d8:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027de:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	3b01      	subs	r3, #1
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	4922      	ldr	r1, [pc, #136]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01d      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002806:	d118      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	0e1b      	lsrs	r3, r3, #24
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	019b      	lsls	r3, r3, #6
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	3b01      	subs	r3, #1
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	431a      	orrs	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	4910      	ldr	r1, [pc, #64]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002840:	f7fe fc26 	bl	8001090 <HAL_GetTick>
 8002844:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002848:	f7fe fc22 	bl	8001090 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e007      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002866:	d1ef      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3730      	adds	r7, #48	; 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	42470070 	.word	0x42470070

0800287c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	2b07      	cmp	r3, #7
 80028a2:	f200 8224 	bhi.w	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80028a6:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	08002aaf 	.word	0x08002aaf
 80028b0:	08002bd9 	.word	0x08002bd9
 80028b4:	08002cef 	.word	0x08002cef
 80028b8:	080028cd 	.word	0x080028cd
 80028bc:	08002cef 	.word	0x08002cef
 80028c0:	08002cef 	.word	0x08002cef
 80028c4:	08002cef 	.word	0x08002cef
 80028c8:	080028cd 	.word	0x080028cd
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80028cc:	4ba8      	ldr	r3, [pc, #672]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028e2:	f000 80d6 	beq.w	8002a92 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028ec:	f200 80dd 	bhi.w	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028f6:	f000 809f 	beq.w	8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002900:	f200 80d3 	bhi.w	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290a:	d05b      	beq.n	80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002912:	f200 80ca 	bhi.w	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800291c:	f000 80b6 	beq.w	8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002926:	f200 80c0 	bhi.w	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002930:	f000 8082 	beq.w	8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800293a:	f200 80b6 	bhi.w	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800294a:	d03b      	beq.n	80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800294c:	e0ad      	b.n	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800294e:	4b88      	ldr	r3, [pc, #544]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800295a:	4b85      	ldr	r3, [pc, #532]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002964:	4a83      	ldr	r2, [pc, #524]	; (8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	e008      	b.n	8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800296e:	4b80      	ldr	r3, [pc, #512]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002978:	4a7f      	ldr	r2, [pc, #508]	; (8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8002980:	4b7b      	ldr	r3, [pc, #492]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	0e1b      	lsrs	r3, r3, #24
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800298e:	4b78      	ldr	r3, [pc, #480]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	fb03 f202 	mul.w	r2, r3, r2
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80029a8:	4b71      	ldr	r3, [pc, #452]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	3301      	adds	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	61fb      	str	r3, [r7, #28]
          break;
 80029c2:	e073      	b.n	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80029c4:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80029d0:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029da:	4a66      	ldr	r2, [pc, #408]	; (8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e008      	b.n	80029f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80029e4:	4b62      	ldr	r3, [pc, #392]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ee:	4a62      	ldr	r2, [pc, #392]	; (8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80029f6:	4b5e      	ldr	r3, [pc, #376]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fc:	0e1b      	lsrs	r3, r3, #24
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8002a04:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a0a:	099b      	lsrs	r3, r3, #6
 8002a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	fb03 f202 	mul.w	r2, r3, r2
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8002a1e:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	61fb      	str	r3, [r7, #28]
          break;
 8002a36:	e039      	b.n	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002a38:	4b4d      	ldr	r3, [pc, #308]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d108      	bne.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a44:	4b4a      	ldr	r3, [pc, #296]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a4c:	4a49      	ldr	r2, [pc, #292]	; (8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	61bb      	str	r3, [r7, #24]
 8002a54:	e007      	b.n	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002a56:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a5e:	4a46      	ldr	r2, [pc, #280]	; (8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8002a66:	4b42      	ldr	r3, [pc, #264]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0f1b      	lsrs	r3, r3, #28
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8002a72:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	fb03 f202 	mul.w	r2, r3, r2
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	61fb      	str	r3, [r7, #28]
          break;
 8002a8a:	e00f      	b.n	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002a8c:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002a8e:	61fb      	str	r3, [r7, #28]
          break;
 8002a90:	e00c      	b.n	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002a92:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8002a9e:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002aa0:	61fb      	str	r3, [r7, #28]
          break;
 8002aa2:	e003      	b.n	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8002aa4:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002aa6:	61fb      	str	r3, [r7, #28]
          break;
 8002aa8:	e000      	b.n	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8002aaa:	bf00      	nop
        }
      }
      break;
 8002aac:	e11f      	b.n	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8002aae:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002ac0:	d079      	beq.n	8002bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002ac8:	f200 8082 	bhi.w	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad2:	d03c      	beq.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ada:	d879      	bhi.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ae8:	d172      	bne.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002aec:	61fb      	str	r3, [r7, #28]
          break;
 8002aee:	e072      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afc:	d109      	bne.n	8002b12 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002afe:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	e008      	b.n	8002b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b1c:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3e:	0f1b      	lsrs	r3, r3, #28
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	61fb      	str	r3, [r7, #28]
          break;
 8002b4c:	e043      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b5a:	d111      	bne.n	8002b80 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	e010      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	017d7840 	.word	0x017d7840
 8002b7c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b80:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b88:	4a5d      	ldr	r2, [pc, #372]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002b90:	4b5a      	ldr	r3, [pc, #360]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	099b      	lsrs	r3, r3, #6
 8002b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002ba2:	4b56      	ldr	r3, [pc, #344]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0f1b      	lsrs	r3, r3, #28
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	61fb      	str	r3, [r7, #28]
          break;
 8002bb4:	e00f      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002bb6:	4b51      	ldr	r3, [pc, #324]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc2:	d102      	bne.n	8002bca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8002bc4:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002bc6:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002bc8:	e005      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8002bca:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002bcc:	61fb      	str	r3, [r7, #28]
          break;
 8002bce:	e002      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
          break;
 8002bd4:	bf00      	nop
        }
      }
      break;
 8002bd6:	e08a      	b.n	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8002bd8:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bde:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002bea:	d06f      	beq.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002bf2:	d878      	bhi.n	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bfa:	d03c      	beq.n	8002c76 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c02:	d870      	bhi.n	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c10:	d169      	bne.n	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002c12:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8002c14:	61fb      	str	r3, [r7, #28]
          break;
 8002c16:	e069      	b.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c18:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c24:	d109      	bne.n	8002c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c26:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c30:	4a34      	ldr	r2, [pc, #208]	; (8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e008      	b.n	8002c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c44:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002c60:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c66:	0f1b      	lsrs	r3, r3, #28
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	61fb      	str	r3, [r7, #28]
          break;
 8002c74:	e03a      	b.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c76:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c82:	d108      	bne.n	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c8c:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	e007      	b.n	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	099b      	lsrs	r3, r3, #6
 8002cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002cb8:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	0f1b      	lsrs	r3, r3, #28
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	61fb      	str	r3, [r7, #28]
          break;
 8002cca:	e00f      	b.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd8:	d102      	bne.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002cdc:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002cde:	e005      	b.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002ce2:	61fb      	str	r3, [r7, #28]
          break;
 8002ce4:	e002      	b.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
          break;
 8002cea:	bf00      	nop
        }
      }
      break;
 8002cec:	bf00      	nop
    }
  }
  return frequency;
 8002cee:	69fb      	ldr	r3, [r7, #28]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3724      	adds	r7, #36	; 0x24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	017d7840 	.word	0x017d7840
 8002d08:	00bb8000 	.word	0x00bb8000

08002d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d10:	b0a6      	sub	sp, #152	; 0x98
 8002d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d32:	4bc8      	ldr	r3, [pc, #800]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	f200 817e 	bhi.w	800303c <HAL_RCC_GetSysClockFreq+0x330>
 8002d40:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d46:	bf00      	nop
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	0800303d 	.word	0x0800303d
 8002d50:	0800303d 	.word	0x0800303d
 8002d54:	0800303d 	.word	0x0800303d
 8002d58:	08002d85 	.word	0x08002d85
 8002d5c:	0800303d 	.word	0x0800303d
 8002d60:	0800303d 	.word	0x0800303d
 8002d64:	0800303d 	.word	0x0800303d
 8002d68:	08002d8d 	.word	0x08002d8d
 8002d6c:	0800303d 	.word	0x0800303d
 8002d70:	0800303d 	.word	0x0800303d
 8002d74:	0800303d 	.word	0x0800303d
 8002d78:	08002ef7 	.word	0x08002ef7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4bb6      	ldr	r3, [pc, #728]	; (8003058 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002d82:	e15f      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d84:	4bb5      	ldr	r3, [pc, #724]	; (800305c <HAL_RCC_GetSysClockFreq+0x350>)
 8002d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002d8a:	e15b      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d8c:	4bb1      	ldr	r3, [pc, #708]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d98:	4bae      	ldr	r3, [pc, #696]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d031      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da4:	4bab      	ldr	r3, [pc, #684]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	2200      	movs	r2, #0
 8002dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db6:	663b      	str	r3, [r7, #96]	; 0x60
 8002db8:	2300      	movs	r3, #0
 8002dba:	667b      	str	r3, [r7, #100]	; 0x64
 8002dbc:	4ba7      	ldr	r3, [pc, #668]	; (800305c <HAL_RCC_GetSysClockFreq+0x350>)
 8002dbe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002dc2:	462a      	mov	r2, r5
 8002dc4:	fb03 f202 	mul.w	r2, r3, r2
 8002dc8:	2300      	movs	r3, #0
 8002dca:	4621      	mov	r1, r4
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4aa2      	ldr	r2, [pc, #648]	; (800305c <HAL_RCC_GetSysClockFreq+0x350>)
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	fba1 1202 	umull	r1, r2, r1, r2
 8002dda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ddc:	460a      	mov	r2, r1
 8002dde:	67ba      	str	r2, [r7, #120]	; 0x78
 8002de0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002de2:	4413      	add	r3, r2
 8002de4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dea:	2200      	movs	r2, #0
 8002dec:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002df0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002df4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002df8:	f7fd fa5a 	bl	80002b0 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4613      	mov	r3, r2
 8002e02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e06:	e064      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e08:	4b92      	ldr	r3, [pc, #584]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	2200      	movs	r2, #0
 8002e10:	653b      	str	r3, [r7, #80]	; 0x50
 8002e12:	657a      	str	r2, [r7, #84]	; 0x54
 8002e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e20:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002e24:	4622      	mov	r2, r4
 8002e26:	462b      	mov	r3, r5
 8002e28:	f04f 0000 	mov.w	r0, #0
 8002e2c:	f04f 0100 	mov.w	r1, #0
 8002e30:	0159      	lsls	r1, r3, #5
 8002e32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e36:	0150      	lsls	r0, r2, #5
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	1a51      	subs	r1, r2, r1
 8002e40:	6139      	str	r1, [r7, #16]
 8002e42:	4629      	mov	r1, r5
 8002e44:	eb63 0301 	sbc.w	r3, r3, r1
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e56:	4659      	mov	r1, fp
 8002e58:	018b      	lsls	r3, r1, #6
 8002e5a:	4651      	mov	r1, sl
 8002e5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e60:	4651      	mov	r1, sl
 8002e62:	018a      	lsls	r2, r1, #6
 8002e64:	4651      	mov	r1, sl
 8002e66:	ebb2 0801 	subs.w	r8, r2, r1
 8002e6a:	4659      	mov	r1, fp
 8002e6c:	eb63 0901 	sbc.w	r9, r3, r1
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e84:	4690      	mov	r8, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	4623      	mov	r3, r4
 8002e8a:	eb18 0303 	adds.w	r3, r8, r3
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	462b      	mov	r3, r5
 8002e92:	eb49 0303 	adc.w	r3, r9, r3
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	028b      	lsls	r3, r1, #10
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eae:	4621      	mov	r1, r4
 8002eb0:	028a      	lsls	r2, r1, #10
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eba:	2200      	movs	r2, #0
 8002ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ebe:	647a      	str	r2, [r7, #68]	; 0x44
 8002ec0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ec4:	f7fd f9f4 	bl	80002b0 <__aeabi_uldivmod>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed2:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	3301      	adds	r3, #1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002ee4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002ef4:	e0a6      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef6:	4b57      	ldr	r3, [pc, #348]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002efe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f02:	4b54      	ldr	r3, [pc, #336]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d02a      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0e:	4b51      	ldr	r3, [pc, #324]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	2200      	movs	r2, #0
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f20:	2100      	movs	r1, #0
 8002f22:	4b4e      	ldr	r3, [pc, #312]	; (800305c <HAL_RCC_GetSysClockFreq+0x350>)
 8002f24:	fb03 f201 	mul.w	r2, r3, r1
 8002f28:	2300      	movs	r3, #0
 8002f2a:	fb00 f303 	mul.w	r3, r0, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a4a      	ldr	r2, [pc, #296]	; (800305c <HAL_RCC_GetSysClockFreq+0x350>)
 8002f32:	fba0 1202 	umull	r1, r2, r0, r2
 8002f36:	677a      	str	r2, [r7, #116]	; 0x74
 8002f38:	460a      	mov	r2, r1
 8002f3a:	673a      	str	r2, [r7, #112]	; 0x70
 8002f3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f3e:	4413      	add	r3, r2
 8002f40:	677b      	str	r3, [r7, #116]	; 0x74
 8002f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f46:	2200      	movs	r2, #0
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4a:	637a      	str	r2, [r7, #52]	; 0x34
 8002f4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f50:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002f54:	f7fd f9ac 	bl	80002b0 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f62:	e05b      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f64:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f76:	623b      	str	r3, [r7, #32]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f80:	4642      	mov	r2, r8
 8002f82:	464b      	mov	r3, r9
 8002f84:	f04f 0000 	mov.w	r0, #0
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	0159      	lsls	r1, r3, #5
 8002f8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f92:	0150      	lsls	r0, r2, #5
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4641      	mov	r1, r8
 8002f9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f9e:	4649      	mov	r1, r9
 8002fa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fb8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fbc:	eb63 050b 	sbc.w	r5, r3, fp
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	00eb      	lsls	r3, r5, #3
 8002fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fce:	00e2      	lsls	r2, r4, #3
 8002fd0:	4614      	mov	r4, r2
 8002fd2:	461d      	mov	r5, r3
 8002fd4:	4643      	mov	r3, r8
 8002fd6:	18e3      	adds	r3, r4, r3
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	464b      	mov	r3, r9
 8002fdc:	eb45 0303 	adc.w	r3, r5, r3
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fee:	4629      	mov	r1, r5
 8002ff0:	028b      	lsls	r3, r1, #10
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	028a      	lsls	r2, r1, #10
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003004:	2200      	movs	r2, #0
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	61fa      	str	r2, [r7, #28]
 800300a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800300e:	f7fd f94f 	bl	80002b0 <__aeabi_uldivmod>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4613      	mov	r3, r2
 8003018:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800301c:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_RCC_GetSysClockFreq+0x348>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	0f1b      	lsrs	r3, r3, #28
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800302a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800302e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800303a:	e003      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_GetSysClockFreq+0x34c>)
 800303e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003042:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003048:	4618      	mov	r0, r3
 800304a:	3798      	adds	r7, #152	; 0x98
 800304c:	46bd      	mov	sp, r7
 800304e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	00f42400 	.word	0x00f42400
 800305c:	017d7840 	.word	0x017d7840

08003060 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e28d      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8083 	beq.w	8003186 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003080:	4b94      	ldr	r3, [pc, #592]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b04      	cmp	r3, #4
 800308a:	d019      	beq.n	80030c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800308c:	4b91      	ldr	r3, [pc, #580]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003094:	2b08      	cmp	r3, #8
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003098:	4b8e      	ldr	r3, [pc, #568]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a4:	d00c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a6:	4b8b      	ldr	r3, [pc, #556]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d112      	bne.n	80030d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b2:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030be:	d10b      	bne.n	80030d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	4b84      	ldr	r3, [pc, #528]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d05b      	beq.n	8003184 <HAL_RCC_OscConfig+0x124>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d157      	bne.n	8003184 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e25a      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d106      	bne.n	80030f0 <HAL_RCC_OscConfig+0x90>
 80030e2:	4b7c      	ldr	r3, [pc, #496]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a7b      	ldr	r2, [pc, #492]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e01d      	b.n	800312c <HAL_RCC_OscConfig+0xcc>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0xb4>
 80030fa:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a75      	ldr	r2, [pc, #468]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a72      	ldr	r2, [pc, #456]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e00b      	b.n	800312c <HAL_RCC_OscConfig+0xcc>
 8003114:	4b6f      	ldr	r3, [pc, #444]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6e      	ldr	r2, [pc, #440]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 800311a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b6c      	ldr	r3, [pc, #432]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a6b      	ldr	r2, [pc, #428]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fd ffac 	bl	8001090 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800313c:	f7fd ffa8 	bl	8001090 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e21f      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0xdc>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fd ff98 	bl	8001090 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7fd ff94 	bl	8001090 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e20b      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	4b57      	ldr	r3, [pc, #348]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x104>
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d06f      	beq.n	8003272 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003192:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b00      	cmp	r3, #0
 800319c:	d017      	beq.n	80031ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800319e:	4b4d      	ldr	r3, [pc, #308]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d105      	bne.n	80031b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031aa:	4b4a      	ldr	r3, [pc, #296]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d11c      	bne.n	80031fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c2:	4b44      	ldr	r3, [pc, #272]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCC_OscConfig+0x186>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e1d3      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4937      	ldr	r1, [pc, #220]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	e03a      	b.n	8003272 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003204:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <HAL_RCC_OscConfig+0x278>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fd ff41 	bl	8001090 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003212:	f7fd ff3d 	bl	8001090 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1b4      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4925      	ldr	r1, [pc, #148]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003246:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <HAL_RCC_OscConfig+0x278>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fd ff20 	bl	8001090 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003254:	f7fd ff1c 	bl	8001090 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e193      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d036      	beq.n	80032ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_RCC_OscConfig+0x27c>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fd ff00 	bl	8001090 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003294:	f7fd fefc 	bl	8001090 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e173      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x234>
 80032b2:	e01b      	b.n	80032ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_RCC_OscConfig+0x27c>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fd fee9 	bl	8001090 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c0:	e00e      	b.n	80032e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c2:	f7fd fee5 	bl	8001090 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d907      	bls.n	80032e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e15c      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
 80032d4:	40023800 	.word	0x40023800
 80032d8:	42470000 	.word	0x42470000
 80032dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	4b8a      	ldr	r3, [pc, #552]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ea      	bne.n	80032c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8097 	beq.w	8003428 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fe:	4b83      	ldr	r3, [pc, #524]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10f      	bne.n	800332a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	4b7f      	ldr	r3, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a7e      	ldr	r2, [pc, #504]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b7c      	ldr	r3, [pc, #496]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b79      	ldr	r3, [pc, #484]	; (8003510 <HAL_RCC_OscConfig+0x4b0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4b76      	ldr	r3, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x4b0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a75      	ldr	r2, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x4b0>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fd fea5 	bl	8001090 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fd fea1 	bl	8001090 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e118      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	4b6c      	ldr	r3, [pc, #432]	; (8003510 <HAL_RCC_OscConfig+0x4b0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x31e>
 8003370:	4b66      	ldr	r3, [pc, #408]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a65      	ldr	r2, [pc, #404]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
 800337c:	e01c      	b.n	80033b8 <HAL_RCC_OscConfig+0x358>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x340>
 8003386:	4b61      	ldr	r3, [pc, #388]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a60      	ldr	r2, [pc, #384]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	4b5e      	ldr	r3, [pc, #376]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a5d      	ldr	r2, [pc, #372]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0x358>
 80033a0:	4b5a      	ldr	r3, [pc, #360]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a59      	ldr	r2, [pc, #356]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	4b57      	ldr	r3, [pc, #348]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 80033b2:	f023 0304 	bic.w	r3, r3, #4
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d015      	beq.n	80033ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fd fe66 	bl	8001090 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fd fe62 	bl	8001090 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0d7      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033de:	4b4b      	ldr	r3, [pc, #300]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0ee      	beq.n	80033c8 <HAL_RCC_OscConfig+0x368>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7fd fe50 	bl	8001090 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f2:	e00a      	b.n	800340a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fd fe4c 	bl	8001090 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e0c1      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340a:	4b40      	ldr	r3, [pc, #256]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1ee      	bne.n	80033f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d105      	bne.n	8003428 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341c:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	4a3a      	ldr	r2, [pc, #232]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003426:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80ad 	beq.w	800358c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b08      	cmp	r3, #8
 800343c:	d060      	beq.n	8003500 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d145      	bne.n	80034d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b33      	ldr	r3, [pc, #204]	; (8003514 <HAL_RCC_OscConfig+0x4b4>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd fe20 	bl	8001090 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fd fe1c 	bl	8001090 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e093      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	3b01      	subs	r3, #1
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	071b      	lsls	r3, r3, #28
 800349e:	491b      	ldr	r1, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x4b4>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fd fdf1 	bl	8001090 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fd fded 	bl	8001090 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e064      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x452>
 80034d0:	e05c      	b.n	800358c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_OscConfig+0x4b4>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd fdda 	bl	8001090 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fd fdd6 	bl	8001090 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e04d      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x480>
 80034fe:	e045      	b.n	800358c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e040      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003518:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <HAL_RCC_OscConfig+0x538>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d030      	beq.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d129      	bne.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d122      	bne.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	4293      	cmp	r3, r2
 8003552:	d119      	bne.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d10f      	bne.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d107      	bne.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800

0800359c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e07b      	b.n	80036a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d108      	bne.n	80035c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035be:	d009      	beq.n	80035d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	61da      	str	r2, [r3, #28]
 80035c6:	e005      	b.n	80035d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd fb76 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	ea42 0103 	orr.w	r1, r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 0104 	and.w	r1, r3, #4
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f003 0210 	and.w	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003694:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80036b4:	4904      	ldr	r1, [pc, #16]	; (80036c8 <MX_FATFS_Init+0x18>)
 80036b6:	4805      	ldr	r0, [pc, #20]	; (80036cc <MX_FATFS_Init+0x1c>)
 80036b8:	f000 fd86 	bl	80041c8 <FATFS_LinkDriver>
 80036bc:	4603      	mov	r3, r0
 80036be:	461a      	mov	r2, r3
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <MX_FATFS_Init+0x20>)
 80036c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80036c4:	bf00      	nop
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20002290 	.word	0x20002290
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	2000228c 	.word	0x2000228c

080036d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <USER_initialize+0x24>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <USER_initialize+0x24>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000009 	.word	0x20000009

080036fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <USER_status+0x24>)
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <USER_status+0x24>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000009 	.word	0x20000009

08003724 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	4603      	mov	r3, r0
 8003732:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003734:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4603      	mov	r3, r0
 8003750:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8003752:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	603a      	str	r2, [r7, #0]
 800376a:	71fb      	strb	r3, [r7, #7]
 800376c:	460b      	mov	r3, r1
 800376e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
    return res;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <disk_status+0x30>)
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	79fa      	ldrb	r2, [r7, #7]
 800379c:	4905      	ldr	r1, [pc, #20]	; (80037b4 <disk_status+0x30>)
 800379e:	440a      	add	r2, r1
 80037a0:	7a12      	ldrb	r2, [r2, #8]
 80037a2:	4610      	mov	r0, r2
 80037a4:	4798      	blx	r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200024bc 	.word	0x200024bc

080037b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <disk_initialize+0x48>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d111      	bne.n	80037f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <disk_initialize+0x48>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	4a09      	ldr	r2, [pc, #36]	; (8003800 <disk_initialize+0x48>)
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	79fa      	ldrb	r2, [r7, #7]
 80037e6:	4906      	ldr	r1, [pc, #24]	; (8003800 <disk_initialize+0x48>)
 80037e8:	440a      	add	r2, r1
 80037ea:	7a12      	ldrb	r2, [r2, #8]
 80037ec:	4610      	mov	r0, r2
 80037ee:	4798      	blx	r3
 80037f0:	4603      	mov	r3, r0
 80037f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200024bc 	.word	0x200024bc

08003804 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <disk_read+0x3c>)
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	689c      	ldr	r4, [r3, #8]
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	4a07      	ldr	r2, [pc, #28]	; (8003840 <disk_read+0x3c>)
 8003824:	4413      	add	r3, r2
 8003826:	7a18      	ldrb	r0, [r3, #8]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	47a0      	blx	r4
 8003830:	4603      	mov	r3, r0
 8003832:	75fb      	strb	r3, [r7, #23]
  return res;
 8003834:	7dfb      	ldrb	r3, [r7, #23]
}
 8003836:	4618      	mov	r0, r3
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	bd90      	pop	{r4, r7, pc}
 800383e:	bf00      	nop
 8003840:	200024bc 	.word	0x200024bc

08003844 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4603      	mov	r3, r0
 8003852:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <disk_write+0x3c>)
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	68dc      	ldr	r4, [r3, #12]
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	4a07      	ldr	r2, [pc, #28]	; (8003880 <disk_write+0x3c>)
 8003864:	4413      	add	r3, r2
 8003866:	7a18      	ldrb	r0, [r3, #8]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	47a0      	blx	r4
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]
  return res;
 8003874:	7dfb      	ldrb	r3, [r7, #23]
}
 8003876:	4618      	mov	r0, r3
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	bd90      	pop	{r4, r7, pc}
 800387e:	bf00      	nop
 8003880:	200024bc 	.word	0x200024bc

08003884 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	603a      	str	r2, [r7, #0]
 800388e:	71fb      	strb	r3, [r7, #7]
 8003890:	460b      	mov	r3, r1
 8003892:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <disk_ioctl+0x38>)
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	79fa      	ldrb	r2, [r7, #7]
 80038a2:	4906      	ldr	r1, [pc, #24]	; (80038bc <disk_ioctl+0x38>)
 80038a4:	440a      	add	r2, r1
 80038a6:	7a10      	ldrb	r0, [r2, #8]
 80038a8:	79b9      	ldrb	r1, [r7, #6]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4798      	blx	r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200024bc 	.word	0x200024bc

080038c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3301      	adds	r3, #1
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80038d0:	89fb      	ldrh	r3, [r7, #14]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	b21a      	sxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b21b      	sxth	r3, r3
 80038dc:	4313      	orrs	r3, r2
 80038de:	b21b      	sxth	r3, r3
 80038e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80038e2:	89fb      	ldrh	r3, [r7, #14]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3303      	adds	r3, #3
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	3202      	adds	r2, #2
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	3201      	adds	r2, #1
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
	return rv;
 8003928:	68fb      	ldr	r3, [r7, #12]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e010      	b.n	8003968 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003946:	4a0d      	ldr	r2, [pc, #52]	; (800397c <clear_lock+0x44>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	4413      	add	r3, r2
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d105      	bne.n	8003962 <clear_lock+0x2a>
 8003956:	4a09      	ldr	r2, [pc, #36]	; (800397c <clear_lock+0x44>)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	4413      	add	r3, r2
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d9eb      	bls.n	8003946 <clear_lock+0xe>
	}
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	2000229c 	.word	0x2000229c

08003980 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	78db      	ldrb	r3, [r3, #3]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d034      	beq.n	80039fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	7858      	ldrb	r0, [r3, #1]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039a4:	2301      	movs	r3, #1
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	f7ff ff4c 	bl	8003844 <disk_write>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
 80039b6:	e022      	b.n	80039fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	1ad2      	subs	r2, r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d217      	bcs.n	80039fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	789b      	ldrb	r3, [r3, #2]
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	e010      	b.n	80039f8 <sync_window+0x78>
					wsect += fs->fsize;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4413      	add	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7858      	ldrb	r0, [r3, #1]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039ea:	2301      	movs	r3, #1
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	f7ff ff29 	bl	8003844 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d8eb      	bhi.n	80039d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d01b      	beq.n	8003a58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ffad 	bl	8003980 <sync_window>
 8003a26:	4603      	mov	r3, r0
 8003a28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d113      	bne.n	8003a58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7858      	ldrb	r0, [r3, #1]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	f7ff fee1 	bl	8003804 <disk_read>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b087      	sub	sp, #28
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d031      	beq.n	8003adc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e002      	b.n	8003a86 <get_ldnumber+0x24>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	3301      	adds	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b1f      	cmp	r3, #31
 8003a8c:	d903      	bls.n	8003a96 <get_ldnumber+0x34>
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b3a      	cmp	r3, #58	; 0x3a
 8003a94:	d1f4      	bne.n	8003a80 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b3a      	cmp	r3, #58	; 0x3a
 8003a9c:	d11c      	bne.n	8003ad8 <get_ldnumber+0x76>
			tp = *path;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	60fa      	str	r2, [r7, #12]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	3b30      	subs	r3, #48	; 0x30
 8003aae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b09      	cmp	r3, #9
 8003ab4:	d80e      	bhi.n	8003ad4 <get_ldnumber+0x72>
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d10a      	bne.n	8003ad4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <get_ldnumber+0x72>
					vol = (int)i;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3301      	adds	r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	e002      	b.n	8003ade <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003adc:	693b      	ldr	r3, [r7, #16]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	70da      	strb	r2, [r3, #3]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f04f 32ff 	mov.w	r2, #4294967295
 8003b02:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003b04:	6839      	ldr	r1, [r7, #0]
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ff7e 	bl	8003a08 <move_window>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <check_fs+0x2a>
 8003b12:	2304      	movs	r3, #4
 8003b14:	e038      	b.n	8003b88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3338      	adds	r3, #56	; 0x38
 8003b1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fece 	bl	80038c0 <ld_word>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <check_fs+0x48>
 8003b30:	2303      	movs	r3, #3
 8003b32:	e029      	b.n	8003b88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b3a:	2be9      	cmp	r3, #233	; 0xe9
 8003b3c:	d009      	beq.n	8003b52 <check_fs+0x66>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b44:	2beb      	cmp	r3, #235	; 0xeb
 8003b46:	d11e      	bne.n	8003b86 <check_fs+0x9a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b4e:	2b90      	cmp	r3, #144	; 0x90
 8003b50:	d119      	bne.n	8003b86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3338      	adds	r3, #56	; 0x38
 8003b56:	3336      	adds	r3, #54	; 0x36
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fec9 	bl	80038f0 <ld_dword>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b64:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <check_fs+0xa4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d101      	bne.n	8003b6e <check_fs+0x82>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e00c      	b.n	8003b88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3338      	adds	r3, #56	; 0x38
 8003b72:	3352      	adds	r3, #82	; 0x52
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff febb 	bl	80038f0 <ld_dword>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4a05      	ldr	r2, [pc, #20]	; (8003b94 <check_fs+0xa8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <check_fs+0x9a>
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8003b86:	2302      	movs	r3, #2
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	00544146 	.word	0x00544146
 8003b94:	33544146 	.word	0x33544146

08003b98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b096      	sub	sp, #88	; 0x58
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7ff ff58 	bl	8003a62 <get_ldnumber>
 8003bb2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da01      	bge.n	8003bbe <find_volume+0x26>
 8003bba:	230b      	movs	r3, #11
 8003bbc:	e265      	b.n	800408a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003bbe:	4a9f      	ldr	r2, [pc, #636]	; (8003e3c <find_volume+0x2a4>)
 8003bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <find_volume+0x3a>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	e25b      	b.n	800408a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01a      	beq.n	8003c1e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	785b      	ldrb	r3, [r3, #1]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fdc9 	bl	8003784 <disk_status>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003bf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10c      	bne.n	8003c1e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <find_volume+0x82>
 8003c0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003c16:	230a      	movs	r3, #10
 8003c18:	e237      	b.n	800408a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e235      	b.n	800408a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff fdc1 	bl	80037b8 <disk_initialize>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e21e      	b.n	800408a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <find_volume+0xca>
 8003c52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003c5e:	230a      	movs	r3, #10
 8003c60:	e213      	b.n	800408a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	7858      	ldrb	r0, [r3, #1]
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	330c      	adds	r3, #12
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2102      	movs	r1, #2
 8003c6e:	f7ff fe09 	bl	8003884 <disk_ioctl>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <find_volume+0xe4>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e206      	b.n	800408a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	899b      	ldrh	r3, [r3, #12]
 8003c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c84:	d80d      	bhi.n	8003ca2 <find_volume+0x10a>
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	899b      	ldrh	r3, [r3, #12]
 8003c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8e:	d308      	bcc.n	8003ca2 <find_volume+0x10a>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	899b      	ldrh	r3, [r3, #12]
 8003c94:	461a      	mov	r2, r3
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	899b      	ldrh	r3, [r3, #12]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <find_volume+0x10e>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e1f1      	b.n	800408a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003caa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003cac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cae:	f7ff ff1d 	bl	8003aec <check_fs>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d149      	bne.n	8003d54 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc4:	e01e      	b.n	8003d04 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003cd4:	4413      	add	r3, r2
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	3304      	adds	r3, #4
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <find_volume+0x158>
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fe02 	bl	80038f0 <ld_dword>
 8003cec:	4602      	mov	r2, r0
 8003cee:	e000      	b.n	8003cf2 <find_volume+0x15a>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	3358      	adds	r3, #88	; 0x58
 8003cf8:	443b      	add	r3, r7
 8003cfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d00:	3301      	adds	r3, #1
 8003d02:	643b      	str	r3, [r7, #64]	; 0x40
 8003d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d9dd      	bls.n	8003cc6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <find_volume+0x182>
 8003d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d16:	3b01      	subs	r3, #1
 8003d18:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	3358      	adds	r3, #88	; 0x58
 8003d20:	443b      	add	r3, r7
 8003d22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003d26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <find_volume+0x1a2>
 8003d2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d32:	f7ff fedb 	bl	8003aec <check_fs>
 8003d36:	4603      	mov	r3, r0
 8003d38:	e000      	b.n	8003d3c <find_volume+0x1a4>
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d905      	bls.n	8003d54 <find_volume+0x1bc>
 8003d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d9e2      	bls.n	8003d1a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003d54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d101      	bne.n	8003d60 <find_volume+0x1c8>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e194      	b.n	800408a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d901      	bls.n	8003d6c <find_volume+0x1d4>
 8003d68:	230d      	movs	r3, #13
 8003d6a:	e18e      	b.n	800408a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	3338      	adds	r3, #56	; 0x38
 8003d70:	330b      	adds	r3, #11
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fda4 	bl	80038c0 <ld_word>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	899b      	ldrh	r3, [r3, #12]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <find_volume+0x1f0>
 8003d84:	230d      	movs	r3, #13
 8003d86:	e180      	b.n	800408a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	3338      	adds	r3, #56	; 0x38
 8003d8c:	3316      	adds	r3, #22
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fd96 	bl	80038c0 <ld_word>
 8003d94:	4603      	mov	r3, r0
 8003d96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <find_volume+0x214>
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	3338      	adds	r3, #56	; 0x38
 8003da2:	3324      	adds	r3, #36	; 0x24
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fda3 	bl	80038f0 <ld_dword>
 8003daa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003db0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	789b      	ldrb	r3, [r3, #2]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d005      	beq.n	8003dd0 <find_volume+0x238>
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	789b      	ldrb	r3, [r3, #2]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d001      	beq.n	8003dd0 <find_volume+0x238>
 8003dcc:	230d      	movs	r3, #13
 8003dce:	e15c      	b.n	800408a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	789b      	ldrb	r3, [r3, #2]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd8:	fb02 f303 	mul.w	r3, r2, r3
 8003ddc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	895b      	ldrh	r3, [r3, #10]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <find_volume+0x26c>
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	895b      	ldrh	r3, [r3, #10]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	895b      	ldrh	r3, [r3, #10]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <find_volume+0x270>
 8003e04:	230d      	movs	r3, #13
 8003e06:	e140      	b.n	800408a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	3338      	adds	r3, #56	; 0x38
 8003e0c:	3311      	adds	r3, #17
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fd56 	bl	80038c0 <ld_word>
 8003e14:	4603      	mov	r3, r0
 8003e16:	461a      	mov	r2, r3
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	891b      	ldrh	r3, [r3, #8]
 8003e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e22:	8992      	ldrh	r2, [r2, #12]
 8003e24:	0952      	lsrs	r2, r2, #5
 8003e26:	b292      	uxth	r2, r2
 8003e28:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e2c:	fb01 f202 	mul.w	r2, r1, r2
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <find_volume+0x2a8>
 8003e38:	230d      	movs	r3, #13
 8003e3a:	e126      	b.n	800408a <find_volume+0x4f2>
 8003e3c:	20002294 	.word	0x20002294

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	3338      	adds	r3, #56	; 0x38
 8003e44:	3313      	adds	r3, #19
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fd3a 	bl	80038c0 <ld_word>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <find_volume+0x2cc>
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	3338      	adds	r3, #56	; 0x38
 8003e5a:	3320      	adds	r3, #32
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fd47 	bl	80038f0 <ld_dword>
 8003e62:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	3338      	adds	r3, #56	; 0x38
 8003e68:	330e      	adds	r3, #14
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fd28 	bl	80038c0 <ld_word>
 8003e70:	4603      	mov	r3, r0
 8003e72:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003e74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <find_volume+0x2e6>
 8003e7a:	230d      	movs	r3, #13
 8003e7c:	e105      	b.n	800408a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003e7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e82:	4413      	add	r3, r2
 8003e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e86:	8911      	ldrh	r1, [r2, #8]
 8003e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e8a:	8992      	ldrh	r2, [r2, #12]
 8003e8c:	0952      	lsrs	r2, r2, #5
 8003e8e:	b292      	uxth	r2, r2
 8003e90:	fbb1 f2f2 	udiv	r2, r1, r2
 8003e94:	b292      	uxth	r2, r2
 8003e96:	4413      	add	r3, r2
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003e9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d201      	bcs.n	8003ea6 <find_volume+0x30e>
 8003ea2:	230d      	movs	r3, #13
 8003ea4:	e0f1      	b.n	800408a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eae:	8952      	ldrh	r2, [r2, #10]
 8003eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <find_volume+0x328>
 8003ebc:	230d      	movs	r3, #13
 8003ebe:	e0e4      	b.n	800408a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d802      	bhi.n	8003ed6 <find_volume+0x33e>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d802      	bhi.n	8003ee6 <find_volume+0x34e>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	1c9a      	adds	r2, r3, #2
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003ef4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef8:	441a      	add	r2, r3
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8003efe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	441a      	add	r2, r3
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8003f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d11e      	bne.n	8003f4e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	3338      	adds	r3, #56	; 0x38
 8003f14:	332a      	adds	r3, #42	; 0x2a
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fcd2 	bl	80038c0 <ld_word>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <find_volume+0x38e>
 8003f22:	230d      	movs	r3, #13
 8003f24:	e0b1      	b.n	800408a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	891b      	ldrh	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <find_volume+0x39a>
 8003f2e:	230d      	movs	r3, #13
 8003f30:	e0ab      	b.n	800408a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	3338      	adds	r3, #56	; 0x38
 8003f36:	332c      	adds	r3, #44	; 0x2c
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fcd9 	bl	80038f0 <ld_dword>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4c:	e01f      	b.n	8003f8e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	891b      	ldrh	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <find_volume+0x3c2>
 8003f56:	230d      	movs	r3, #13
 8003f58:	e097      	b.n	800408a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f60:	441a      	add	r2, r3
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003f66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d103      	bne.n	8003f76 <find_volume+0x3de>
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	e00a      	b.n	8003f8c <find_volume+0x3f4>
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	085a      	lsrs	r2, r3, #1
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003f8c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	6a1a      	ldr	r2, [r3, #32]
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	899b      	ldrh	r3, [r3, #12]
 8003f96:	4619      	mov	r1, r3
 8003f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fa0:	8989      	ldrh	r1, [r1, #12]
 8003fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d201      	bcs.n	8003fae <find_volume+0x416>
 8003faa:	230d      	movs	r3, #13
 8003fac:	e06d      	b.n	800408a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb4:	619a      	str	r2, [r3, #24]
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	2280      	movs	r2, #128	; 0x80
 8003fc2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d149      	bne.n	8004060 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	3338      	adds	r3, #56	; 0x38
 8003fd0:	3330      	adds	r3, #48	; 0x30
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fc74 	bl	80038c0 <ld_word>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d140      	bne.n	8004060 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fe6:	f7ff fd0f 	bl	8003a08 <move_window>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d137      	bne.n	8004060 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	3338      	adds	r3, #56	; 0x38
 8003ffa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fc5e 	bl	80038c0 <ld_word>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800400c:	429a      	cmp	r2, r3
 800400e:	d127      	bne.n	8004060 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	3338      	adds	r3, #56	; 0x38
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fc6b 	bl	80038f0 <ld_dword>
 800401a:	4603      	mov	r3, r0
 800401c:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <find_volume+0x4fc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d11e      	bne.n	8004060 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	3338      	adds	r3, #56	; 0x38
 8004026:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fc60 	bl	80038f0 <ld_dword>
 8004030:	4603      	mov	r3, r0
 8004032:	4a19      	ldr	r2, [pc, #100]	; (8004098 <find_volume+0x500>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d113      	bne.n	8004060 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	3338      	adds	r3, #56	; 0x38
 800403c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fc55 	bl	80038f0 <ld_dword>
 8004046:	4602      	mov	r2, r0
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404e:	3338      	adds	r3, #56	; 0x38
 8004050:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fc4b 	bl	80038f0 <ld_dword>
 800405a:	4602      	mov	r2, r0
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004066:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <find_volume+0x504>)
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <find_volume+0x504>)
 8004072:	801a      	strh	r2, [r3, #0]
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <find_volume+0x504>)
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <find_volume+0x508>)
 8004080:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004082:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004084:	f7ff fc58 	bl	8003938 <clear_lock>
#endif
	return FR_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3758      	adds	r7, #88	; 0x58
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	41615252 	.word	0x41615252
 8004098:	61417272 	.word	0x61417272
 800409c:	20002298 	.word	0x20002298
 80040a0:	200022bc 	.word	0x200022bc

080040a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80040b6:	f107 0310 	add.w	r3, r7, #16
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fcd1 	bl	8003a62 <get_ldnumber>
 80040c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	da01      	bge.n	80040cc <f_mount+0x28>
 80040c8:	230b      	movs	r3, #11
 80040ca:	e02b      	b.n	8004124 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80040cc:	4a17      	ldr	r2, [pc, #92]	; (800412c <f_mount+0x88>)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80040dc:	69b8      	ldr	r0, [r7, #24]
 80040de:	f7ff fc2b 	bl	8003938 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	490d      	ldr	r1, [pc, #52]	; (800412c <f_mount+0x88>)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <f_mount+0x66>
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <f_mount+0x6a>
 800410a:	2300      	movs	r3, #0
 800410c:	e00a      	b.n	8004124 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800410e:	f107 010c 	add.w	r1, r7, #12
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	2200      	movs	r2, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fd3d 	bl	8003b98 <find_volume>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004122:	7dfb      	ldrb	r3, [r7, #23]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20002294 	.word	0x20002294

08004130 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004146:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <FATFS_LinkDriverEx+0x94>)
 8004148:	7a5b      	ldrb	r3, [r3, #9]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d131      	bne.n	80041b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004150:	4b1c      	ldr	r3, [pc, #112]	; (80041c4 <FATFS_LinkDriverEx+0x94>)
 8004152:	7a5b      	ldrb	r3, [r3, #9]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <FATFS_LinkDriverEx+0x94>)
 800415a:	2100      	movs	r1, #0
 800415c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800415e:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <FATFS_LinkDriverEx+0x94>)
 8004160:	7a5b      	ldrb	r3, [r3, #9]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <FATFS_LinkDriverEx+0x94>)
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <FATFS_LinkDriverEx+0x94>)
 8004170:	7a5b      	ldrb	r3, [r3, #9]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <FATFS_LinkDriverEx+0x94>)
 8004178:	4413      	add	r3, r2
 800417a:	79fa      	ldrb	r2, [r7, #7]
 800417c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800417e:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <FATFS_LinkDriverEx+0x94>)
 8004180:	7a5b      	ldrb	r3, [r3, #9]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	b2d1      	uxtb	r1, r2
 8004188:	4a0e      	ldr	r2, [pc, #56]	; (80041c4 <FATFS_LinkDriverEx+0x94>)
 800418a:	7251      	strb	r1, [r2, #9]
 800418c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800418e:	7dbb      	ldrb	r3, [r7, #22]
 8004190:	3330      	adds	r3, #48	; 0x30
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	3301      	adds	r3, #1
 800419c:	223a      	movs	r2, #58	; 0x3a
 800419e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	3302      	adds	r3, #2
 80041a4:	222f      	movs	r2, #47	; 0x2f
 80041a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	3303      	adds	r3, #3
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	200024bc 	.word	0x200024bc

080041c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80041d2:	2200      	movs	r2, #0
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ffaa 	bl	8004130 <FATFS_LinkDriverEx>
 80041dc:	4603      	mov	r3, r0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <std>:
 80041e8:	2300      	movs	r3, #0
 80041ea:	b510      	push	{r4, lr}
 80041ec:	4604      	mov	r4, r0
 80041ee:	e9c0 3300 	strd	r3, r3, [r0]
 80041f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041f6:	6083      	str	r3, [r0, #8]
 80041f8:	8181      	strh	r1, [r0, #12]
 80041fa:	6643      	str	r3, [r0, #100]	; 0x64
 80041fc:	81c2      	strh	r2, [r0, #14]
 80041fe:	6183      	str	r3, [r0, #24]
 8004200:	4619      	mov	r1, r3
 8004202:	2208      	movs	r2, #8
 8004204:	305c      	adds	r0, #92	; 0x5c
 8004206:	f000 f9f7 	bl	80045f8 <memset>
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <std+0x58>)
 800420c:	6263      	str	r3, [r4, #36]	; 0x24
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <std+0x5c>)
 8004210:	62a3      	str	r3, [r4, #40]	; 0x28
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <std+0x60>)
 8004214:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <std+0x64>)
 8004218:	6323      	str	r3, [r4, #48]	; 0x30
 800421a:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <std+0x68>)
 800421c:	6224      	str	r4, [r4, #32]
 800421e:	429c      	cmp	r4, r3
 8004220:	d006      	beq.n	8004230 <std+0x48>
 8004222:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004226:	4294      	cmp	r4, r2
 8004228:	d002      	beq.n	8004230 <std+0x48>
 800422a:	33d0      	adds	r3, #208	; 0xd0
 800422c:	429c      	cmp	r4, r3
 800422e:	d105      	bne.n	800423c <std+0x54>
 8004230:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004238:	f000 ba56 	b.w	80046e8 <__retarget_lock_init_recursive>
 800423c:	bd10      	pop	{r4, pc}
 800423e:	bf00      	nop
 8004240:	08004449 	.word	0x08004449
 8004244:	0800446b 	.word	0x0800446b
 8004248:	080044a3 	.word	0x080044a3
 800424c:	080044c7 	.word	0x080044c7
 8004250:	200024c8 	.word	0x200024c8

08004254 <stdio_exit_handler>:
 8004254:	4a02      	ldr	r2, [pc, #8]	; (8004260 <stdio_exit_handler+0xc>)
 8004256:	4903      	ldr	r1, [pc, #12]	; (8004264 <stdio_exit_handler+0x10>)
 8004258:	4803      	ldr	r0, [pc, #12]	; (8004268 <stdio_exit_handler+0x14>)
 800425a:	f000 b869 	b.w	8004330 <_fwalk_sglue>
 800425e:	bf00      	nop
 8004260:	20000020 	.word	0x20000020
 8004264:	08004f95 	.word	0x08004f95
 8004268:	2000002c 	.word	0x2000002c

0800426c <cleanup_stdio>:
 800426c:	6841      	ldr	r1, [r0, #4]
 800426e:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <cleanup_stdio+0x34>)
 8004270:	4299      	cmp	r1, r3
 8004272:	b510      	push	{r4, lr}
 8004274:	4604      	mov	r4, r0
 8004276:	d001      	beq.n	800427c <cleanup_stdio+0x10>
 8004278:	f000 fe8c 	bl	8004f94 <_fflush_r>
 800427c:	68a1      	ldr	r1, [r4, #8]
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <cleanup_stdio+0x38>)
 8004280:	4299      	cmp	r1, r3
 8004282:	d002      	beq.n	800428a <cleanup_stdio+0x1e>
 8004284:	4620      	mov	r0, r4
 8004286:	f000 fe85 	bl	8004f94 <_fflush_r>
 800428a:	68e1      	ldr	r1, [r4, #12]
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <cleanup_stdio+0x3c>)
 800428e:	4299      	cmp	r1, r3
 8004290:	d004      	beq.n	800429c <cleanup_stdio+0x30>
 8004292:	4620      	mov	r0, r4
 8004294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004298:	f000 be7c 	b.w	8004f94 <_fflush_r>
 800429c:	bd10      	pop	{r4, pc}
 800429e:	bf00      	nop
 80042a0:	200024c8 	.word	0x200024c8
 80042a4:	20002530 	.word	0x20002530
 80042a8:	20002598 	.word	0x20002598

080042ac <global_stdio_init.part.0>:
 80042ac:	b510      	push	{r4, lr}
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <global_stdio_init.part.0+0x30>)
 80042b0:	4c0b      	ldr	r4, [pc, #44]	; (80042e0 <global_stdio_init.part.0+0x34>)
 80042b2:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <global_stdio_init.part.0+0x38>)
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	4620      	mov	r0, r4
 80042b8:	2200      	movs	r2, #0
 80042ba:	2104      	movs	r1, #4
 80042bc:	f7ff ff94 	bl	80041e8 <std>
 80042c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80042c4:	2201      	movs	r2, #1
 80042c6:	2109      	movs	r1, #9
 80042c8:	f7ff ff8e 	bl	80041e8 <std>
 80042cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80042d0:	2202      	movs	r2, #2
 80042d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d6:	2112      	movs	r1, #18
 80042d8:	f7ff bf86 	b.w	80041e8 <std>
 80042dc:	20002600 	.word	0x20002600
 80042e0:	200024c8 	.word	0x200024c8
 80042e4:	08004255 	.word	0x08004255

080042e8 <__sfp_lock_acquire>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__sfp_lock_acquire+0x8>)
 80042ea:	f000 b9fe 	b.w	80046ea <__retarget_lock_acquire_recursive>
 80042ee:	bf00      	nop
 80042f0:	20002609 	.word	0x20002609

080042f4 <__sfp_lock_release>:
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <__sfp_lock_release+0x8>)
 80042f6:	f000 b9f9 	b.w	80046ec <__retarget_lock_release_recursive>
 80042fa:	bf00      	nop
 80042fc:	20002609 	.word	0x20002609

08004300 <__sinit>:
 8004300:	b510      	push	{r4, lr}
 8004302:	4604      	mov	r4, r0
 8004304:	f7ff fff0 	bl	80042e8 <__sfp_lock_acquire>
 8004308:	6a23      	ldr	r3, [r4, #32]
 800430a:	b11b      	cbz	r3, 8004314 <__sinit+0x14>
 800430c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004310:	f7ff bff0 	b.w	80042f4 <__sfp_lock_release>
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <__sinit+0x28>)
 8004316:	6223      	str	r3, [r4, #32]
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <__sinit+0x2c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f5      	bne.n	800430c <__sinit+0xc>
 8004320:	f7ff ffc4 	bl	80042ac <global_stdio_init.part.0>
 8004324:	e7f2      	b.n	800430c <__sinit+0xc>
 8004326:	bf00      	nop
 8004328:	0800426d 	.word	0x0800426d
 800432c:	20002600 	.word	0x20002600

08004330 <_fwalk_sglue>:
 8004330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004334:	4607      	mov	r7, r0
 8004336:	4688      	mov	r8, r1
 8004338:	4614      	mov	r4, r2
 800433a:	2600      	movs	r6, #0
 800433c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004340:	f1b9 0901 	subs.w	r9, r9, #1
 8004344:	d505      	bpl.n	8004352 <_fwalk_sglue+0x22>
 8004346:	6824      	ldr	r4, [r4, #0]
 8004348:	2c00      	cmp	r4, #0
 800434a:	d1f7      	bne.n	800433c <_fwalk_sglue+0xc>
 800434c:	4630      	mov	r0, r6
 800434e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004352:	89ab      	ldrh	r3, [r5, #12]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d907      	bls.n	8004368 <_fwalk_sglue+0x38>
 8004358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800435c:	3301      	adds	r3, #1
 800435e:	d003      	beq.n	8004368 <_fwalk_sglue+0x38>
 8004360:	4629      	mov	r1, r5
 8004362:	4638      	mov	r0, r7
 8004364:	47c0      	blx	r8
 8004366:	4306      	orrs	r6, r0
 8004368:	3568      	adds	r5, #104	; 0x68
 800436a:	e7e9      	b.n	8004340 <_fwalk_sglue+0x10>

0800436c <iprintf>:
 800436c:	b40f      	push	{r0, r1, r2, r3}
 800436e:	b507      	push	{r0, r1, r2, lr}
 8004370:	4906      	ldr	r1, [pc, #24]	; (800438c <iprintf+0x20>)
 8004372:	ab04      	add	r3, sp, #16
 8004374:	6808      	ldr	r0, [r1, #0]
 8004376:	f853 2b04 	ldr.w	r2, [r3], #4
 800437a:	6881      	ldr	r1, [r0, #8]
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	f000 fad9 	bl	8004934 <_vfiprintf_r>
 8004382:	b003      	add	sp, #12
 8004384:	f85d eb04 	ldr.w	lr, [sp], #4
 8004388:	b004      	add	sp, #16
 800438a:	4770      	bx	lr
 800438c:	20000078 	.word	0x20000078

08004390 <_puts_r>:
 8004390:	6a03      	ldr	r3, [r0, #32]
 8004392:	b570      	push	{r4, r5, r6, lr}
 8004394:	6884      	ldr	r4, [r0, #8]
 8004396:	4605      	mov	r5, r0
 8004398:	460e      	mov	r6, r1
 800439a:	b90b      	cbnz	r3, 80043a0 <_puts_r+0x10>
 800439c:	f7ff ffb0 	bl	8004300 <__sinit>
 80043a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043a2:	07db      	lsls	r3, r3, #31
 80043a4:	d405      	bmi.n	80043b2 <_puts_r+0x22>
 80043a6:	89a3      	ldrh	r3, [r4, #12]
 80043a8:	0598      	lsls	r0, r3, #22
 80043aa:	d402      	bmi.n	80043b2 <_puts_r+0x22>
 80043ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ae:	f000 f99c 	bl	80046ea <__retarget_lock_acquire_recursive>
 80043b2:	89a3      	ldrh	r3, [r4, #12]
 80043b4:	0719      	lsls	r1, r3, #28
 80043b6:	d513      	bpl.n	80043e0 <_puts_r+0x50>
 80043b8:	6923      	ldr	r3, [r4, #16]
 80043ba:	b18b      	cbz	r3, 80043e0 <_puts_r+0x50>
 80043bc:	3e01      	subs	r6, #1
 80043be:	68a3      	ldr	r3, [r4, #8]
 80043c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043c4:	3b01      	subs	r3, #1
 80043c6:	60a3      	str	r3, [r4, #8]
 80043c8:	b9e9      	cbnz	r1, 8004406 <_puts_r+0x76>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	da2e      	bge.n	800442c <_puts_r+0x9c>
 80043ce:	4622      	mov	r2, r4
 80043d0:	210a      	movs	r1, #10
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 f87b 	bl	80044ce <__swbuf_r>
 80043d8:	3001      	adds	r0, #1
 80043da:	d007      	beq.n	80043ec <_puts_r+0x5c>
 80043dc:	250a      	movs	r5, #10
 80043de:	e007      	b.n	80043f0 <_puts_r+0x60>
 80043e0:	4621      	mov	r1, r4
 80043e2:	4628      	mov	r0, r5
 80043e4:	f000 f8b0 	bl	8004548 <__swsetup_r>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d0e7      	beq.n	80043bc <_puts_r+0x2c>
 80043ec:	f04f 35ff 	mov.w	r5, #4294967295
 80043f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043f2:	07da      	lsls	r2, r3, #31
 80043f4:	d405      	bmi.n	8004402 <_puts_r+0x72>
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	059b      	lsls	r3, r3, #22
 80043fa:	d402      	bmi.n	8004402 <_puts_r+0x72>
 80043fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043fe:	f000 f975 	bl	80046ec <__retarget_lock_release_recursive>
 8004402:	4628      	mov	r0, r5
 8004404:	bd70      	pop	{r4, r5, r6, pc}
 8004406:	2b00      	cmp	r3, #0
 8004408:	da04      	bge.n	8004414 <_puts_r+0x84>
 800440a:	69a2      	ldr	r2, [r4, #24]
 800440c:	429a      	cmp	r2, r3
 800440e:	dc06      	bgt.n	800441e <_puts_r+0x8e>
 8004410:	290a      	cmp	r1, #10
 8004412:	d004      	beq.n	800441e <_puts_r+0x8e>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	6022      	str	r2, [r4, #0]
 800441a:	7019      	strb	r1, [r3, #0]
 800441c:	e7cf      	b.n	80043be <_puts_r+0x2e>
 800441e:	4622      	mov	r2, r4
 8004420:	4628      	mov	r0, r5
 8004422:	f000 f854 	bl	80044ce <__swbuf_r>
 8004426:	3001      	adds	r0, #1
 8004428:	d1c9      	bne.n	80043be <_puts_r+0x2e>
 800442a:	e7df      	b.n	80043ec <_puts_r+0x5c>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	250a      	movs	r5, #10
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	6022      	str	r2, [r4, #0]
 8004434:	701d      	strb	r5, [r3, #0]
 8004436:	e7db      	b.n	80043f0 <_puts_r+0x60>

08004438 <puts>:
 8004438:	4b02      	ldr	r3, [pc, #8]	; (8004444 <puts+0xc>)
 800443a:	4601      	mov	r1, r0
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	f7ff bfa7 	b.w	8004390 <_puts_r>
 8004442:	bf00      	nop
 8004444:	20000078 	.word	0x20000078

08004448 <__sread>:
 8004448:	b510      	push	{r4, lr}
 800444a:	460c      	mov	r4, r1
 800444c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004450:	f000 f8fc 	bl	800464c <_read_r>
 8004454:	2800      	cmp	r0, #0
 8004456:	bfab      	itete	ge
 8004458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800445a:	89a3      	ldrhlt	r3, [r4, #12]
 800445c:	181b      	addge	r3, r3, r0
 800445e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004462:	bfac      	ite	ge
 8004464:	6563      	strge	r3, [r4, #84]	; 0x54
 8004466:	81a3      	strhlt	r3, [r4, #12]
 8004468:	bd10      	pop	{r4, pc}

0800446a <__swrite>:
 800446a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800446e:	461f      	mov	r7, r3
 8004470:	898b      	ldrh	r3, [r1, #12]
 8004472:	05db      	lsls	r3, r3, #23
 8004474:	4605      	mov	r5, r0
 8004476:	460c      	mov	r4, r1
 8004478:	4616      	mov	r6, r2
 800447a:	d505      	bpl.n	8004488 <__swrite+0x1e>
 800447c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004480:	2302      	movs	r3, #2
 8004482:	2200      	movs	r2, #0
 8004484:	f000 f8d0 	bl	8004628 <_lseek_r>
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800448e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004492:	81a3      	strh	r3, [r4, #12]
 8004494:	4632      	mov	r2, r6
 8004496:	463b      	mov	r3, r7
 8004498:	4628      	mov	r0, r5
 800449a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800449e:	f000 b8e7 	b.w	8004670 <_write_r>

080044a2 <__sseek>:
 80044a2:	b510      	push	{r4, lr}
 80044a4:	460c      	mov	r4, r1
 80044a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044aa:	f000 f8bd 	bl	8004628 <_lseek_r>
 80044ae:	1c43      	adds	r3, r0, #1
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	bf15      	itete	ne
 80044b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80044b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044be:	81a3      	strheq	r3, [r4, #12]
 80044c0:	bf18      	it	ne
 80044c2:	81a3      	strhne	r3, [r4, #12]
 80044c4:	bd10      	pop	{r4, pc}

080044c6 <__sclose>:
 80044c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ca:	f000 b89d 	b.w	8004608 <_close_r>

080044ce <__swbuf_r>:
 80044ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d0:	460e      	mov	r6, r1
 80044d2:	4614      	mov	r4, r2
 80044d4:	4605      	mov	r5, r0
 80044d6:	b118      	cbz	r0, 80044e0 <__swbuf_r+0x12>
 80044d8:	6a03      	ldr	r3, [r0, #32]
 80044da:	b90b      	cbnz	r3, 80044e0 <__swbuf_r+0x12>
 80044dc:	f7ff ff10 	bl	8004300 <__sinit>
 80044e0:	69a3      	ldr	r3, [r4, #24]
 80044e2:	60a3      	str	r3, [r4, #8]
 80044e4:	89a3      	ldrh	r3, [r4, #12]
 80044e6:	071a      	lsls	r2, r3, #28
 80044e8:	d525      	bpl.n	8004536 <__swbuf_r+0x68>
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	b31b      	cbz	r3, 8004536 <__swbuf_r+0x68>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	6922      	ldr	r2, [r4, #16]
 80044f2:	1a98      	subs	r0, r3, r2
 80044f4:	6963      	ldr	r3, [r4, #20]
 80044f6:	b2f6      	uxtb	r6, r6
 80044f8:	4283      	cmp	r3, r0
 80044fa:	4637      	mov	r7, r6
 80044fc:	dc04      	bgt.n	8004508 <__swbuf_r+0x3a>
 80044fe:	4621      	mov	r1, r4
 8004500:	4628      	mov	r0, r5
 8004502:	f000 fd47 	bl	8004f94 <_fflush_r>
 8004506:	b9e0      	cbnz	r0, 8004542 <__swbuf_r+0x74>
 8004508:	68a3      	ldr	r3, [r4, #8]
 800450a:	3b01      	subs	r3, #1
 800450c:	60a3      	str	r3, [r4, #8]
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	6022      	str	r2, [r4, #0]
 8004514:	701e      	strb	r6, [r3, #0]
 8004516:	6962      	ldr	r2, [r4, #20]
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	429a      	cmp	r2, r3
 800451c:	d004      	beq.n	8004528 <__swbuf_r+0x5a>
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	07db      	lsls	r3, r3, #31
 8004522:	d506      	bpl.n	8004532 <__swbuf_r+0x64>
 8004524:	2e0a      	cmp	r6, #10
 8004526:	d104      	bne.n	8004532 <__swbuf_r+0x64>
 8004528:	4621      	mov	r1, r4
 800452a:	4628      	mov	r0, r5
 800452c:	f000 fd32 	bl	8004f94 <_fflush_r>
 8004530:	b938      	cbnz	r0, 8004542 <__swbuf_r+0x74>
 8004532:	4638      	mov	r0, r7
 8004534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004536:	4621      	mov	r1, r4
 8004538:	4628      	mov	r0, r5
 800453a:	f000 f805 	bl	8004548 <__swsetup_r>
 800453e:	2800      	cmp	r0, #0
 8004540:	d0d5      	beq.n	80044ee <__swbuf_r+0x20>
 8004542:	f04f 37ff 	mov.w	r7, #4294967295
 8004546:	e7f4      	b.n	8004532 <__swbuf_r+0x64>

08004548 <__swsetup_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <__swsetup_r+0xac>)
 800454c:	4605      	mov	r5, r0
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	460c      	mov	r4, r1
 8004552:	b118      	cbz	r0, 800455c <__swsetup_r+0x14>
 8004554:	6a03      	ldr	r3, [r0, #32]
 8004556:	b90b      	cbnz	r3, 800455c <__swsetup_r+0x14>
 8004558:	f7ff fed2 	bl	8004300 <__sinit>
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004562:	0718      	lsls	r0, r3, #28
 8004564:	d422      	bmi.n	80045ac <__swsetup_r+0x64>
 8004566:	06d9      	lsls	r1, r3, #27
 8004568:	d407      	bmi.n	800457a <__swsetup_r+0x32>
 800456a:	2309      	movs	r3, #9
 800456c:	602b      	str	r3, [r5, #0]
 800456e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004572:	81a3      	strh	r3, [r4, #12]
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	e034      	b.n	80045e4 <__swsetup_r+0x9c>
 800457a:	0758      	lsls	r0, r3, #29
 800457c:	d512      	bpl.n	80045a4 <__swsetup_r+0x5c>
 800457e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004580:	b141      	cbz	r1, 8004594 <__swsetup_r+0x4c>
 8004582:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004586:	4299      	cmp	r1, r3
 8004588:	d002      	beq.n	8004590 <__swsetup_r+0x48>
 800458a:	4628      	mov	r0, r5
 800458c:	f000 f8b0 	bl	80046f0 <_free_r>
 8004590:	2300      	movs	r3, #0
 8004592:	6363      	str	r3, [r4, #52]	; 0x34
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800459a:	81a3      	strh	r3, [r4, #12]
 800459c:	2300      	movs	r3, #0
 800459e:	6063      	str	r3, [r4, #4]
 80045a0:	6923      	ldr	r3, [r4, #16]
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	f043 0308 	orr.w	r3, r3, #8
 80045aa:	81a3      	strh	r3, [r4, #12]
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	b94b      	cbnz	r3, 80045c4 <__swsetup_r+0x7c>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ba:	d003      	beq.n	80045c4 <__swsetup_r+0x7c>
 80045bc:	4621      	mov	r1, r4
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 fd36 	bl	8005030 <__smakebuf_r>
 80045c4:	89a0      	ldrh	r0, [r4, #12]
 80045c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045ca:	f010 0301 	ands.w	r3, r0, #1
 80045ce:	d00a      	beq.n	80045e6 <__swsetup_r+0x9e>
 80045d0:	2300      	movs	r3, #0
 80045d2:	60a3      	str	r3, [r4, #8]
 80045d4:	6963      	ldr	r3, [r4, #20]
 80045d6:	425b      	negs	r3, r3
 80045d8:	61a3      	str	r3, [r4, #24]
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	b943      	cbnz	r3, 80045f0 <__swsetup_r+0xa8>
 80045de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045e2:	d1c4      	bne.n	800456e <__swsetup_r+0x26>
 80045e4:	bd38      	pop	{r3, r4, r5, pc}
 80045e6:	0781      	lsls	r1, r0, #30
 80045e8:	bf58      	it	pl
 80045ea:	6963      	ldrpl	r3, [r4, #20]
 80045ec:	60a3      	str	r3, [r4, #8]
 80045ee:	e7f4      	b.n	80045da <__swsetup_r+0x92>
 80045f0:	2000      	movs	r0, #0
 80045f2:	e7f7      	b.n	80045e4 <__swsetup_r+0x9c>
 80045f4:	20000078 	.word	0x20000078

080045f8 <memset>:
 80045f8:	4402      	add	r2, r0
 80045fa:	4603      	mov	r3, r0
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d100      	bne.n	8004602 <memset+0xa>
 8004600:	4770      	bx	lr
 8004602:	f803 1b01 	strb.w	r1, [r3], #1
 8004606:	e7f9      	b.n	80045fc <memset+0x4>

08004608 <_close_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d06      	ldr	r5, [pc, #24]	; (8004624 <_close_r+0x1c>)
 800460c:	2300      	movs	r3, #0
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fc fc2f 	bl	8000e76 <_close>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_close_r+0x1a>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_close_r+0x1a>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	20002604 	.word	0x20002604

08004628 <_lseek_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4d07      	ldr	r5, [pc, #28]	; (8004648 <_lseek_r+0x20>)
 800462c:	4604      	mov	r4, r0
 800462e:	4608      	mov	r0, r1
 8004630:	4611      	mov	r1, r2
 8004632:	2200      	movs	r2, #0
 8004634:	602a      	str	r2, [r5, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	f7fc fc44 	bl	8000ec4 <_lseek>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_lseek_r+0x1e>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	b103      	cbz	r3, 8004646 <_lseek_r+0x1e>
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20002604 	.word	0x20002604

0800464c <_read_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	4d07      	ldr	r5, [pc, #28]	; (800466c <_read_r+0x20>)
 8004650:	4604      	mov	r4, r0
 8004652:	4608      	mov	r0, r1
 8004654:	4611      	mov	r1, r2
 8004656:	2200      	movs	r2, #0
 8004658:	602a      	str	r2, [r5, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	f7fc fbee 	bl	8000e3c <_read>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d102      	bne.n	800466a <_read_r+0x1e>
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	b103      	cbz	r3, 800466a <_read_r+0x1e>
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	bd38      	pop	{r3, r4, r5, pc}
 800466c:	20002604 	.word	0x20002604

08004670 <_write_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4d07      	ldr	r5, [pc, #28]	; (8004690 <_write_r+0x20>)
 8004674:	4604      	mov	r4, r0
 8004676:	4608      	mov	r0, r1
 8004678:	4611      	mov	r1, r2
 800467a:	2200      	movs	r2, #0
 800467c:	602a      	str	r2, [r5, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	f7fc f9d2 	bl	8000a28 <_write>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d102      	bne.n	800468e <_write_r+0x1e>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	b103      	cbz	r3, 800468e <_write_r+0x1e>
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	20002604 	.word	0x20002604

08004694 <__errno>:
 8004694:	4b01      	ldr	r3, [pc, #4]	; (800469c <__errno+0x8>)
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000078 	.word	0x20000078

080046a0 <__libc_init_array>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	4d0d      	ldr	r5, [pc, #52]	; (80046d8 <__libc_init_array+0x38>)
 80046a4:	4c0d      	ldr	r4, [pc, #52]	; (80046dc <__libc_init_array+0x3c>)
 80046a6:	1b64      	subs	r4, r4, r5
 80046a8:	10a4      	asrs	r4, r4, #2
 80046aa:	2600      	movs	r6, #0
 80046ac:	42a6      	cmp	r6, r4
 80046ae:	d109      	bne.n	80046c4 <__libc_init_array+0x24>
 80046b0:	4d0b      	ldr	r5, [pc, #44]	; (80046e0 <__libc_init_array+0x40>)
 80046b2:	4c0c      	ldr	r4, [pc, #48]	; (80046e4 <__libc_init_array+0x44>)
 80046b4:	f000 fd2a 	bl	800510c <_init>
 80046b8:	1b64      	subs	r4, r4, r5
 80046ba:	10a4      	asrs	r4, r4, #2
 80046bc:	2600      	movs	r6, #0
 80046be:	42a6      	cmp	r6, r4
 80046c0:	d105      	bne.n	80046ce <__libc_init_array+0x2e>
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c8:	4798      	blx	r3
 80046ca:	3601      	adds	r6, #1
 80046cc:	e7ee      	b.n	80046ac <__libc_init_array+0xc>
 80046ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d2:	4798      	blx	r3
 80046d4:	3601      	adds	r6, #1
 80046d6:	e7f2      	b.n	80046be <__libc_init_array+0x1e>
 80046d8:	080053c0 	.word	0x080053c0
 80046dc:	080053c0 	.word	0x080053c0
 80046e0:	080053c0 	.word	0x080053c0
 80046e4:	080053c4 	.word	0x080053c4

080046e8 <__retarget_lock_init_recursive>:
 80046e8:	4770      	bx	lr

080046ea <__retarget_lock_acquire_recursive>:
 80046ea:	4770      	bx	lr

080046ec <__retarget_lock_release_recursive>:
 80046ec:	4770      	bx	lr
	...

080046f0 <_free_r>:
 80046f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046f2:	2900      	cmp	r1, #0
 80046f4:	d044      	beq.n	8004780 <_free_r+0x90>
 80046f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046fa:	9001      	str	r0, [sp, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004702:	bfb8      	it	lt
 8004704:	18e4      	addlt	r4, r4, r3
 8004706:	f000 f8df 	bl	80048c8 <__malloc_lock>
 800470a:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <_free_r+0x94>)
 800470c:	9801      	ldr	r0, [sp, #4]
 800470e:	6813      	ldr	r3, [r2, #0]
 8004710:	b933      	cbnz	r3, 8004720 <_free_r+0x30>
 8004712:	6063      	str	r3, [r4, #4]
 8004714:	6014      	str	r4, [r2, #0]
 8004716:	b003      	add	sp, #12
 8004718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800471c:	f000 b8da 	b.w	80048d4 <__malloc_unlock>
 8004720:	42a3      	cmp	r3, r4
 8004722:	d908      	bls.n	8004736 <_free_r+0x46>
 8004724:	6825      	ldr	r5, [r4, #0]
 8004726:	1961      	adds	r1, r4, r5
 8004728:	428b      	cmp	r3, r1
 800472a:	bf01      	itttt	eq
 800472c:	6819      	ldreq	r1, [r3, #0]
 800472e:	685b      	ldreq	r3, [r3, #4]
 8004730:	1949      	addeq	r1, r1, r5
 8004732:	6021      	streq	r1, [r4, #0]
 8004734:	e7ed      	b.n	8004712 <_free_r+0x22>
 8004736:	461a      	mov	r2, r3
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	b10b      	cbz	r3, 8004740 <_free_r+0x50>
 800473c:	42a3      	cmp	r3, r4
 800473e:	d9fa      	bls.n	8004736 <_free_r+0x46>
 8004740:	6811      	ldr	r1, [r2, #0]
 8004742:	1855      	adds	r5, r2, r1
 8004744:	42a5      	cmp	r5, r4
 8004746:	d10b      	bne.n	8004760 <_free_r+0x70>
 8004748:	6824      	ldr	r4, [r4, #0]
 800474a:	4421      	add	r1, r4
 800474c:	1854      	adds	r4, r2, r1
 800474e:	42a3      	cmp	r3, r4
 8004750:	6011      	str	r1, [r2, #0]
 8004752:	d1e0      	bne.n	8004716 <_free_r+0x26>
 8004754:	681c      	ldr	r4, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	6053      	str	r3, [r2, #4]
 800475a:	440c      	add	r4, r1
 800475c:	6014      	str	r4, [r2, #0]
 800475e:	e7da      	b.n	8004716 <_free_r+0x26>
 8004760:	d902      	bls.n	8004768 <_free_r+0x78>
 8004762:	230c      	movs	r3, #12
 8004764:	6003      	str	r3, [r0, #0]
 8004766:	e7d6      	b.n	8004716 <_free_r+0x26>
 8004768:	6825      	ldr	r5, [r4, #0]
 800476a:	1961      	adds	r1, r4, r5
 800476c:	428b      	cmp	r3, r1
 800476e:	bf04      	itt	eq
 8004770:	6819      	ldreq	r1, [r3, #0]
 8004772:	685b      	ldreq	r3, [r3, #4]
 8004774:	6063      	str	r3, [r4, #4]
 8004776:	bf04      	itt	eq
 8004778:	1949      	addeq	r1, r1, r5
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	6054      	str	r4, [r2, #4]
 800477e:	e7ca      	b.n	8004716 <_free_r+0x26>
 8004780:	b003      	add	sp, #12
 8004782:	bd30      	pop	{r4, r5, pc}
 8004784:	2000260c 	.word	0x2000260c

08004788 <sbrk_aligned>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	4e0e      	ldr	r6, [pc, #56]	; (80047c4 <sbrk_aligned+0x3c>)
 800478c:	460c      	mov	r4, r1
 800478e:	6831      	ldr	r1, [r6, #0]
 8004790:	4605      	mov	r5, r0
 8004792:	b911      	cbnz	r1, 800479a <sbrk_aligned+0x12>
 8004794:	f000 fcaa 	bl	80050ec <_sbrk_r>
 8004798:	6030      	str	r0, [r6, #0]
 800479a:	4621      	mov	r1, r4
 800479c:	4628      	mov	r0, r5
 800479e:	f000 fca5 	bl	80050ec <_sbrk_r>
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	d00a      	beq.n	80047bc <sbrk_aligned+0x34>
 80047a6:	1cc4      	adds	r4, r0, #3
 80047a8:	f024 0403 	bic.w	r4, r4, #3
 80047ac:	42a0      	cmp	r0, r4
 80047ae:	d007      	beq.n	80047c0 <sbrk_aligned+0x38>
 80047b0:	1a21      	subs	r1, r4, r0
 80047b2:	4628      	mov	r0, r5
 80047b4:	f000 fc9a 	bl	80050ec <_sbrk_r>
 80047b8:	3001      	adds	r0, #1
 80047ba:	d101      	bne.n	80047c0 <sbrk_aligned+0x38>
 80047bc:	f04f 34ff 	mov.w	r4, #4294967295
 80047c0:	4620      	mov	r0, r4
 80047c2:	bd70      	pop	{r4, r5, r6, pc}
 80047c4:	20002610 	.word	0x20002610

080047c8 <_malloc_r>:
 80047c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047cc:	1ccd      	adds	r5, r1, #3
 80047ce:	f025 0503 	bic.w	r5, r5, #3
 80047d2:	3508      	adds	r5, #8
 80047d4:	2d0c      	cmp	r5, #12
 80047d6:	bf38      	it	cc
 80047d8:	250c      	movcc	r5, #12
 80047da:	2d00      	cmp	r5, #0
 80047dc:	4607      	mov	r7, r0
 80047de:	db01      	blt.n	80047e4 <_malloc_r+0x1c>
 80047e0:	42a9      	cmp	r1, r5
 80047e2:	d905      	bls.n	80047f0 <_malloc_r+0x28>
 80047e4:	230c      	movs	r3, #12
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	2600      	movs	r6, #0
 80047ea:	4630      	mov	r0, r6
 80047ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80048c4 <_malloc_r+0xfc>
 80047f4:	f000 f868 	bl	80048c8 <__malloc_lock>
 80047f8:	f8d8 3000 	ldr.w	r3, [r8]
 80047fc:	461c      	mov	r4, r3
 80047fe:	bb5c      	cbnz	r4, 8004858 <_malloc_r+0x90>
 8004800:	4629      	mov	r1, r5
 8004802:	4638      	mov	r0, r7
 8004804:	f7ff ffc0 	bl	8004788 <sbrk_aligned>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	4604      	mov	r4, r0
 800480c:	d155      	bne.n	80048ba <_malloc_r+0xf2>
 800480e:	f8d8 4000 	ldr.w	r4, [r8]
 8004812:	4626      	mov	r6, r4
 8004814:	2e00      	cmp	r6, #0
 8004816:	d145      	bne.n	80048a4 <_malloc_r+0xdc>
 8004818:	2c00      	cmp	r4, #0
 800481a:	d048      	beq.n	80048ae <_malloc_r+0xe6>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	4631      	mov	r1, r6
 8004820:	4638      	mov	r0, r7
 8004822:	eb04 0903 	add.w	r9, r4, r3
 8004826:	f000 fc61 	bl	80050ec <_sbrk_r>
 800482a:	4581      	cmp	r9, r0
 800482c:	d13f      	bne.n	80048ae <_malloc_r+0xe6>
 800482e:	6821      	ldr	r1, [r4, #0]
 8004830:	1a6d      	subs	r5, r5, r1
 8004832:	4629      	mov	r1, r5
 8004834:	4638      	mov	r0, r7
 8004836:	f7ff ffa7 	bl	8004788 <sbrk_aligned>
 800483a:	3001      	adds	r0, #1
 800483c:	d037      	beq.n	80048ae <_malloc_r+0xe6>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	442b      	add	r3, r5
 8004842:	6023      	str	r3, [r4, #0]
 8004844:	f8d8 3000 	ldr.w	r3, [r8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d038      	beq.n	80048be <_malloc_r+0xf6>
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	42a2      	cmp	r2, r4
 8004850:	d12b      	bne.n	80048aa <_malloc_r+0xe2>
 8004852:	2200      	movs	r2, #0
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	e00f      	b.n	8004878 <_malloc_r+0xb0>
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	1b52      	subs	r2, r2, r5
 800485c:	d41f      	bmi.n	800489e <_malloc_r+0xd6>
 800485e:	2a0b      	cmp	r2, #11
 8004860:	d917      	bls.n	8004892 <_malloc_r+0xca>
 8004862:	1961      	adds	r1, r4, r5
 8004864:	42a3      	cmp	r3, r4
 8004866:	6025      	str	r5, [r4, #0]
 8004868:	bf18      	it	ne
 800486a:	6059      	strne	r1, [r3, #4]
 800486c:	6863      	ldr	r3, [r4, #4]
 800486e:	bf08      	it	eq
 8004870:	f8c8 1000 	streq.w	r1, [r8]
 8004874:	5162      	str	r2, [r4, r5]
 8004876:	604b      	str	r3, [r1, #4]
 8004878:	4638      	mov	r0, r7
 800487a:	f104 060b 	add.w	r6, r4, #11
 800487e:	f000 f829 	bl	80048d4 <__malloc_unlock>
 8004882:	f026 0607 	bic.w	r6, r6, #7
 8004886:	1d23      	adds	r3, r4, #4
 8004888:	1af2      	subs	r2, r6, r3
 800488a:	d0ae      	beq.n	80047ea <_malloc_r+0x22>
 800488c:	1b9b      	subs	r3, r3, r6
 800488e:	50a3      	str	r3, [r4, r2]
 8004890:	e7ab      	b.n	80047ea <_malloc_r+0x22>
 8004892:	42a3      	cmp	r3, r4
 8004894:	6862      	ldr	r2, [r4, #4]
 8004896:	d1dd      	bne.n	8004854 <_malloc_r+0x8c>
 8004898:	f8c8 2000 	str.w	r2, [r8]
 800489c:	e7ec      	b.n	8004878 <_malloc_r+0xb0>
 800489e:	4623      	mov	r3, r4
 80048a0:	6864      	ldr	r4, [r4, #4]
 80048a2:	e7ac      	b.n	80047fe <_malloc_r+0x36>
 80048a4:	4634      	mov	r4, r6
 80048a6:	6876      	ldr	r6, [r6, #4]
 80048a8:	e7b4      	b.n	8004814 <_malloc_r+0x4c>
 80048aa:	4613      	mov	r3, r2
 80048ac:	e7cc      	b.n	8004848 <_malloc_r+0x80>
 80048ae:	230c      	movs	r3, #12
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4638      	mov	r0, r7
 80048b4:	f000 f80e 	bl	80048d4 <__malloc_unlock>
 80048b8:	e797      	b.n	80047ea <_malloc_r+0x22>
 80048ba:	6025      	str	r5, [r4, #0]
 80048bc:	e7dc      	b.n	8004878 <_malloc_r+0xb0>
 80048be:	605b      	str	r3, [r3, #4]
 80048c0:	deff      	udf	#255	; 0xff
 80048c2:	bf00      	nop
 80048c4:	2000260c 	.word	0x2000260c

080048c8 <__malloc_lock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	; (80048d0 <__malloc_lock+0x8>)
 80048ca:	f7ff bf0e 	b.w	80046ea <__retarget_lock_acquire_recursive>
 80048ce:	bf00      	nop
 80048d0:	20002608 	.word	0x20002608

080048d4 <__malloc_unlock>:
 80048d4:	4801      	ldr	r0, [pc, #4]	; (80048dc <__malloc_unlock+0x8>)
 80048d6:	f7ff bf09 	b.w	80046ec <__retarget_lock_release_recursive>
 80048da:	bf00      	nop
 80048dc:	20002608 	.word	0x20002608

080048e0 <__sfputc_r>:
 80048e0:	6893      	ldr	r3, [r2, #8]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	b410      	push	{r4}
 80048e8:	6093      	str	r3, [r2, #8]
 80048ea:	da08      	bge.n	80048fe <__sfputc_r+0x1e>
 80048ec:	6994      	ldr	r4, [r2, #24]
 80048ee:	42a3      	cmp	r3, r4
 80048f0:	db01      	blt.n	80048f6 <__sfputc_r+0x16>
 80048f2:	290a      	cmp	r1, #10
 80048f4:	d103      	bne.n	80048fe <__sfputc_r+0x1e>
 80048f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048fa:	f7ff bde8 	b.w	80044ce <__swbuf_r>
 80048fe:	6813      	ldr	r3, [r2, #0]
 8004900:	1c58      	adds	r0, r3, #1
 8004902:	6010      	str	r0, [r2, #0]
 8004904:	7019      	strb	r1, [r3, #0]
 8004906:	4608      	mov	r0, r1
 8004908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800490c:	4770      	bx	lr

0800490e <__sfputs_r>:
 800490e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004910:	4606      	mov	r6, r0
 8004912:	460f      	mov	r7, r1
 8004914:	4614      	mov	r4, r2
 8004916:	18d5      	adds	r5, r2, r3
 8004918:	42ac      	cmp	r4, r5
 800491a:	d101      	bne.n	8004920 <__sfputs_r+0x12>
 800491c:	2000      	movs	r0, #0
 800491e:	e007      	b.n	8004930 <__sfputs_r+0x22>
 8004920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004924:	463a      	mov	r2, r7
 8004926:	4630      	mov	r0, r6
 8004928:	f7ff ffda 	bl	80048e0 <__sfputc_r>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d1f3      	bne.n	8004918 <__sfputs_r+0xa>
 8004930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004934 <_vfiprintf_r>:
 8004934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004938:	460d      	mov	r5, r1
 800493a:	b09d      	sub	sp, #116	; 0x74
 800493c:	4614      	mov	r4, r2
 800493e:	4698      	mov	r8, r3
 8004940:	4606      	mov	r6, r0
 8004942:	b118      	cbz	r0, 800494c <_vfiprintf_r+0x18>
 8004944:	6a03      	ldr	r3, [r0, #32]
 8004946:	b90b      	cbnz	r3, 800494c <_vfiprintf_r+0x18>
 8004948:	f7ff fcda 	bl	8004300 <__sinit>
 800494c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800494e:	07d9      	lsls	r1, r3, #31
 8004950:	d405      	bmi.n	800495e <_vfiprintf_r+0x2a>
 8004952:	89ab      	ldrh	r3, [r5, #12]
 8004954:	059a      	lsls	r2, r3, #22
 8004956:	d402      	bmi.n	800495e <_vfiprintf_r+0x2a>
 8004958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800495a:	f7ff fec6 	bl	80046ea <__retarget_lock_acquire_recursive>
 800495e:	89ab      	ldrh	r3, [r5, #12]
 8004960:	071b      	lsls	r3, r3, #28
 8004962:	d501      	bpl.n	8004968 <_vfiprintf_r+0x34>
 8004964:	692b      	ldr	r3, [r5, #16]
 8004966:	b99b      	cbnz	r3, 8004990 <_vfiprintf_r+0x5c>
 8004968:	4629      	mov	r1, r5
 800496a:	4630      	mov	r0, r6
 800496c:	f7ff fdec 	bl	8004548 <__swsetup_r>
 8004970:	b170      	cbz	r0, 8004990 <_vfiprintf_r+0x5c>
 8004972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004974:	07dc      	lsls	r4, r3, #31
 8004976:	d504      	bpl.n	8004982 <_vfiprintf_r+0x4e>
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	b01d      	add	sp, #116	; 0x74
 800497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004982:	89ab      	ldrh	r3, [r5, #12]
 8004984:	0598      	lsls	r0, r3, #22
 8004986:	d4f7      	bmi.n	8004978 <_vfiprintf_r+0x44>
 8004988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800498a:	f7ff feaf 	bl	80046ec <__retarget_lock_release_recursive>
 800498e:	e7f3      	b.n	8004978 <_vfiprintf_r+0x44>
 8004990:	2300      	movs	r3, #0
 8004992:	9309      	str	r3, [sp, #36]	; 0x24
 8004994:	2320      	movs	r3, #32
 8004996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800499a:	f8cd 800c 	str.w	r8, [sp, #12]
 800499e:	2330      	movs	r3, #48	; 0x30
 80049a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004b54 <_vfiprintf_r+0x220>
 80049a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049a8:	f04f 0901 	mov.w	r9, #1
 80049ac:	4623      	mov	r3, r4
 80049ae:	469a      	mov	sl, r3
 80049b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049b4:	b10a      	cbz	r2, 80049ba <_vfiprintf_r+0x86>
 80049b6:	2a25      	cmp	r2, #37	; 0x25
 80049b8:	d1f9      	bne.n	80049ae <_vfiprintf_r+0x7a>
 80049ba:	ebba 0b04 	subs.w	fp, sl, r4
 80049be:	d00b      	beq.n	80049d8 <_vfiprintf_r+0xa4>
 80049c0:	465b      	mov	r3, fp
 80049c2:	4622      	mov	r2, r4
 80049c4:	4629      	mov	r1, r5
 80049c6:	4630      	mov	r0, r6
 80049c8:	f7ff ffa1 	bl	800490e <__sfputs_r>
 80049cc:	3001      	adds	r0, #1
 80049ce:	f000 80a9 	beq.w	8004b24 <_vfiprintf_r+0x1f0>
 80049d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049d4:	445a      	add	r2, fp
 80049d6:	9209      	str	r2, [sp, #36]	; 0x24
 80049d8:	f89a 3000 	ldrb.w	r3, [sl]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a1 	beq.w	8004b24 <_vfiprintf_r+0x1f0>
 80049e2:	2300      	movs	r3, #0
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295
 80049e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ec:	f10a 0a01 	add.w	sl, sl, #1
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	9307      	str	r3, [sp, #28]
 80049f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049f8:	931a      	str	r3, [sp, #104]	; 0x68
 80049fa:	4654      	mov	r4, sl
 80049fc:	2205      	movs	r2, #5
 80049fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a02:	4854      	ldr	r0, [pc, #336]	; (8004b54 <_vfiprintf_r+0x220>)
 8004a04:	f7fb fc04 	bl	8000210 <memchr>
 8004a08:	9a04      	ldr	r2, [sp, #16]
 8004a0a:	b9d8      	cbnz	r0, 8004a44 <_vfiprintf_r+0x110>
 8004a0c:	06d1      	lsls	r1, r2, #27
 8004a0e:	bf44      	itt	mi
 8004a10:	2320      	movmi	r3, #32
 8004a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a16:	0713      	lsls	r3, r2, #28
 8004a18:	bf44      	itt	mi
 8004a1a:	232b      	movmi	r3, #43	; 0x2b
 8004a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a20:	f89a 3000 	ldrb.w	r3, [sl]
 8004a24:	2b2a      	cmp	r3, #42	; 0x2a
 8004a26:	d015      	beq.n	8004a54 <_vfiprintf_r+0x120>
 8004a28:	9a07      	ldr	r2, [sp, #28]
 8004a2a:	4654      	mov	r4, sl
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f04f 0c0a 	mov.w	ip, #10
 8004a32:	4621      	mov	r1, r4
 8004a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a38:	3b30      	subs	r3, #48	; 0x30
 8004a3a:	2b09      	cmp	r3, #9
 8004a3c:	d94d      	bls.n	8004ada <_vfiprintf_r+0x1a6>
 8004a3e:	b1b0      	cbz	r0, 8004a6e <_vfiprintf_r+0x13a>
 8004a40:	9207      	str	r2, [sp, #28]
 8004a42:	e014      	b.n	8004a6e <_vfiprintf_r+0x13a>
 8004a44:	eba0 0308 	sub.w	r3, r0, r8
 8004a48:	fa09 f303 	lsl.w	r3, r9, r3
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	9304      	str	r3, [sp, #16]
 8004a50:	46a2      	mov	sl, r4
 8004a52:	e7d2      	b.n	80049fa <_vfiprintf_r+0xc6>
 8004a54:	9b03      	ldr	r3, [sp, #12]
 8004a56:	1d19      	adds	r1, r3, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	9103      	str	r1, [sp, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bfbb      	ittet	lt
 8004a60:	425b      	neglt	r3, r3
 8004a62:	f042 0202 	orrlt.w	r2, r2, #2
 8004a66:	9307      	strge	r3, [sp, #28]
 8004a68:	9307      	strlt	r3, [sp, #28]
 8004a6a:	bfb8      	it	lt
 8004a6c:	9204      	strlt	r2, [sp, #16]
 8004a6e:	7823      	ldrb	r3, [r4, #0]
 8004a70:	2b2e      	cmp	r3, #46	; 0x2e
 8004a72:	d10c      	bne.n	8004a8e <_vfiprintf_r+0x15a>
 8004a74:	7863      	ldrb	r3, [r4, #1]
 8004a76:	2b2a      	cmp	r3, #42	; 0x2a
 8004a78:	d134      	bne.n	8004ae4 <_vfiprintf_r+0x1b0>
 8004a7a:	9b03      	ldr	r3, [sp, #12]
 8004a7c:	1d1a      	adds	r2, r3, #4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	9203      	str	r2, [sp, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bfb8      	it	lt
 8004a86:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a8a:	3402      	adds	r4, #2
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004b64 <_vfiprintf_r+0x230>
 8004a92:	7821      	ldrb	r1, [r4, #0]
 8004a94:	2203      	movs	r2, #3
 8004a96:	4650      	mov	r0, sl
 8004a98:	f7fb fbba 	bl	8000210 <memchr>
 8004a9c:	b138      	cbz	r0, 8004aae <_vfiprintf_r+0x17a>
 8004a9e:	9b04      	ldr	r3, [sp, #16]
 8004aa0:	eba0 000a 	sub.w	r0, r0, sl
 8004aa4:	2240      	movs	r2, #64	; 0x40
 8004aa6:	4082      	lsls	r2, r0
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	3401      	adds	r4, #1
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab2:	4829      	ldr	r0, [pc, #164]	; (8004b58 <_vfiprintf_r+0x224>)
 8004ab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ab8:	2206      	movs	r2, #6
 8004aba:	f7fb fba9 	bl	8000210 <memchr>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d03f      	beq.n	8004b42 <_vfiprintf_r+0x20e>
 8004ac2:	4b26      	ldr	r3, [pc, #152]	; (8004b5c <_vfiprintf_r+0x228>)
 8004ac4:	bb1b      	cbnz	r3, 8004b0e <_vfiprintf_r+0x1da>
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	3307      	adds	r3, #7
 8004aca:	f023 0307 	bic.w	r3, r3, #7
 8004ace:	3308      	adds	r3, #8
 8004ad0:	9303      	str	r3, [sp, #12]
 8004ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad4:	443b      	add	r3, r7
 8004ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ad8:	e768      	b.n	80049ac <_vfiprintf_r+0x78>
 8004ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ade:	460c      	mov	r4, r1
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	e7a6      	b.n	8004a32 <_vfiprintf_r+0xfe>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	3401      	adds	r4, #1
 8004ae8:	9305      	str	r3, [sp, #20]
 8004aea:	4619      	mov	r1, r3
 8004aec:	f04f 0c0a 	mov.w	ip, #10
 8004af0:	4620      	mov	r0, r4
 8004af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004af6:	3a30      	subs	r2, #48	; 0x30
 8004af8:	2a09      	cmp	r2, #9
 8004afa:	d903      	bls.n	8004b04 <_vfiprintf_r+0x1d0>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0c6      	beq.n	8004a8e <_vfiprintf_r+0x15a>
 8004b00:	9105      	str	r1, [sp, #20]
 8004b02:	e7c4      	b.n	8004a8e <_vfiprintf_r+0x15a>
 8004b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b08:	4604      	mov	r4, r0
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e7f0      	b.n	8004af0 <_vfiprintf_r+0x1bc>
 8004b0e:	ab03      	add	r3, sp, #12
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	462a      	mov	r2, r5
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <_vfiprintf_r+0x22c>)
 8004b16:	a904      	add	r1, sp, #16
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f3af 8000 	nop.w
 8004b1e:	4607      	mov	r7, r0
 8004b20:	1c78      	adds	r0, r7, #1
 8004b22:	d1d6      	bne.n	8004ad2 <_vfiprintf_r+0x19e>
 8004b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b26:	07d9      	lsls	r1, r3, #31
 8004b28:	d405      	bmi.n	8004b36 <_vfiprintf_r+0x202>
 8004b2a:	89ab      	ldrh	r3, [r5, #12]
 8004b2c:	059a      	lsls	r2, r3, #22
 8004b2e:	d402      	bmi.n	8004b36 <_vfiprintf_r+0x202>
 8004b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b32:	f7ff fddb 	bl	80046ec <__retarget_lock_release_recursive>
 8004b36:	89ab      	ldrh	r3, [r5, #12]
 8004b38:	065b      	lsls	r3, r3, #25
 8004b3a:	f53f af1d 	bmi.w	8004978 <_vfiprintf_r+0x44>
 8004b3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b40:	e71c      	b.n	800497c <_vfiprintf_r+0x48>
 8004b42:	ab03      	add	r3, sp, #12
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	462a      	mov	r2, r5
 8004b48:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <_vfiprintf_r+0x22c>)
 8004b4a:	a904      	add	r1, sp, #16
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f000 f879 	bl	8004c44 <_printf_i>
 8004b52:	e7e4      	b.n	8004b1e <_vfiprintf_r+0x1ea>
 8004b54:	08005384 	.word	0x08005384
 8004b58:	0800538e 	.word	0x0800538e
 8004b5c:	00000000 	.word	0x00000000
 8004b60:	0800490f 	.word	0x0800490f
 8004b64:	0800538a 	.word	0x0800538a

08004b68 <_printf_common>:
 8004b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6c:	4616      	mov	r6, r2
 8004b6e:	4699      	mov	r9, r3
 8004b70:	688a      	ldr	r2, [r1, #8]
 8004b72:	690b      	ldr	r3, [r1, #16]
 8004b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	bfb8      	it	lt
 8004b7c:	4613      	movlt	r3, r2
 8004b7e:	6033      	str	r3, [r6, #0]
 8004b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b84:	4607      	mov	r7, r0
 8004b86:	460c      	mov	r4, r1
 8004b88:	b10a      	cbz	r2, 8004b8e <_printf_common+0x26>
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	6033      	str	r3, [r6, #0]
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	0699      	lsls	r1, r3, #26
 8004b92:	bf42      	ittt	mi
 8004b94:	6833      	ldrmi	r3, [r6, #0]
 8004b96:	3302      	addmi	r3, #2
 8004b98:	6033      	strmi	r3, [r6, #0]
 8004b9a:	6825      	ldr	r5, [r4, #0]
 8004b9c:	f015 0506 	ands.w	r5, r5, #6
 8004ba0:	d106      	bne.n	8004bb0 <_printf_common+0x48>
 8004ba2:	f104 0a19 	add.w	sl, r4, #25
 8004ba6:	68e3      	ldr	r3, [r4, #12]
 8004ba8:	6832      	ldr	r2, [r6, #0]
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	42ab      	cmp	r3, r5
 8004bae:	dc26      	bgt.n	8004bfe <_printf_common+0x96>
 8004bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bb4:	1e13      	subs	r3, r2, #0
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	bf18      	it	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	0692      	lsls	r2, r2, #26
 8004bbe:	d42b      	bmi.n	8004c18 <_printf_common+0xb0>
 8004bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	47c0      	blx	r8
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d01e      	beq.n	8004c0c <_printf_common+0xa4>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	6922      	ldr	r2, [r4, #16]
 8004bd2:	f003 0306 	and.w	r3, r3, #6
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	bf02      	ittt	eq
 8004bda:	68e5      	ldreq	r5, [r4, #12]
 8004bdc:	6833      	ldreq	r3, [r6, #0]
 8004bde:	1aed      	subeq	r5, r5, r3
 8004be0:	68a3      	ldr	r3, [r4, #8]
 8004be2:	bf0c      	ite	eq
 8004be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004be8:	2500      	movne	r5, #0
 8004bea:	4293      	cmp	r3, r2
 8004bec:	bfc4      	itt	gt
 8004bee:	1a9b      	subgt	r3, r3, r2
 8004bf0:	18ed      	addgt	r5, r5, r3
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	341a      	adds	r4, #26
 8004bf6:	42b5      	cmp	r5, r6
 8004bf8:	d11a      	bne.n	8004c30 <_printf_common+0xc8>
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	e008      	b.n	8004c10 <_printf_common+0xa8>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4652      	mov	r2, sl
 8004c02:	4649      	mov	r1, r9
 8004c04:	4638      	mov	r0, r7
 8004c06:	47c0      	blx	r8
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d103      	bne.n	8004c14 <_printf_common+0xac>
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c14:	3501      	adds	r5, #1
 8004c16:	e7c6      	b.n	8004ba6 <_printf_common+0x3e>
 8004c18:	18e1      	adds	r1, r4, r3
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	2030      	movs	r0, #48	; 0x30
 8004c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c22:	4422      	add	r2, r4
 8004c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	e7c7      	b.n	8004bc0 <_printf_common+0x58>
 8004c30:	2301      	movs	r3, #1
 8004c32:	4622      	mov	r2, r4
 8004c34:	4649      	mov	r1, r9
 8004c36:	4638      	mov	r0, r7
 8004c38:	47c0      	blx	r8
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d0e6      	beq.n	8004c0c <_printf_common+0xa4>
 8004c3e:	3601      	adds	r6, #1
 8004c40:	e7d9      	b.n	8004bf6 <_printf_common+0x8e>
	...

08004c44 <_printf_i>:
 8004c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c48:	7e0f      	ldrb	r7, [r1, #24]
 8004c4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c4c:	2f78      	cmp	r7, #120	; 0x78
 8004c4e:	4691      	mov	r9, r2
 8004c50:	4680      	mov	r8, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	469a      	mov	sl, r3
 8004c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c5a:	d807      	bhi.n	8004c6c <_printf_i+0x28>
 8004c5c:	2f62      	cmp	r7, #98	; 0x62
 8004c5e:	d80a      	bhi.n	8004c76 <_printf_i+0x32>
 8004c60:	2f00      	cmp	r7, #0
 8004c62:	f000 80d4 	beq.w	8004e0e <_printf_i+0x1ca>
 8004c66:	2f58      	cmp	r7, #88	; 0x58
 8004c68:	f000 80c0 	beq.w	8004dec <_printf_i+0x1a8>
 8004c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c74:	e03a      	b.n	8004cec <_printf_i+0xa8>
 8004c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c7a:	2b15      	cmp	r3, #21
 8004c7c:	d8f6      	bhi.n	8004c6c <_printf_i+0x28>
 8004c7e:	a101      	add	r1, pc, #4	; (adr r1, 8004c84 <_printf_i+0x40>)
 8004c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c84:	08004cdd 	.word	0x08004cdd
 8004c88:	08004cf1 	.word	0x08004cf1
 8004c8c:	08004c6d 	.word	0x08004c6d
 8004c90:	08004c6d 	.word	0x08004c6d
 8004c94:	08004c6d 	.word	0x08004c6d
 8004c98:	08004c6d 	.word	0x08004c6d
 8004c9c:	08004cf1 	.word	0x08004cf1
 8004ca0:	08004c6d 	.word	0x08004c6d
 8004ca4:	08004c6d 	.word	0x08004c6d
 8004ca8:	08004c6d 	.word	0x08004c6d
 8004cac:	08004c6d 	.word	0x08004c6d
 8004cb0:	08004df5 	.word	0x08004df5
 8004cb4:	08004d1d 	.word	0x08004d1d
 8004cb8:	08004daf 	.word	0x08004daf
 8004cbc:	08004c6d 	.word	0x08004c6d
 8004cc0:	08004c6d 	.word	0x08004c6d
 8004cc4:	08004e17 	.word	0x08004e17
 8004cc8:	08004c6d 	.word	0x08004c6d
 8004ccc:	08004d1d 	.word	0x08004d1d
 8004cd0:	08004c6d 	.word	0x08004c6d
 8004cd4:	08004c6d 	.word	0x08004c6d
 8004cd8:	08004db7 	.word	0x08004db7
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	1d1a      	adds	r2, r3, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	602a      	str	r2, [r5, #0]
 8004ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cec:	2301      	movs	r3, #1
 8004cee:	e09f      	b.n	8004e30 <_printf_i+0x1ec>
 8004cf0:	6820      	ldr	r0, [r4, #0]
 8004cf2:	682b      	ldr	r3, [r5, #0]
 8004cf4:	0607      	lsls	r7, r0, #24
 8004cf6:	f103 0104 	add.w	r1, r3, #4
 8004cfa:	6029      	str	r1, [r5, #0]
 8004cfc:	d501      	bpl.n	8004d02 <_printf_i+0xbe>
 8004cfe:	681e      	ldr	r6, [r3, #0]
 8004d00:	e003      	b.n	8004d0a <_printf_i+0xc6>
 8004d02:	0646      	lsls	r6, r0, #25
 8004d04:	d5fb      	bpl.n	8004cfe <_printf_i+0xba>
 8004d06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	da03      	bge.n	8004d16 <_printf_i+0xd2>
 8004d0e:	232d      	movs	r3, #45	; 0x2d
 8004d10:	4276      	negs	r6, r6
 8004d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d16:	485a      	ldr	r0, [pc, #360]	; (8004e80 <_printf_i+0x23c>)
 8004d18:	230a      	movs	r3, #10
 8004d1a:	e012      	b.n	8004d42 <_printf_i+0xfe>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	6820      	ldr	r0, [r4, #0]
 8004d20:	1d19      	adds	r1, r3, #4
 8004d22:	6029      	str	r1, [r5, #0]
 8004d24:	0605      	lsls	r5, r0, #24
 8004d26:	d501      	bpl.n	8004d2c <_printf_i+0xe8>
 8004d28:	681e      	ldr	r6, [r3, #0]
 8004d2a:	e002      	b.n	8004d32 <_printf_i+0xee>
 8004d2c:	0641      	lsls	r1, r0, #25
 8004d2e:	d5fb      	bpl.n	8004d28 <_printf_i+0xe4>
 8004d30:	881e      	ldrh	r6, [r3, #0]
 8004d32:	4853      	ldr	r0, [pc, #332]	; (8004e80 <_printf_i+0x23c>)
 8004d34:	2f6f      	cmp	r7, #111	; 0x6f
 8004d36:	bf0c      	ite	eq
 8004d38:	2308      	moveq	r3, #8
 8004d3a:	230a      	movne	r3, #10
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d42:	6865      	ldr	r5, [r4, #4]
 8004d44:	60a5      	str	r5, [r4, #8]
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	bfa2      	ittt	ge
 8004d4a:	6821      	ldrge	r1, [r4, #0]
 8004d4c:	f021 0104 	bicge.w	r1, r1, #4
 8004d50:	6021      	strge	r1, [r4, #0]
 8004d52:	b90e      	cbnz	r6, 8004d58 <_printf_i+0x114>
 8004d54:	2d00      	cmp	r5, #0
 8004d56:	d04b      	beq.n	8004df0 <_printf_i+0x1ac>
 8004d58:	4615      	mov	r5, r2
 8004d5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d62:	5dc7      	ldrb	r7, [r0, r7]
 8004d64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d68:	4637      	mov	r7, r6
 8004d6a:	42bb      	cmp	r3, r7
 8004d6c:	460e      	mov	r6, r1
 8004d6e:	d9f4      	bls.n	8004d5a <_printf_i+0x116>
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d10b      	bne.n	8004d8c <_printf_i+0x148>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	07de      	lsls	r6, r3, #31
 8004d78:	d508      	bpl.n	8004d8c <_printf_i+0x148>
 8004d7a:	6923      	ldr	r3, [r4, #16]
 8004d7c:	6861      	ldr	r1, [r4, #4]
 8004d7e:	4299      	cmp	r1, r3
 8004d80:	bfde      	ittt	le
 8004d82:	2330      	movle	r3, #48	; 0x30
 8004d84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d8c:	1b52      	subs	r2, r2, r5
 8004d8e:	6122      	str	r2, [r4, #16]
 8004d90:	f8cd a000 	str.w	sl, [sp]
 8004d94:	464b      	mov	r3, r9
 8004d96:	aa03      	add	r2, sp, #12
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	f7ff fee4 	bl	8004b68 <_printf_common>
 8004da0:	3001      	adds	r0, #1
 8004da2:	d14a      	bne.n	8004e3a <_printf_i+0x1f6>
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	b004      	add	sp, #16
 8004daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	f043 0320 	orr.w	r3, r3, #32
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	4833      	ldr	r0, [pc, #204]	; (8004e84 <_printf_i+0x240>)
 8004db8:	2778      	movs	r7, #120	; 0x78
 8004dba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	6829      	ldr	r1, [r5, #0]
 8004dc2:	061f      	lsls	r7, r3, #24
 8004dc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dc8:	d402      	bmi.n	8004dd0 <_printf_i+0x18c>
 8004dca:	065f      	lsls	r7, r3, #25
 8004dcc:	bf48      	it	mi
 8004dce:	b2b6      	uxthmi	r6, r6
 8004dd0:	07df      	lsls	r7, r3, #31
 8004dd2:	bf48      	it	mi
 8004dd4:	f043 0320 	orrmi.w	r3, r3, #32
 8004dd8:	6029      	str	r1, [r5, #0]
 8004dda:	bf48      	it	mi
 8004ddc:	6023      	strmi	r3, [r4, #0]
 8004dde:	b91e      	cbnz	r6, 8004de8 <_printf_i+0x1a4>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	f023 0320 	bic.w	r3, r3, #32
 8004de6:	6023      	str	r3, [r4, #0]
 8004de8:	2310      	movs	r3, #16
 8004dea:	e7a7      	b.n	8004d3c <_printf_i+0xf8>
 8004dec:	4824      	ldr	r0, [pc, #144]	; (8004e80 <_printf_i+0x23c>)
 8004dee:	e7e4      	b.n	8004dba <_printf_i+0x176>
 8004df0:	4615      	mov	r5, r2
 8004df2:	e7bd      	b.n	8004d70 <_printf_i+0x12c>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	6826      	ldr	r6, [r4, #0]
 8004df8:	6961      	ldr	r1, [r4, #20]
 8004dfa:	1d18      	adds	r0, r3, #4
 8004dfc:	6028      	str	r0, [r5, #0]
 8004dfe:	0635      	lsls	r5, r6, #24
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	d501      	bpl.n	8004e08 <_printf_i+0x1c4>
 8004e04:	6019      	str	r1, [r3, #0]
 8004e06:	e002      	b.n	8004e0e <_printf_i+0x1ca>
 8004e08:	0670      	lsls	r0, r6, #25
 8004e0a:	d5fb      	bpl.n	8004e04 <_printf_i+0x1c0>
 8004e0c:	8019      	strh	r1, [r3, #0]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6123      	str	r3, [r4, #16]
 8004e12:	4615      	mov	r5, r2
 8004e14:	e7bc      	b.n	8004d90 <_printf_i+0x14c>
 8004e16:	682b      	ldr	r3, [r5, #0]
 8004e18:	1d1a      	adds	r2, r3, #4
 8004e1a:	602a      	str	r2, [r5, #0]
 8004e1c:	681d      	ldr	r5, [r3, #0]
 8004e1e:	6862      	ldr	r2, [r4, #4]
 8004e20:	2100      	movs	r1, #0
 8004e22:	4628      	mov	r0, r5
 8004e24:	f7fb f9f4 	bl	8000210 <memchr>
 8004e28:	b108      	cbz	r0, 8004e2e <_printf_i+0x1ea>
 8004e2a:	1b40      	subs	r0, r0, r5
 8004e2c:	6060      	str	r0, [r4, #4]
 8004e2e:	6863      	ldr	r3, [r4, #4]
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	2300      	movs	r3, #0
 8004e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e38:	e7aa      	b.n	8004d90 <_printf_i+0x14c>
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	462a      	mov	r2, r5
 8004e3e:	4649      	mov	r1, r9
 8004e40:	4640      	mov	r0, r8
 8004e42:	47d0      	blx	sl
 8004e44:	3001      	adds	r0, #1
 8004e46:	d0ad      	beq.n	8004da4 <_printf_i+0x160>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	079b      	lsls	r3, r3, #30
 8004e4c:	d413      	bmi.n	8004e76 <_printf_i+0x232>
 8004e4e:	68e0      	ldr	r0, [r4, #12]
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	4298      	cmp	r0, r3
 8004e54:	bfb8      	it	lt
 8004e56:	4618      	movlt	r0, r3
 8004e58:	e7a6      	b.n	8004da8 <_printf_i+0x164>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4632      	mov	r2, r6
 8004e5e:	4649      	mov	r1, r9
 8004e60:	4640      	mov	r0, r8
 8004e62:	47d0      	blx	sl
 8004e64:	3001      	adds	r0, #1
 8004e66:	d09d      	beq.n	8004da4 <_printf_i+0x160>
 8004e68:	3501      	adds	r5, #1
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	9903      	ldr	r1, [sp, #12]
 8004e6e:	1a5b      	subs	r3, r3, r1
 8004e70:	42ab      	cmp	r3, r5
 8004e72:	dcf2      	bgt.n	8004e5a <_printf_i+0x216>
 8004e74:	e7eb      	b.n	8004e4e <_printf_i+0x20a>
 8004e76:	2500      	movs	r5, #0
 8004e78:	f104 0619 	add.w	r6, r4, #25
 8004e7c:	e7f5      	b.n	8004e6a <_printf_i+0x226>
 8004e7e:	bf00      	nop
 8004e80:	08005395 	.word	0x08005395
 8004e84:	080053a6 	.word	0x080053a6

08004e88 <__sflush_r>:
 8004e88:	898a      	ldrh	r2, [r1, #12]
 8004e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8e:	4605      	mov	r5, r0
 8004e90:	0710      	lsls	r0, r2, #28
 8004e92:	460c      	mov	r4, r1
 8004e94:	d458      	bmi.n	8004f48 <__sflush_r+0xc0>
 8004e96:	684b      	ldr	r3, [r1, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	dc05      	bgt.n	8004ea8 <__sflush_r+0x20>
 8004e9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	dc02      	bgt.n	8004ea8 <__sflush_r+0x20>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eaa:	2e00      	cmp	r6, #0
 8004eac:	d0f9      	beq.n	8004ea2 <__sflush_r+0x1a>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004eb4:	682f      	ldr	r7, [r5, #0]
 8004eb6:	6a21      	ldr	r1, [r4, #32]
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	d032      	beq.n	8004f22 <__sflush_r+0x9a>
 8004ebc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	075a      	lsls	r2, r3, #29
 8004ec2:	d505      	bpl.n	8004ed0 <__sflush_r+0x48>
 8004ec4:	6863      	ldr	r3, [r4, #4]
 8004ec6:	1ac0      	subs	r0, r0, r3
 8004ec8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004eca:	b10b      	cbz	r3, 8004ed0 <__sflush_r+0x48>
 8004ecc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ece:	1ac0      	subs	r0, r0, r3
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ed6:	6a21      	ldr	r1, [r4, #32]
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b0      	blx	r6
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	d106      	bne.n	8004ef0 <__sflush_r+0x68>
 8004ee2:	6829      	ldr	r1, [r5, #0]
 8004ee4:	291d      	cmp	r1, #29
 8004ee6:	d82b      	bhi.n	8004f40 <__sflush_r+0xb8>
 8004ee8:	4a29      	ldr	r2, [pc, #164]	; (8004f90 <__sflush_r+0x108>)
 8004eea:	410a      	asrs	r2, r1
 8004eec:	07d6      	lsls	r6, r2, #31
 8004eee:	d427      	bmi.n	8004f40 <__sflush_r+0xb8>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	6062      	str	r2, [r4, #4]
 8004ef4:	04d9      	lsls	r1, r3, #19
 8004ef6:	6922      	ldr	r2, [r4, #16]
 8004ef8:	6022      	str	r2, [r4, #0]
 8004efa:	d504      	bpl.n	8004f06 <__sflush_r+0x7e>
 8004efc:	1c42      	adds	r2, r0, #1
 8004efe:	d101      	bne.n	8004f04 <__sflush_r+0x7c>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b903      	cbnz	r3, 8004f06 <__sflush_r+0x7e>
 8004f04:	6560      	str	r0, [r4, #84]	; 0x54
 8004f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f08:	602f      	str	r7, [r5, #0]
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	d0c9      	beq.n	8004ea2 <__sflush_r+0x1a>
 8004f0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f12:	4299      	cmp	r1, r3
 8004f14:	d002      	beq.n	8004f1c <__sflush_r+0x94>
 8004f16:	4628      	mov	r0, r5
 8004f18:	f7ff fbea 	bl	80046f0 <_free_r>
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	6360      	str	r0, [r4, #52]	; 0x34
 8004f20:	e7c0      	b.n	8004ea4 <__sflush_r+0x1c>
 8004f22:	2301      	movs	r3, #1
 8004f24:	4628      	mov	r0, r5
 8004f26:	47b0      	blx	r6
 8004f28:	1c41      	adds	r1, r0, #1
 8004f2a:	d1c8      	bne.n	8004ebe <__sflush_r+0x36>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0c5      	beq.n	8004ebe <__sflush_r+0x36>
 8004f32:	2b1d      	cmp	r3, #29
 8004f34:	d001      	beq.n	8004f3a <__sflush_r+0xb2>
 8004f36:	2b16      	cmp	r3, #22
 8004f38:	d101      	bne.n	8004f3e <__sflush_r+0xb6>
 8004f3a:	602f      	str	r7, [r5, #0]
 8004f3c:	e7b1      	b.n	8004ea2 <__sflush_r+0x1a>
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	e7ad      	b.n	8004ea4 <__sflush_r+0x1c>
 8004f48:	690f      	ldr	r7, [r1, #16]
 8004f4a:	2f00      	cmp	r7, #0
 8004f4c:	d0a9      	beq.n	8004ea2 <__sflush_r+0x1a>
 8004f4e:	0793      	lsls	r3, r2, #30
 8004f50:	680e      	ldr	r6, [r1, #0]
 8004f52:	bf08      	it	eq
 8004f54:	694b      	ldreq	r3, [r1, #20]
 8004f56:	600f      	str	r7, [r1, #0]
 8004f58:	bf18      	it	ne
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	eba6 0807 	sub.w	r8, r6, r7
 8004f60:	608b      	str	r3, [r1, #8]
 8004f62:	f1b8 0f00 	cmp.w	r8, #0
 8004f66:	dd9c      	ble.n	8004ea2 <__sflush_r+0x1a>
 8004f68:	6a21      	ldr	r1, [r4, #32]
 8004f6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f6c:	4643      	mov	r3, r8
 8004f6e:	463a      	mov	r2, r7
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b0      	blx	r6
 8004f74:	2800      	cmp	r0, #0
 8004f76:	dc06      	bgt.n	8004f86 <__sflush_r+0xfe>
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f7e:	81a3      	strh	r3, [r4, #12]
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295
 8004f84:	e78e      	b.n	8004ea4 <__sflush_r+0x1c>
 8004f86:	4407      	add	r7, r0
 8004f88:	eba8 0800 	sub.w	r8, r8, r0
 8004f8c:	e7e9      	b.n	8004f62 <__sflush_r+0xda>
 8004f8e:	bf00      	nop
 8004f90:	dfbffffe 	.word	0xdfbffffe

08004f94 <_fflush_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	690b      	ldr	r3, [r1, #16]
 8004f98:	4605      	mov	r5, r0
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	b913      	cbnz	r3, 8004fa4 <_fflush_r+0x10>
 8004f9e:	2500      	movs	r5, #0
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	b118      	cbz	r0, 8004fae <_fflush_r+0x1a>
 8004fa6:	6a03      	ldr	r3, [r0, #32]
 8004fa8:	b90b      	cbnz	r3, 8004fae <_fflush_r+0x1a>
 8004faa:	f7ff f9a9 	bl	8004300 <__sinit>
 8004fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f3      	beq.n	8004f9e <_fflush_r+0xa>
 8004fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fb8:	07d0      	lsls	r0, r2, #31
 8004fba:	d404      	bmi.n	8004fc6 <_fflush_r+0x32>
 8004fbc:	0599      	lsls	r1, r3, #22
 8004fbe:	d402      	bmi.n	8004fc6 <_fflush_r+0x32>
 8004fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fc2:	f7ff fb92 	bl	80046ea <__retarget_lock_acquire_recursive>
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	4621      	mov	r1, r4
 8004fca:	f7ff ff5d 	bl	8004e88 <__sflush_r>
 8004fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fd0:	07da      	lsls	r2, r3, #31
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	d4e4      	bmi.n	8004fa0 <_fflush_r+0xc>
 8004fd6:	89a3      	ldrh	r3, [r4, #12]
 8004fd8:	059b      	lsls	r3, r3, #22
 8004fda:	d4e1      	bmi.n	8004fa0 <_fflush_r+0xc>
 8004fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fde:	f7ff fb85 	bl	80046ec <__retarget_lock_release_recursive>
 8004fe2:	e7dd      	b.n	8004fa0 <_fflush_r+0xc>

08004fe4 <__swhatbuf_r>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fec:	2900      	cmp	r1, #0
 8004fee:	b096      	sub	sp, #88	; 0x58
 8004ff0:	4615      	mov	r5, r2
 8004ff2:	461e      	mov	r6, r3
 8004ff4:	da0d      	bge.n	8005012 <__swhatbuf_r+0x2e>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	bf0c      	ite	eq
 8005002:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005006:	2340      	movne	r3, #64	; 0x40
 8005008:	2000      	movs	r0, #0
 800500a:	6031      	str	r1, [r6, #0]
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	b016      	add	sp, #88	; 0x58
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	466a      	mov	r2, sp
 8005014:	f000 f848 	bl	80050a8 <_fstat_r>
 8005018:	2800      	cmp	r0, #0
 800501a:	dbec      	blt.n	8004ff6 <__swhatbuf_r+0x12>
 800501c:	9901      	ldr	r1, [sp, #4]
 800501e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005022:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005026:	4259      	negs	r1, r3
 8005028:	4159      	adcs	r1, r3
 800502a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502e:	e7eb      	b.n	8005008 <__swhatbuf_r+0x24>

08005030 <__smakebuf_r>:
 8005030:	898b      	ldrh	r3, [r1, #12]
 8005032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005034:	079d      	lsls	r5, r3, #30
 8005036:	4606      	mov	r6, r0
 8005038:	460c      	mov	r4, r1
 800503a:	d507      	bpl.n	800504c <__smakebuf_r+0x1c>
 800503c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	6123      	str	r3, [r4, #16]
 8005044:	2301      	movs	r3, #1
 8005046:	6163      	str	r3, [r4, #20]
 8005048:	b002      	add	sp, #8
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	ab01      	add	r3, sp, #4
 800504e:	466a      	mov	r2, sp
 8005050:	f7ff ffc8 	bl	8004fe4 <__swhatbuf_r>
 8005054:	9900      	ldr	r1, [sp, #0]
 8005056:	4605      	mov	r5, r0
 8005058:	4630      	mov	r0, r6
 800505a:	f7ff fbb5 	bl	80047c8 <_malloc_r>
 800505e:	b948      	cbnz	r0, 8005074 <__smakebuf_r+0x44>
 8005060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005064:	059a      	lsls	r2, r3, #22
 8005066:	d4ef      	bmi.n	8005048 <__smakebuf_r+0x18>
 8005068:	f023 0303 	bic.w	r3, r3, #3
 800506c:	f043 0302 	orr.w	r3, r3, #2
 8005070:	81a3      	strh	r3, [r4, #12]
 8005072:	e7e3      	b.n	800503c <__smakebuf_r+0xc>
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	6020      	str	r0, [r4, #0]
 8005078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	9b00      	ldr	r3, [sp, #0]
 8005080:	6163      	str	r3, [r4, #20]
 8005082:	9b01      	ldr	r3, [sp, #4]
 8005084:	6120      	str	r0, [r4, #16]
 8005086:	b15b      	cbz	r3, 80050a0 <__smakebuf_r+0x70>
 8005088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800508c:	4630      	mov	r0, r6
 800508e:	f000 f81d 	bl	80050cc <_isatty_r>
 8005092:	b128      	cbz	r0, 80050a0 <__smakebuf_r+0x70>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	431d      	orrs	r5, r3
 80050a4:	81a5      	strh	r5, [r4, #12]
 80050a6:	e7cf      	b.n	8005048 <__smakebuf_r+0x18>

080050a8 <_fstat_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d07      	ldr	r5, [pc, #28]	; (80050c8 <_fstat_r+0x20>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	602b      	str	r3, [r5, #0]
 80050b6:	f7fb feea 	bl	8000e8e <_fstat>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	d102      	bne.n	80050c4 <_fstat_r+0x1c>
 80050be:	682b      	ldr	r3, [r5, #0]
 80050c0:	b103      	cbz	r3, 80050c4 <_fstat_r+0x1c>
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	bd38      	pop	{r3, r4, r5, pc}
 80050c6:	bf00      	nop
 80050c8:	20002604 	.word	0x20002604

080050cc <_isatty_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4d06      	ldr	r5, [pc, #24]	; (80050e8 <_isatty_r+0x1c>)
 80050d0:	2300      	movs	r3, #0
 80050d2:	4604      	mov	r4, r0
 80050d4:	4608      	mov	r0, r1
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	f7fb fee9 	bl	8000eae <_isatty>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_isatty_r+0x1a>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_isatty_r+0x1a>
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	20002604 	.word	0x20002604

080050ec <_sbrk_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4d06      	ldr	r5, [pc, #24]	; (8005108 <_sbrk_r+0x1c>)
 80050f0:	2300      	movs	r3, #0
 80050f2:	4604      	mov	r4, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	f7fb fef2 	bl	8000ee0 <_sbrk>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_sbrk_r+0x1a>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b103      	cbz	r3, 8005106 <_sbrk_r+0x1a>
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	20002604 	.word	0x20002604

0800510c <_init>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr

08005118 <_fini>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr
