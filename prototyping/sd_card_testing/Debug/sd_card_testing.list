
sd_card_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08006f7c  08006f7c  00016f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007260  08007260  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007260  08007260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007268  08007268  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007268  08007268  00017268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000074  080072e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  080072e4  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebdb  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000277c  00000000  00000000  0002ecc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00031440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c1  00000000  00000000  000320f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002316d  00000000  00000000  00032ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d9f  00000000  00000000  00055c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbdf2  00000000  00000000  000689c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003890  00000000  00000000  001347b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00138048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006f64 	.word	0x08006f64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006f64 	.word	0x08006f64

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80005bc:	b40f      	push	{r0, r1, r2, r3}
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	693a      	ldr	r2, [r7, #16]
 80005ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <myprintf+0x44>)
 80005d4:	f006 f820 	bl	8006618 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <myprintf+0x44>)
 80005da:	f7ff fe19 	bl	8000210 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	4905      	ldr	r1, [pc, #20]	; (8000600 <myprintf+0x44>)
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <myprintf+0x48>)
 80005ee:	f002 f81a 	bl	8002626 <HAL_UART_Transmit>

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005fc:	b004      	add	sp, #16
 80005fe:	4770      	bx	lr
 8000600:	2000012c 	.word	0x2000012c
 8000604:	200000e8 	.word	0x200000e8

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fb7c 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f90a 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f9c8 	bl	80009ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061c:	f000 f99c 	bl	8000958 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000620:	f000 f964 	bl	80008ec <MX_SPI3_Init>
  MX_FATFS_Init();
 8000624:	f002 ffc6 	bl	80035b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\nInitializing SD Card...\n\r");
 8000628:	4870      	ldr	r0, [pc, #448]	; (80007ec <main+0x1e4>)
 800062a:	f7ff ffc7 	bl	80005bc <myprintf>
  HAL_Delay(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000632:	f000 fbdd 	bl	8000df0 <HAL_Delay>

  FATFS FatFs; //fatfs handle
  FIL fil;
  FRESULT fres; //result after operations

  fres = f_mount(&FatFs, "", 1);
 8000636:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800063a:	2201      	movs	r2, #1
 800063c:	496c      	ldr	r1, [pc, #432]	; (80007f0 <main+0x1e8>)
 800063e:	4618      	mov	r0, r3
 8000640:	f005 f912 	bl	8005868 <f_mount>
 8000644:	4603      	mov	r3, r0
 8000646:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  HAL_Delay(1000);
 800064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064e:	f000 fbcf 	bl	8000df0 <HAL_Delay>
  if(fres != FR_OK){
 8000652:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000656:	2b00      	cmp	r3, #0
 8000658:	d006      	beq.n	8000668 <main+0x60>
	  myprintf("mounting error (%i)!\n\r", fres);
 800065a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800065e:	4619      	mov	r1, r3
 8000660:	4864      	ldr	r0, [pc, #400]	; (80007f4 <main+0x1ec>)
 8000662:	f7ff ffab 	bl	80005bc <myprintf>
	  while(1);
 8000666:	e7fe      	b.n	8000666 <main+0x5e>
  }
  myprintf("mounted successfully (%i)!\n\r", fres);
 8000668:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800066c:	4619      	mov	r1, r3
 800066e:	4862      	ldr	r0, [pc, #392]	; (80007f8 <main+0x1f0>)
 8000670:	f7ff ffa4 	bl	80005bc <myprintf>

  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000674:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800067c:	4619      	mov	r1, r3
 800067e:	485c      	ldr	r0, [pc, #368]	; (80007f0 <main+0x1e8>)
 8000680:	f005 fe52 	bl	8006328 <f_getfree>
 8000684:	4603      	mov	r3, r0
 8000686:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 800068a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <main+0x98>
	  myprintf("f_getfree error (%i)\r\n", fres);
 8000692:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000696:	4619      	mov	r1, r3
 8000698:	4858      	ldr	r0, [pc, #352]	; (80007fc <main+0x1f4>)
 800069a:	f7ff ff8f 	bl	80005bc <myprintf>
  	  while(1);
 800069e:	e7fe      	b.n	800069e <main+0x96>
  }

    //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80006a0:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80006a4:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	3b02      	subs	r3, #2
 80006ae:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 80006b2:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	8952      	ldrh	r2, [r2, #10]
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
  free_sectors = free_clusters * getFreeFs->csize;
 80006c2:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80006c6:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	895b      	ldrh	r3, [r3, #10]
 80006ce:	461a      	mov	r2, r3
 80006d0:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80006d4:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80006e2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80006e6:	0859      	lsrs	r1, r3, #1
 80006e8:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80006ec:	085b      	lsrs	r3, r3, #1
 80006ee:	461a      	mov	r2, r3
 80006f0:	4843      	ldr	r0, [pc, #268]	; (8000800 <main+0x1f8>)
 80006f2:	f7ff ff63 	bl	80005bc <myprintf>

    //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 80006f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006fa:	2201      	movs	r2, #1
 80006fc:	4941      	ldr	r1, [pc, #260]	; (8000804 <main+0x1fc>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 f8f8 	bl	80058f4 <f_open>
 8000704:	4603      	mov	r3, r0
 8000706:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 800070a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800070e:	2b00      	cmp	r3, #0
 8000710:	d003      	beq.n	800071a <main+0x112>
	  myprintf("f_open error (%i)\r\n");
 8000712:	483d      	ldr	r0, [pc, #244]	; (8000808 <main+0x200>)
 8000714:	f7ff ff52 	bl	80005bc <myprintf>
	  while(1);
 8000718:	e7fe      	b.n	8000718 <main+0x110>
  }
  myprintf("I was able to open 'test.txt' for reading!\r\n");
 800071a:	483c      	ldr	r0, [pc, #240]	; (800080c <main+0x204>)
 800071c:	f7ff ff4e 	bl	80005bc <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000720:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	211e      	movs	r1, #30
 800072a:	4618      	mov	r0, r3
 800072c:	f005 feb1 	bl	8006492 <f_gets>
 8000730:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
  if(rres != 0) {
 8000734:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8000738:	2b00      	cmp	r3, #0
 800073a:	d006      	beq.n	800074a <main+0x142>
	  myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	4619      	mov	r1, r3
 8000742:	4833      	ldr	r0, [pc, #204]	; (8000810 <main+0x208>)
 8000744:	f7ff ff3a 	bl	80005bc <myprintf>
 8000748:	e005      	b.n	8000756 <main+0x14e>
  } else {
	  myprintf("f_gets error (%i)\r\n", fres);
 800074a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800074e:	4619      	mov	r1, r3
 8000750:	4830      	ldr	r0, [pc, #192]	; (8000814 <main+0x20c>)
 8000752:	f7ff ff33 	bl	80005bc <myprintf>
  }

    //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 8000756:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800075a:	4618      	mov	r0, r3
 800075c:	f005 fdba 	bl	80062d4 <f_close>

    //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000764:	221a      	movs	r2, #26
 8000766:	492c      	ldr	r1, [pc, #176]	; (8000818 <main+0x210>)
 8000768:	4618      	mov	r0, r3
 800076a:	f005 f8c3 	bl	80058f4 <f_open>
 800076e:	4603      	mov	r3, r0
 8000770:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if(fres == FR_OK) {
 8000774:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000778:	2b00      	cmp	r3, #0
 800077a:	d103      	bne.n	8000784 <main+0x17c>
	  myprintf("I was able to open 'write.txt' for writing\r\n");
 800077c:	4827      	ldr	r0, [pc, #156]	; (800081c <main+0x214>)
 800077e:	f7ff ff1d 	bl	80005bc <myprintf>
 8000782:	e005      	b.n	8000790 <main+0x188>
  } else {
	  myprintf("f_open error (%i)\r\n", fres);
 8000784:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000788:	4619      	mov	r1, r3
 800078a:	481f      	ldr	r0, [pc, #124]	; (8000808 <main+0x200>)
 800078c:	f7ff ff16 	bl	80005bc <myprintf>
  }

    //Copy in a string
  strncpy((char*)readBuf, "wooooooooooooooo!", 19);
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2213      	movs	r2, #19
 8000796:	4922      	ldr	r1, [pc, #136]	; (8000820 <main+0x218>)
 8000798:	4618      	mov	r0, r3
 800079a:	f005 ff53 	bl	8006644 <strncpy>
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	f107 0108 	add.w	r1, r7, #8
 80007a4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80007a8:	2213      	movs	r2, #19
 80007aa:	f005 fba0 	bl	8005eee <f_write>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if(fres == FR_OK) {
 80007b4:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d109      	bne.n	80007d0 <main+0x1c8>
	  myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80007bc:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80007c0:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4619      	mov	r1, r3
 80007c8:	4816      	ldr	r0, [pc, #88]	; (8000824 <main+0x21c>)
 80007ca:	f7ff fef7 	bl	80005bc <myprintf>
 80007ce:	e002      	b.n	80007d6 <main+0x1ce>
  } else {
	  myprintf("f_write error (%i)\r\n");
 80007d0:	4815      	ldr	r0, [pc, #84]	; (8000828 <main+0x220>)
 80007d2:	f7ff fef3 	bl	80005bc <myprintf>
  }

    //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 80007d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007da:	4618      	mov	r0, r3
 80007dc:	f005 fd7a 	bl	80062d4 <f_close>

    //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	4903      	ldr	r1, [pc, #12]	; (80007f0 <main+0x1e8>)
 80007e4:	2000      	movs	r0, #0
 80007e6:	f005 f83f 	bl	8005868 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <main+0x1e2>
 80007ec:	08006f7c 	.word	0x08006f7c
 80007f0:	08006f98 	.word	0x08006f98
 80007f4:	08006f9c 	.word	0x08006f9c
 80007f8:	08006fb4 	.word	0x08006fb4
 80007fc:	08006fd4 	.word	0x08006fd4
 8000800:	08006fec 	.word	0x08006fec
 8000804:	08007034 	.word	0x08007034
 8000808:	08007040 	.word	0x08007040
 800080c:	08007054 	.word	0x08007054
 8000810:	08007084 	.word	0x08007084
 8000814:	080070b0 	.word	0x080070b0
 8000818:	080070c4 	.word	0x080070c4
 800081c:	080070d0 	.word	0x080070d0
 8000820:	08007100 	.word	0x08007100
 8000824:	08007114 	.word	0x08007114
 8000828:	08007138 	.word	0x08007138

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	; 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2234      	movs	r2, #52	; 0x34
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f005 fefa 	bl	8006634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <SystemClock_Config+0xb8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <SystemClock_Config+0xb8>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <SystemClock_Config+0xb8>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <SystemClock_Config+0xbc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <SystemClock_Config+0xbc>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <SystemClock_Config+0xbc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2310      	movs	r3, #16
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000898:	2300      	movs	r3, #0
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 f8df 	bl	8001a64 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008ac:	f000 f8c2 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fe06 	bl	80014dc <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008d6:	f000 f8ad 	bl	8000a34 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3750      	adds	r7, #80	; 0x50
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_SPI3_Init+0x64>)
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_SPI3_Init+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI3_Init+0x64>)
 80008f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI3_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_SPI3_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI3_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI3_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI3_Init+0x64>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI3_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_SPI3_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI3_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_SPI3_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI3_Init+0x64>)
 8000938:	220a      	movs	r2, #10
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_SPI3_Init+0x64>)
 800093e:	f001 fb2f 	bl	8001fa0 <HAL_SPI_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000948:	f000 f874 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000090 	.word	0x20000090
 8000954:	40003c00 	.word	0x40003c00

08000958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_USART2_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000990:	f001 fdfc 	bl	800258c <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f84b 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000e8 	.word	0x200000e8
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_GPIO_Init+0x80>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <MX_GPIO_Init+0x80>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_GPIO_Init+0x80>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_GPIO_Init+0x80>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <MX_GPIO_Init+0x80>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_GPIO_Init+0x80>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <MX_GPIO_Init+0x84>)
 8000a02:	f000 fd51 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_GPIO_Init+0x84>)
 8000a20:	f000 fbae 	bl	8001180 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020800 	.word	0x40020800

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_SPI_MspInit+0x84>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12c      	bne.n	8000b0c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000aea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000afc:	2306      	movs	r3, #6
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_SPI_MspInit+0x8c>)
 8000b08:	f000 fb3a 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40003c00 	.word	0x40003c00
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020800 	.word	0x40020800

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <HAL_UART_MspInit+0x94>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d133      	bne.n	8000baa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_UART_MspInit+0x98>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8a:	2307      	movs	r3, #7
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <HAL_UART_MspInit+0x9c>)
 8000b96:	f000 faf3 	bl	8001180 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2026      	movs	r0, #38	; 0x26
 8000ba0:	f000 fa25 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba4:	2026      	movs	r0, #38	; 0x26
 8000ba6:	f000 fa3e 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 f8d0 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <USART2_IRQHandler+0x10>)
 8000c1a:	f001 fd97 	bl	800274c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000e8 	.word	0x200000e8

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f005 fd08 	bl	800666c <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20020000 	.word	0x20020000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	2000022c 	.word	0x2000022c
 8000c90:	200003c8 	.word	0x200003c8

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd4:	4c0b      	ldr	r4, [pc, #44]	; (8000d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce2:	f7ff ffd7 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f005 fcc7 	bl	8006678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fc8d 	bl	8000608 <main>
  bx  lr    
 8000cee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cfc:	08007270 	.word	0x08007270
  ldr r2, =_sbss
 8000d00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d04:	200003c4 	.word	0x200003c4

08000d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_Init+0x40>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_Init+0x40>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_Init+0x40>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f94f 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fe7e 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f967 	bl	8001042 <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f92f 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000230 	.word	0x20000230

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000230 	.word	0x20000230

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff29 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff3e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff31 	bl	8000e9c <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff feb6 	bl	8000dd8 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d008      	beq.n	800108c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e052      	b.n	8001132 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0216 	bic.w	r2, r2, #22
 800109a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d103      	bne.n	80010bc <HAL_DMA_Abort+0x62>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0208 	bic.w	r2, r2, #8
 80010ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010dc:	e013      	b.n	8001106 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010de:	f7ff fe7b 	bl	8000dd8 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d90c      	bls.n	8001106 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2220      	movs	r2, #32
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e015      	b.n	8001132 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e4      	bne.n	80010de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001118:	223f      	movs	r2, #63	; 0x3f
 800111a:	409a      	lsls	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d004      	beq.n	8001158 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e00c      	b.n	8001172 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2205      	movs	r2, #5
 800115c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e165      	b.n	8001468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8154 	bne.w	8001462 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d005      	beq.n	80011d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d130      	bne.n	8001234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 0201 	and.w	r2, r3, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b03      	cmp	r3, #3
 800123e:	d017      	beq.n	8001270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80ae 	beq.w	8001462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_GPIO_Init+0x300>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a5c      	ldr	r2, [pc, #368]	; (8001480 <HAL_GPIO_Init+0x300>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <HAL_GPIO_Init+0x300>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a58      	ldr	r2, [pc, #352]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4f      	ldr	r2, [pc, #316]	; (8001488 <HAL_GPIO_Init+0x308>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x21a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4e      	ldr	r2, [pc, #312]	; (800148c <HAL_GPIO_Init+0x30c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x216>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4d      	ldr	r2, [pc, #308]	; (8001490 <HAL_GPIO_Init+0x310>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x212>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4c      	ldr	r2, [pc, #304]	; (8001494 <HAL_GPIO_Init+0x314>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x20e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <HAL_GPIO_Init+0x318>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x20a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4a      	ldr	r2, [pc, #296]	; (800149c <HAL_GPIO_Init+0x31c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x206>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <HAL_GPIO_Init+0x320>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x202>
 800137e:	2306      	movs	r3, #6
 8001380:	e00c      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001382:	2307      	movs	r3, #7
 8001384:	e00a      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001386:	2305      	movs	r3, #5
 8001388:	e008      	b.n	800139c <HAL_GPIO_Init+0x21c>
 800138a:	2304      	movs	r3, #4
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x21c>
 800138e:	2303      	movs	r3, #3
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x21c>
 800139a:	2300      	movs	r3, #0
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	f002 0203 	and.w	r2, r2, #3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ac:	4935      	ldr	r1, [pc, #212]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ba:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <HAL_GPIO_Init+0x324>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013de:	4a31      	ldr	r2, [pc, #196]	; (80014a4 <HAL_GPIO_Init+0x324>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_GPIO_Init+0x324>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001408:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <HAL_GPIO_Init+0x324>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <HAL_GPIO_Init+0x324>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145c:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	f67f ae96 	bls.w	800119c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40013800 	.word	0x40013800
 8001488:	40020000 	.word	0x40020000
 800148c:	40020400 	.word	0x40020400
 8001490:	40020800 	.word	0x40020800
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40021000 	.word	0x40021000
 800149c:	40021400 	.word	0x40021400
 80014a0:	40021800 	.word	0x40021800
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0cc      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d90c      	bls.n	8001518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b65      	ldr	r3, [pc, #404]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b63      	ldr	r3, [pc, #396]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0b8      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001530:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a58      	ldr	r2, [pc, #352]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800153a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	494d      	ldr	r1, [pc, #308]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d044      	beq.n	80015fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e07f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d003      	beq.n	800159a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001596:	2b03      	cmp	r3, #3
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e067      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f023 0203 	bic.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4934      	ldr	r1, [pc, #208]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015cc:	f7ff fc04 	bl	8000dd8 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d4:	f7ff fc00 	bl	8000dd8 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e04f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 020c 	and.w	r2, r3, #12
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1eb      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d20c      	bcs.n	8001624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e032      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4916      	ldr	r1, [pc, #88]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	490e      	ldr	r1, [pc, #56]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001662:	f000 f855 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 8001666:	4602      	mov	r2, r0
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	490a      	ldr	r1, [pc, #40]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	5ccb      	ldrb	r3, [r1, r3]
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fb64 	bl	8000d50 <HAL_InitTick>

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00
 8001698:	40023800 	.word	0x40023800
 800169c:	08007194 	.word	0x08007194
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_RCC_GetHCLKFreq+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000000 	.word	0x20000000

080016c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016c4:	f7ff fff0 	bl	80016a8 <HAL_RCC_GetHCLKFreq>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	0a9b      	lsrs	r3, r3, #10
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	4903      	ldr	r1, [pc, #12]	; (80016e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40023800 	.word	0x40023800
 80016e4:	080071a4 	.word	0x080071a4

080016e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016ec:	f7ff ffdc 	bl	80016a8 <HAL_RCC_GetHCLKFreq>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	0b5b      	lsrs	r3, r3, #13
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4903      	ldr	r1, [pc, #12]	; (800170c <HAL_RCC_GetPCLK2Freq+0x24>)
 80016fe:	5ccb      	ldrb	r3, [r1, r3]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	080071a4 	.word	0x080071a4

08001710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001714:	b0a6      	sub	sp, #152	; 0x98
 8001716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001736:	4bc8      	ldr	r3, [pc, #800]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b0c      	cmp	r3, #12
 8001740:	f200 817e 	bhi.w	8001a40 <HAL_RCC_GetSysClockFreq+0x330>
 8001744:	a201      	add	r2, pc, #4	; (adr r2, 800174c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174a:	bf00      	nop
 800174c:	08001781 	.word	0x08001781
 8001750:	08001a41 	.word	0x08001a41
 8001754:	08001a41 	.word	0x08001a41
 8001758:	08001a41 	.word	0x08001a41
 800175c:	08001789 	.word	0x08001789
 8001760:	08001a41 	.word	0x08001a41
 8001764:	08001a41 	.word	0x08001a41
 8001768:	08001a41 	.word	0x08001a41
 800176c:	08001791 	.word	0x08001791
 8001770:	08001a41 	.word	0x08001a41
 8001774:	08001a41 	.word	0x08001a41
 8001778:	08001a41 	.word	0x08001a41
 800177c:	080018fb 	.word	0x080018fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4bb6      	ldr	r3, [pc, #728]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001786:	e15f      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001788:	4bb5      	ldr	r3, [pc, #724]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x350>)
 800178a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800178e:	e15b      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001790:	4bb1      	ldr	r3, [pc, #708]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001798:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179c:	4bae      	ldr	r3, [pc, #696]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d031      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a8:	4bab      	ldr	r3, [pc, #684]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	2200      	movs	r2, #0
 80017b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80017b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ba:	663b      	str	r3, [r7, #96]	; 0x60
 80017bc:	2300      	movs	r3, #0
 80017be:	667b      	str	r3, [r7, #100]	; 0x64
 80017c0:	4ba7      	ldr	r3, [pc, #668]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x350>)
 80017c2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80017c6:	462a      	mov	r2, r5
 80017c8:	fb03 f202 	mul.w	r2, r3, r2
 80017cc:	2300      	movs	r3, #0
 80017ce:	4621      	mov	r1, r4
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	4aa2      	ldr	r2, [pc, #648]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x350>)
 80017d8:	4621      	mov	r1, r4
 80017da:	fba1 1202 	umull	r1, r2, r1, r2
 80017de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80017e0:	460a      	mov	r2, r1
 80017e2:	67ba      	str	r2, [r7, #120]	; 0x78
 80017e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80017e6:	4413      	add	r3, r2
 80017e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017ee:	2200      	movs	r2, #0
 80017f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80017f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80017f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80017fc:	f7fe fd60 	bl	80002c0 <__aeabi_uldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4613      	mov	r3, r2
 8001806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800180a:	e064      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180c:	4b92      	ldr	r3, [pc, #584]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	2200      	movs	r2, #0
 8001814:	653b      	str	r3, [r7, #80]	; 0x50
 8001816:	657a      	str	r2, [r7, #84]	; 0x54
 8001818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800181a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001820:	2300      	movs	r3, #0
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001824:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001828:	4622      	mov	r2, r4
 800182a:	462b      	mov	r3, r5
 800182c:	f04f 0000 	mov.w	r0, #0
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	0159      	lsls	r1, r3, #5
 8001836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183a:	0150      	lsls	r0, r2, #5
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4621      	mov	r1, r4
 8001842:	1a51      	subs	r1, r2, r1
 8001844:	6139      	str	r1, [r7, #16]
 8001846:	4629      	mov	r1, r5
 8001848:	eb63 0301 	sbc.w	r3, r3, r1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800185a:	4659      	mov	r1, fp
 800185c:	018b      	lsls	r3, r1, #6
 800185e:	4651      	mov	r1, sl
 8001860:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001864:	4651      	mov	r1, sl
 8001866:	018a      	lsls	r2, r1, #6
 8001868:	4651      	mov	r1, sl
 800186a:	ebb2 0801 	subs.w	r8, r2, r1
 800186e:	4659      	mov	r1, fp
 8001870:	eb63 0901 	sbc.w	r9, r3, r1
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001880:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001884:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001888:	4690      	mov	r8, r2
 800188a:	4699      	mov	r9, r3
 800188c:	4623      	mov	r3, r4
 800188e:	eb18 0303 	adds.w	r3, r8, r3
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	462b      	mov	r3, r5
 8001896:	eb49 0303 	adc.w	r3, r9, r3
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018a8:	4629      	mov	r1, r5
 80018aa:	028b      	lsls	r3, r1, #10
 80018ac:	4621      	mov	r1, r4
 80018ae:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b2:	4621      	mov	r1, r4
 80018b4:	028a      	lsls	r2, r1, #10
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018be:	2200      	movs	r2, #0
 80018c0:	643b      	str	r3, [r7, #64]	; 0x40
 80018c2:	647a      	str	r2, [r7, #68]	; 0x44
 80018c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018c8:	f7fe fcfa 	bl	80002c0 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d6:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	3301      	adds	r3, #1
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80018e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80018f8:	e0a6      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d02a      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	2200      	movs	r2, #0
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
 800191c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800191e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001924:	2100      	movs	r1, #0
 8001926:	4b4e      	ldr	r3, [pc, #312]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x350>)
 8001928:	fb03 f201 	mul.w	r2, r3, r1
 800192c:	2300      	movs	r3, #0
 800192e:	fb00 f303 	mul.w	r3, r0, r3
 8001932:	4413      	add	r3, r2
 8001934:	4a4a      	ldr	r2, [pc, #296]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x350>)
 8001936:	fba0 1202 	umull	r1, r2, r0, r2
 800193a:	677a      	str	r2, [r7, #116]	; 0x74
 800193c:	460a      	mov	r2, r1
 800193e:	673a      	str	r2, [r7, #112]	; 0x70
 8001940:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001942:	4413      	add	r3, r2
 8001944:	677b      	str	r3, [r7, #116]	; 0x74
 8001946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800194a:	2200      	movs	r2, #0
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
 800194e:	637a      	str	r2, [r7, #52]	; 0x34
 8001950:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001954:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001958:	f7fe fcb2 	bl	80002c0 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001966:	e05b      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001968:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	099b      	lsrs	r3, r3, #6
 800196e:	2200      	movs	r2, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
 8001972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
 8001980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001984:	4642      	mov	r2, r8
 8001986:	464b      	mov	r3, r9
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	0159      	lsls	r1, r3, #5
 8001992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001996:	0150      	lsls	r0, r2, #5
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4641      	mov	r1, r8
 800199e:	ebb2 0a01 	subs.w	sl, r2, r1
 80019a2:	4649      	mov	r1, r9
 80019a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019bc:	ebb2 040a 	subs.w	r4, r2, sl
 80019c0:	eb63 050b 	sbc.w	r5, r3, fp
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	00eb      	lsls	r3, r5, #3
 80019ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019d2:	00e2      	lsls	r2, r4, #3
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
 80019d8:	4643      	mov	r3, r8
 80019da:	18e3      	adds	r3, r4, r3
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	464b      	mov	r3, r9
 80019e0:	eb45 0303 	adc.w	r3, r5, r3
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019f2:	4629      	mov	r1, r5
 80019f4:	028b      	lsls	r3, r1, #10
 80019f6:	4621      	mov	r1, r4
 80019f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019fc:	4621      	mov	r1, r4
 80019fe:	028a      	lsls	r2, r1, #10
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
 8001a0c:	61fa      	str	r2, [r7, #28]
 8001a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a12:	f7fe fc55 	bl	80002c0 <__aeabi_uldivmod>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	0f1b      	lsrs	r3, r3, #28
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a3e:	e003      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3798      	adds	r7, #152	; 0x98
 8001a50:	46bd      	mov	sp, r7
 8001a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	00f42400 	.word	0x00f42400
 8001a60:	017d7840 	.word	0x017d7840

08001a64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e28d      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8083 	beq.w	8001b8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a84:	4b94      	ldr	r3, [pc, #592]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d019      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a90:	4b91      	ldr	r3, [pc, #580]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a9c:	4b8e      	ldr	r3, [pc, #568]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aaa:	4b8b      	ldr	r3, [pc, #556]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d112      	bne.n	8001adc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac2:	d10b      	bne.n	8001adc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	4b84      	ldr	r3, [pc, #528]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d05b      	beq.n	8001b88 <HAL_RCC_OscConfig+0x124>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d157      	bne.n	8001b88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e25a      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x90>
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7b      	ldr	r2, [pc, #492]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01d      	b.n	8001b30 <HAL_RCC_OscConfig+0xcc>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0xb4>
 8001afe:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a75      	ldr	r2, [pc, #468]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b73      	ldr	r3, [pc, #460]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a72      	ldr	r2, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0xcc>
 8001b18:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a6e      	ldr	r2, [pc, #440]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6b      	ldr	r2, [pc, #428]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f94e 	bl	8000dd8 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff f94a 	bl	8000dd8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e21f      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xdc>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff f93a 	bl	8000dd8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff f936 	bl	8000dd8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e20b      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x104>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d06f      	beq.n	8001c76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b96:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d017      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ba2:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d105      	bne.n	8001bba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bae:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00b      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d11c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc6:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d116      	bne.n	8001c00 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <HAL_RCC_OscConfig+0x186>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e1d3      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4937      	ldr	r1, [pc, #220]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	e03a      	b.n	8001c76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c08:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <HAL_RCC_OscConfig+0x278>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f8e3 	bl	8000dd8 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c16:	f7ff f8df 	bl	8000dd8 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e1b4      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4925      	ldr	r1, [pc, #148]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]
 8001c48:	e015      	b.n	8001c76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x278>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff f8c2 	bl	8000dd8 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c58:	f7ff f8be 	bl	8000dd8 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e193      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d036      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d016      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff f8a2 	bl	8000dd8 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff f89e 	bl	8000dd8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e173      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x234>
 8001cb6:	e01b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_OscConfig+0x27c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f88b 	bl	8000dd8 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc4:	e00e      	b.n	8001ce4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7ff f887 	bl	8000dd8 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d907      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e15c      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	42470000 	.word	0x42470000
 8001ce0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b8a      	ldr	r3, [pc, #552]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ea      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8097 	beq.w	8001e2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10f      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b7f      	ldr	r3, [pc, #508]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a7e      	ldr	r2, [pc, #504]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	4b79      	ldr	r3, [pc, #484]	; (8001f14 <HAL_RCC_OscConfig+0x4b0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d118      	bne.n	8001d6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3a:	4b76      	ldr	r3, [pc, #472]	; (8001f14 <HAL_RCC_OscConfig+0x4b0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a75      	ldr	r2, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x4b0>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d46:	f7ff f847 	bl	8000dd8 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4e:	f7ff f843 	bl	8000dd8 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e118      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	4b6c      	ldr	r3, [pc, #432]	; (8001f14 <HAL_RCC_OscConfig+0x4b0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x31e>
 8001d74:	4b66      	ldr	r3, [pc, #408]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a65      	ldr	r2, [pc, #404]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d80:	e01c      	b.n	8001dbc <HAL_RCC_OscConfig+0x358>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x340>
 8001d8a:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	4a60      	ldr	r2, [pc, #384]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6713      	str	r3, [r2, #112]	; 0x70
 8001d96:	4b5e      	ldr	r3, [pc, #376]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	4a5d      	ldr	r2, [pc, #372]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	; 0x70
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0x358>
 8001da4:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	4a59      	ldr	r2, [pc, #356]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70
 8001db0:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	4a56      	ldr	r2, [pc, #344]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001db6:	f023 0304 	bic.w	r3, r3, #4
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d015      	beq.n	8001df0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f808 	bl	8000dd8 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7ff f804 	bl	8000dd8 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e0d7      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de2:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0ee      	beq.n	8001dcc <HAL_RCC_OscConfig+0x368>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7fe fff2 	bl	8000dd8 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7fe ffee 	bl	8000dd8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0c1      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1ee      	bne.n	8001df8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	4a3a      	ldr	r2, [pc, #232]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80ad 	beq.w	8001f90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d060      	beq.n	8001f04 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d145      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <HAL_RCC_OscConfig+0x4b4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7fe ffc2 	bl	8000dd8 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e58:	f7fe ffbe 	bl	8000dd8 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e093      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	019b      	lsls	r3, r3, #6
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	071b      	lsls	r3, r3, #28
 8001ea2:	491b      	ldr	r1, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x4b4>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7fe ff93 	bl	8000dd8 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe ff8f 	bl	8000dd8 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e064      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x452>
 8001ed4:	e05c      	b.n	8001f90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_RCC_OscConfig+0x4b4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7fe ff7c 	bl	8000dd8 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7fe ff78 	bl	8000dd8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e04d      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x480>
 8001f02:	e045      	b.n	8001f90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e040      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000
 8001f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCC_OscConfig+0x538>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d030      	beq.n	8001f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d129      	bne.n	8001f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d122      	bne.n	8001f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d119      	bne.n	8001f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	3b01      	subs	r3, #1
 8001f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d10f      	bne.n	8001f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d107      	bne.n	8001f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e07b      	b.n	80020aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d108      	bne.n	8001fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fc2:	d009      	beq.n	8001fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
 8001fca:	e005      	b.n	8001fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fd4c 	bl	8000a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800200e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205c:	ea42 0103 	orr.w	r1, r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	f003 0104 	and.w	r1, r3, #4
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f003 0210 	and.w	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69da      	ldr	r2, [r3, #28]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002098:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b08c      	sub	sp, #48	; 0x30
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020c0:	2301      	movs	r3, #1
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_SPI_TransmitReceive+0x26>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e18a      	b.n	80023ee <HAL_SPI_TransmitReceive+0x33c>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020e0:	f7fe fe7a 	bl	8000dd8 <HAL_GetTick>
 80020e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d00f      	beq.n	8002122 <HAL_SPI_TransmitReceive+0x70>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002108:	d107      	bne.n	800211a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <HAL_SPI_TransmitReceive+0x68>
 8002112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002116:	2b04      	cmp	r3, #4
 8002118:	d003      	beq.n	8002122 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800211a:	2302      	movs	r3, #2
 800211c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002120:	e15b      	b.n	80023da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_SPI_TransmitReceive+0x82>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_SPI_TransmitReceive+0x82>
 800212e:	887b      	ldrh	r3, [r7, #2]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800213a:	e14e      	b.n	80023da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b04      	cmp	r3, #4
 8002146:	d003      	beq.n	8002150 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2205      	movs	r2, #5
 800214c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	887a      	ldrh	r2, [r7, #2]
 8002172:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d007      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ac:	d178      	bne.n	80022a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_SPI_TransmitReceive+0x10a>
 80021b6:	8b7b      	ldrh	r3, [r7, #26]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d166      	bne.n	800228a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	881a      	ldrh	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	1c9a      	adds	r2, r3, #2
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e0:	e053      	b.n	800228a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d11b      	bne.n	8002228 <HAL_SPI_TransmitReceive+0x176>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d016      	beq.n	8002228 <HAL_SPI_TransmitReceive+0x176>
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d113      	bne.n	8002228 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	1c9a      	adds	r2, r3, #2
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d119      	bne.n	800226a <HAL_SPI_TransmitReceive+0x1b8>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d014      	beq.n	800226a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	b292      	uxth	r2, r2
 800224c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	1c9a      	adds	r2, r3, #2
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002266:	2301      	movs	r3, #1
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800226a:	f7fe fdb5 	bl	8000dd8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002276:	429a      	cmp	r2, r3
 8002278:	d807      	bhi.n	800228a <HAL_SPI_TransmitReceive+0x1d8>
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d003      	beq.n	800228a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002288:	e0a7      	b.n	80023da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1a6      	bne.n	80021e2 <HAL_SPI_TransmitReceive+0x130>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1a1      	bne.n	80021e2 <HAL_SPI_TransmitReceive+0x130>
 800229e:	e07c      	b.n	800239a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_SPI_TransmitReceive+0x1fc>
 80022a8:	8b7b      	ldrh	r3, [r7, #26]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d16b      	bne.n	8002386 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	330c      	adds	r3, #12
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022d4:	e057      	b.n	8002386 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d11c      	bne.n	800231e <HAL_SPI_TransmitReceive+0x26c>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d017      	beq.n	800231e <HAL_SPI_TransmitReceive+0x26c>
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d114      	bne.n	800231e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	330c      	adds	r3, #12
 80022fe:	7812      	ldrb	r2, [r2, #0]
 8002300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d119      	bne.n	8002360 <HAL_SPI_TransmitReceive+0x2ae>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d014      	beq.n	8002360 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800235c:	2301      	movs	r3, #1
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002360:	f7fe fd3a 	bl	8000dd8 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800236c:	429a      	cmp	r2, r3
 800236e:	d803      	bhi.n	8002378 <HAL_SPI_TransmitReceive+0x2c6>
 8002370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002376:	d102      	bne.n	800237e <HAL_SPI_TransmitReceive+0x2cc>
 8002378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002384:	e029      	b.n	80023da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1a2      	bne.n	80022d6 <HAL_SPI_TransmitReceive+0x224>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d19d      	bne.n	80022d6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f8b2 	bl	8002508 <SPI_EndRxTxTransaction>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80023b6:	e010      	b.n	80023da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	e000      	b.n	80023da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80023d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3730      	adds	r7, #48	; 0x30
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002408:	f7fe fce6 	bl	8000dd8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	4413      	add	r3, r2
 8002416:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002418:	f7fe fcde 	bl	8000dd8 <HAL_GetTick>
 800241c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800241e:	4b39      	ldr	r3, [pc, #228]	; (8002504 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	015b      	lsls	r3, r3, #5
 8002424:	0d1b      	lsrs	r3, r3, #20
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800242e:	e054      	b.n	80024da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002436:	d050      	beq.n	80024da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002438:	f7fe fcce 	bl	8000dd8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	429a      	cmp	r2, r3
 8002446:	d902      	bls.n	800244e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d13d      	bne.n	80024ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800245c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002466:	d111      	bne.n	800248c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002470:	d004      	beq.n	800247c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247a:	d107      	bne.n	800248c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002494:	d10f      	bne.n	80024b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e017      	b.n	80024fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4013      	ands	r3, r2
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d19b      	bne.n	8002430 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000

08002508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <SPI_EndRxTxTransaction+0x7c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <SPI_EndRxTxTransaction+0x80>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	0d5b      	lsrs	r3, r3, #21
 8002520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002532:	d112      	bne.n	800255a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2200      	movs	r2, #0
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f7ff ff5a 	bl	80023f8 <SPI_WaitFlagStateUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	f043 0220 	orr.w	r2, r3, #32
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e00f      	b.n	800257a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3b01      	subs	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d0f2      	beq.n	800255a <SPI_EndRxTxTransaction+0x52>
 8002574:	e000      	b.n	8002578 <SPI_EndRxTxTransaction+0x70>
        break;
 8002576:	bf00      	nop
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000000 	.word	0x20000000
 8002588:	165e9f81 	.word	0x165e9f81

0800258c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e03f      	b.n	800261e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe fab4 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2224      	movs	r2, #36	; 0x24
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fd7b 	bl	80030cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b08a      	sub	sp, #40	; 0x28
 800262a:	af02      	add	r7, sp, #8
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	d17c      	bne.n	8002740 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_UART_Transmit+0x2c>
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e075      	b.n	8002742 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_UART_Transmit+0x3e>
 8002660:	2302      	movs	r3, #2
 8002662:	e06e      	b.n	8002742 <HAL_UART_Transmit+0x11c>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2221      	movs	r2, #33	; 0x21
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800267a:	f7fe fbad 	bl	8000dd8 <HAL_GetTick>
 800267e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	88fa      	ldrh	r2, [r7, #6]
 800268a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002694:	d108      	bne.n	80026a8 <HAL_UART_Transmit+0x82>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d104      	bne.n	80026a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e003      	b.n	80026b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026b8:	e02a      	b.n	8002710 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2180      	movs	r1, #128	; 0x80
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 faf9 	bl	8002cbc <UART_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e036      	b.n	8002742 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10b      	bne.n	80026f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3302      	adds	r3, #2
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	e007      	b.n	8002702 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	3301      	adds	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1cf      	bne.n	80026ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2200      	movs	r2, #0
 8002722:	2140      	movs	r1, #64	; 0x40
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fac9 	bl	8002cbc <UART_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e006      	b.n	8002742 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e000      	b.n	8002742 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002740:	2302      	movs	r3, #2
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b0ba      	sub	sp, #232	; 0xe8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800278a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_UART_IRQHandler+0x66>
 800279e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fbd3 	bl	8002f56 <UART_Receive_IT>
      return;
 80027b0:	e256      	b.n	8002c60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80de 	beq.w	8002978 <HAL_UART_IRQHandler+0x22c>
 80027bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80d1 	beq.w	8002978 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_UART_IRQHandler+0xae>
 80027e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_UART_IRQHandler+0xd2>
 8002806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f043 0202 	orr.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800281e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_UART_IRQHandler+0xf6>
 800282a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f043 0204 	orr.w	r2, r3, #4
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d011      	beq.n	8002872 <HAL_UART_IRQHandler+0x126>
 800284e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800285a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f043 0208 	orr.w	r2, r3, #8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 81ed 	beq.w	8002c56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800287c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_UART_IRQHandler+0x14e>
 8002888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fb5e 	bl	8002f56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <HAL_UART_IRQHandler+0x17a>
 80028be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d04f      	beq.n	8002966 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fa66 	bl	8002d98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d141      	bne.n	800295e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3314      	adds	r3, #20
 80028e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028e8:	e853 3f00 	ldrex	r3, [r3]
 80028ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3314      	adds	r3, #20
 8002902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800290a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800291e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1d9      	bne.n	80028da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	2b00      	cmp	r3, #0
 800292c:	d013      	beq.n	8002956 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	4a7d      	ldr	r2, [pc, #500]	; (8002b28 <HAL_UART_IRQHandler+0x3dc>)
 8002934:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fbfd 	bl	800113a <HAL_DMA_Abort_IT>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002950:	4610      	mov	r0, r2
 8002952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002954:	e00e      	b.n	8002974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f99a 	bl	8002c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295c:	e00a      	b.n	8002974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f996 	bl	8002c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002964:	e006      	b.n	8002974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f992 	bl	8002c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002972:	e170      	b.n	8002c56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002974:	bf00      	nop
    return;
 8002976:	e16e      	b.n	8002c56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	2b01      	cmp	r3, #1
 800297e:	f040 814a 	bne.w	8002c16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8143 	beq.w	8002c16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 813c 	beq.w	8002c16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	f040 80b4 	bne.w	8002b2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8140 	beq.w	8002c5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029e2:	429a      	cmp	r2, r3
 80029e4:	f080 8139 	bcs.w	8002c5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fa:	f000 8088 	beq.w	8002b0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	330c      	adds	r3, #12
 8002a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	330c      	adds	r3, #12
 8002a26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a3a:	e841 2300 	strex	r3, r2, [r1]
 8002a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1d9      	bne.n	80029fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3314      	adds	r3, #20
 8002a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a54:	e853 3f00 	ldrex	r3, [r3]
 8002a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3314      	adds	r3, #20
 8002a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a7a:	e841 2300 	strex	r3, r2, [r1]
 8002a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e1      	bne.n	8002a4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3314      	adds	r3, #20
 8002a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e3      	bne.n	8002a86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	330c      	adds	r3, #12
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad6:	e853 3f00 	ldrex	r3, [r3]
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ade:	f023 0310 	bic.w	r3, r3, #16
 8002ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002af0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002af2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e3      	bne.n	8002acc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe faa6 	bl	800105a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8c0 	bl	8002ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b24:	e099      	b.n	8002c5a <HAL_UART_IRQHandler+0x50e>
 8002b26:	bf00      	nop
 8002b28:	08002e5f 	.word	0x08002e5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 808b 	beq.w	8002c5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 8086 	beq.w	8002c5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b76:	647a      	str	r2, [r7, #68]	; 0x44
 8002b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e3      	bne.n	8002b52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3314      	adds	r3, #20
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	e853 3f00 	ldrex	r3, [r3]
 8002b98:	623b      	str	r3, [r7, #32]
   return(result);
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3314      	adds	r3, #20
 8002baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bae:	633a      	str	r2, [r7, #48]	; 0x30
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e3      	bne.n	8002b8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0310 	bic.w	r3, r3, #16
 8002be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	330c      	adds	r3, #12
 8002bf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bf4:	61fa      	str	r2, [r7, #28]
 8002bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	69b9      	ldr	r1, [r7, #24]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	e841 2300 	strex	r3, r2, [r1]
 8002c00:	617b      	str	r3, [r7, #20]
   return(result);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e3      	bne.n	8002bd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f848 	bl	8002ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c14:	e023      	b.n	8002c5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_UART_IRQHandler+0x4ea>
 8002c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f929 	bl	8002e86 <UART_Transmit_IT>
    return;
 8002c34:	e014      	b.n	8002c60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00e      	beq.n	8002c60 <HAL_UART_IRQHandler+0x514>
 8002c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f969 	bl	8002f26 <UART_EndTransmit_IT>
    return;
 8002c54:	e004      	b.n	8002c60 <HAL_UART_IRQHandler+0x514>
    return;
 8002c56:	bf00      	nop
 8002c58:	e002      	b.n	8002c60 <HAL_UART_IRQHandler+0x514>
      return;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <HAL_UART_IRQHandler+0x514>
      return;
 8002c5e:	bf00      	nop
  }
}
 8002c60:	37e8      	adds	r7, #232	; 0xe8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop

08002c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b090      	sub	sp, #64	; 0x40
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ccc:	e050      	b.n	8002d70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d04c      	beq.n	8002d70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <UART_WaitOnFlagUntilTimeout+0x30>
 8002cdc:	f7fe f87c 	bl	8000dd8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d241      	bcs.n	8002d70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d0c:	637a      	str	r2, [r7, #52]	; 0x34
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e5      	bne.n	8002cec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3314      	adds	r3, #20
 8002d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3314      	adds	r3, #20
 8002d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d40:	623a      	str	r2, [r7, #32]
 8002d42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	69f9      	ldr	r1, [r7, #28]
 8002d46:	6a3a      	ldr	r2, [r7, #32]
 8002d48:	e841 2300 	strex	r3, r2, [r1]
 8002d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e5      	bne.n	8002d20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e00f      	b.n	8002d90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d09f      	beq.n	8002cce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3740      	adds	r7, #64	; 0x40
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b095      	sub	sp, #84	; 0x54
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002daa:	e853 3f00 	ldrex	r3, [r3]
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	330c      	adds	r3, #12
 8002dbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dc0:	643a      	str	r2, [r7, #64]	; 0x40
 8002dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002dc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dc8:	e841 2300 	strex	r3, r2, [r1]
 8002dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e5      	bne.n	8002da0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	e853 3f00 	ldrex	r3, [r3]
 8002de2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3314      	adds	r3, #20
 8002df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfc:	e841 2300 	strex	r3, r2, [r1]
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e5      	bne.n	8002dd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d119      	bne.n	8002e44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	e853 3f00 	ldrex	r3, [r3]
 8002e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f023 0310 	bic.w	r3, r3, #16
 8002e26:	647b      	str	r3, [r7, #68]	; 0x44
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e30:	61ba      	str	r2, [r7, #24]
 8002e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	6979      	ldr	r1, [r7, #20]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	e841 2300 	strex	r3, r2, [r1]
 8002e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1e5      	bne.n	8002e10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e52:	bf00      	nop
 8002e54:	3754      	adds	r7, #84	; 0x54
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff ff09 	bl	8002c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b21      	cmp	r3, #33	; 0x21
 8002e98:	d13e      	bne.n	8002f18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea2:	d114      	bne.n	8002ece <UART_Transmit_IT+0x48>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d110      	bne.n	8002ece <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	1c9a      	adds	r2, r3, #2
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	621a      	str	r2, [r3, #32]
 8002ecc:	e008      	b.n	8002ee0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	1c59      	adds	r1, r3, #1
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6211      	str	r1, [r2, #32]
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4619      	mov	r1, r3
 8002eee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10f      	bne.n	8002f14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e000      	b.n	8002f1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f18:	2302      	movs	r3, #2
  }
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff fe8e 	bl	8002c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b08c      	sub	sp, #48	; 0x30
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b22      	cmp	r3, #34	; 0x22
 8002f68:	f040 80ab 	bne.w	80030c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d117      	bne.n	8002fa6 <UART_Receive_IT+0x50>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d113      	bne.n	8002fa6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	1c9a      	adds	r2, r3, #2
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa4:	e026      	b.n	8002ff4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb8:	d007      	beq.n	8002fca <UART_Receive_IT+0x74>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <UART_Receive_IT+0x82>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e008      	b.n	8002fea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4619      	mov	r1, r3
 8003002:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003004:	2b00      	cmp	r3, #0
 8003006:	d15a      	bne.n	80030be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0220 	bic.w	r2, r2, #32
 8003016:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003026:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	2b01      	cmp	r3, #1
 8003046:	d135      	bne.n	80030b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	613b      	str	r3, [r7, #16]
   return(result);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f023 0310 	bic.w	r3, r3, #16
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	623a      	str	r2, [r7, #32]
 8003070:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	69f9      	ldr	r1, [r7, #28]
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	61bb      	str	r3, [r7, #24]
   return(result);
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e5      	bne.n	800304e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b10      	cmp	r3, #16
 800308e:	d10a      	bne.n	80030a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fdf9 	bl	8002ca4 <HAL_UARTEx_RxEventCallback>
 80030b2:	e002      	b.n	80030ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fde1 	bl	8002c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e002      	b.n	80030c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
  }
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3730      	adds	r7, #48	; 0x30
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d0:	b0c0      	sub	sp, #256	; 0x100
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e8:	68d9      	ldr	r1, [r3, #12]
 80030ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	ea40 0301 	orr.w	r3, r0, r1
 80030f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	431a      	orrs	r2, r3
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	431a      	orrs	r2, r3
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003124:	f021 010c 	bic.w	r1, r1, #12
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003132:	430b      	orrs	r3, r1
 8003134:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003146:	6999      	ldr	r1, [r3, #24]
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	ea40 0301 	orr.w	r3, r0, r1
 8003152:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b8f      	ldr	r3, [pc, #572]	; (8003398 <UART_SetConfig+0x2cc>)
 800315c:	429a      	cmp	r2, r3
 800315e:	d005      	beq.n	800316c <UART_SetConfig+0xa0>
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4b8d      	ldr	r3, [pc, #564]	; (800339c <UART_SetConfig+0x2d0>)
 8003168:	429a      	cmp	r2, r3
 800316a:	d104      	bne.n	8003176 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800316c:	f7fe fabc 	bl	80016e8 <HAL_RCC_GetPCLK2Freq>
 8003170:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003174:	e003      	b.n	800317e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003176:	f7fe faa3 	bl	80016c0 <HAL_RCC_GetPCLK1Freq>
 800317a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003188:	f040 810c 	bne.w	80033a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800318c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003190:	2200      	movs	r2, #0
 8003192:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003196:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800319a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800319e:	4622      	mov	r2, r4
 80031a0:	462b      	mov	r3, r5
 80031a2:	1891      	adds	r1, r2, r2
 80031a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80031a6:	415b      	adcs	r3, r3
 80031a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031ae:	4621      	mov	r1, r4
 80031b0:	eb12 0801 	adds.w	r8, r2, r1
 80031b4:	4629      	mov	r1, r5
 80031b6:	eb43 0901 	adc.w	r9, r3, r1
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ce:	4690      	mov	r8, r2
 80031d0:	4699      	mov	r9, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	eb18 0303 	adds.w	r3, r8, r3
 80031d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031dc:	462b      	mov	r3, r5
 80031de:	eb49 0303 	adc.w	r3, r9, r3
 80031e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031fa:	460b      	mov	r3, r1
 80031fc:	18db      	adds	r3, r3, r3
 80031fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003200:	4613      	mov	r3, r2
 8003202:	eb42 0303 	adc.w	r3, r2, r3
 8003206:	657b      	str	r3, [r7, #84]	; 0x54
 8003208:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800320c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003210:	f7fd f856 	bl	80002c0 <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4b61      	ldr	r3, [pc, #388]	; (80033a0 <UART_SetConfig+0x2d4>)
 800321a:	fba3 2302 	umull	r2, r3, r3, r2
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	011c      	lsls	r4, r3, #4
 8003222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003226:	2200      	movs	r2, #0
 8003228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800322c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003230:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	1891      	adds	r1, r2, r2
 800323a:	64b9      	str	r1, [r7, #72]	; 0x48
 800323c:	415b      	adcs	r3, r3
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003240:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003244:	4641      	mov	r1, r8
 8003246:	eb12 0a01 	adds.w	sl, r2, r1
 800324a:	4649      	mov	r1, r9
 800324c:	eb43 0b01 	adc.w	fp, r3, r1
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800325c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003264:	4692      	mov	sl, r2
 8003266:	469b      	mov	fp, r3
 8003268:	4643      	mov	r3, r8
 800326a:	eb1a 0303 	adds.w	r3, sl, r3
 800326e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003272:	464b      	mov	r3, r9
 8003274:	eb4b 0303 	adc.w	r3, fp, r3
 8003278:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003288:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800328c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003290:	460b      	mov	r3, r1
 8003292:	18db      	adds	r3, r3, r3
 8003294:	643b      	str	r3, [r7, #64]	; 0x40
 8003296:	4613      	mov	r3, r2
 8003298:	eb42 0303 	adc.w	r3, r2, r3
 800329c:	647b      	str	r3, [r7, #68]	; 0x44
 800329e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032a6:	f7fd f80b 	bl	80002c0 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4611      	mov	r1, r2
 80032b0:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <UART_SetConfig+0x2d4>)
 80032b2:	fba3 2301 	umull	r2, r3, r3, r1
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2264      	movs	r2, #100	; 0x64
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	1acb      	subs	r3, r1, r3
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032c6:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <UART_SetConfig+0x2d4>)
 80032c8:	fba3 2302 	umull	r2, r3, r3, r2
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032d4:	441c      	add	r4, r3
 80032d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032e8:	4642      	mov	r2, r8
 80032ea:	464b      	mov	r3, r9
 80032ec:	1891      	adds	r1, r2, r2
 80032ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80032f0:	415b      	adcs	r3, r3
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032f8:	4641      	mov	r1, r8
 80032fa:	1851      	adds	r1, r2, r1
 80032fc:	6339      	str	r1, [r7, #48]	; 0x30
 80032fe:	4649      	mov	r1, r9
 8003300:	414b      	adcs	r3, r1
 8003302:	637b      	str	r3, [r7, #52]	; 0x34
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003310:	4659      	mov	r1, fp
 8003312:	00cb      	lsls	r3, r1, #3
 8003314:	4651      	mov	r1, sl
 8003316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800331a:	4651      	mov	r1, sl
 800331c:	00ca      	lsls	r2, r1, #3
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	4603      	mov	r3, r0
 8003324:	4642      	mov	r2, r8
 8003326:	189b      	adds	r3, r3, r2
 8003328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800332c:	464b      	mov	r3, r9
 800332e:	460a      	mov	r2, r1
 8003330:	eb42 0303 	adc.w	r3, r2, r3
 8003334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003344:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003348:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800334c:	460b      	mov	r3, r1
 800334e:	18db      	adds	r3, r3, r3
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
 8003352:	4613      	mov	r3, r2
 8003354:	eb42 0303 	adc.w	r3, r2, r3
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800335e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003362:	f7fc ffad 	bl	80002c0 <__aeabi_uldivmod>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <UART_SetConfig+0x2d4>)
 800336c:	fba3 1302 	umull	r1, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	2164      	movs	r1, #100	; 0x64
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	3332      	adds	r3, #50	; 0x32
 800337e:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <UART_SetConfig+0x2d4>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	f003 0207 	and.w	r2, r3, #7
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4422      	add	r2, r4
 8003392:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003394:	e106      	b.n	80035a4 <UART_SetConfig+0x4d8>
 8003396:	bf00      	nop
 8003398:	40011000 	.word	0x40011000
 800339c:	40011400 	.word	0x40011400
 80033a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033b6:	4642      	mov	r2, r8
 80033b8:	464b      	mov	r3, r9
 80033ba:	1891      	adds	r1, r2, r2
 80033bc:	6239      	str	r1, [r7, #32]
 80033be:	415b      	adcs	r3, r3
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
 80033c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033c6:	4641      	mov	r1, r8
 80033c8:	1854      	adds	r4, r2, r1
 80033ca:	4649      	mov	r1, r9
 80033cc:	eb43 0501 	adc.w	r5, r3, r1
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	00eb      	lsls	r3, r5, #3
 80033da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033de:	00e2      	lsls	r2, r4, #3
 80033e0:	4614      	mov	r4, r2
 80033e2:	461d      	mov	r5, r3
 80033e4:	4643      	mov	r3, r8
 80033e6:	18e3      	adds	r3, r4, r3
 80033e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033ec:	464b      	mov	r3, r9
 80033ee:	eb45 0303 	adc.w	r3, r5, r3
 80033f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003402:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003412:	4629      	mov	r1, r5
 8003414:	008b      	lsls	r3, r1, #2
 8003416:	4621      	mov	r1, r4
 8003418:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800341c:	4621      	mov	r1, r4
 800341e:	008a      	lsls	r2, r1, #2
 8003420:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003424:	f7fc ff4c 	bl	80002c0 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4b60      	ldr	r3, [pc, #384]	; (80035b0 <UART_SetConfig+0x4e4>)
 800342e:	fba3 2302 	umull	r2, r3, r3, r2
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	011c      	lsls	r4, r3, #4
 8003436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003440:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003444:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003448:	4642      	mov	r2, r8
 800344a:	464b      	mov	r3, r9
 800344c:	1891      	adds	r1, r2, r2
 800344e:	61b9      	str	r1, [r7, #24]
 8003450:	415b      	adcs	r3, r3
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003458:	4641      	mov	r1, r8
 800345a:	1851      	adds	r1, r2, r1
 800345c:	6139      	str	r1, [r7, #16]
 800345e:	4649      	mov	r1, r9
 8003460:	414b      	adcs	r3, r1
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003470:	4659      	mov	r1, fp
 8003472:	00cb      	lsls	r3, r1, #3
 8003474:	4651      	mov	r1, sl
 8003476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800347a:	4651      	mov	r1, sl
 800347c:	00ca      	lsls	r2, r1, #3
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	4603      	mov	r3, r0
 8003484:	4642      	mov	r2, r8
 8003486:	189b      	adds	r3, r3, r2
 8003488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800348c:	464b      	mov	r3, r9
 800348e:	460a      	mov	r2, r1
 8003490:	eb42 0303 	adc.w	r3, r2, r3
 8003494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034b0:	4649      	mov	r1, r9
 80034b2:	008b      	lsls	r3, r1, #2
 80034b4:	4641      	mov	r1, r8
 80034b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ba:	4641      	mov	r1, r8
 80034bc:	008a      	lsls	r2, r1, #2
 80034be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034c2:	f7fc fefd 	bl	80002c0 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	4b38      	ldr	r3, [pc, #224]	; (80035b0 <UART_SetConfig+0x4e4>)
 80034ce:	fba3 2301 	umull	r2, r3, r3, r1
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2264      	movs	r2, #100	; 0x64
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	1acb      	subs	r3, r1, r3
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	3332      	adds	r3, #50	; 0x32
 80034e0:	4a33      	ldr	r2, [pc, #204]	; (80035b0 <UART_SetConfig+0x4e4>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ec:	441c      	add	r4, r3
 80034ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f2:	2200      	movs	r2, #0
 80034f4:	673b      	str	r3, [r7, #112]	; 0x70
 80034f6:	677a      	str	r2, [r7, #116]	; 0x74
 80034f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034fc:	4642      	mov	r2, r8
 80034fe:	464b      	mov	r3, r9
 8003500:	1891      	adds	r1, r2, r2
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	415b      	adcs	r3, r3
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800350c:	4641      	mov	r1, r8
 800350e:	1851      	adds	r1, r2, r1
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	4649      	mov	r1, r9
 8003514:	414b      	adcs	r3, r1
 8003516:	607b      	str	r3, [r7, #4]
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003524:	4659      	mov	r1, fp
 8003526:	00cb      	lsls	r3, r1, #3
 8003528:	4651      	mov	r1, sl
 800352a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800352e:	4651      	mov	r1, sl
 8003530:	00ca      	lsls	r2, r1, #3
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	4603      	mov	r3, r0
 8003538:	4642      	mov	r2, r8
 800353a:	189b      	adds	r3, r3, r2
 800353c:	66bb      	str	r3, [r7, #104]	; 0x68
 800353e:	464b      	mov	r3, r9
 8003540:	460a      	mov	r2, r1
 8003542:	eb42 0303 	adc.w	r3, r2, r3
 8003546:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	663b      	str	r3, [r7, #96]	; 0x60
 8003552:	667a      	str	r2, [r7, #100]	; 0x64
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003560:	4649      	mov	r1, r9
 8003562:	008b      	lsls	r3, r1, #2
 8003564:	4641      	mov	r1, r8
 8003566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800356a:	4641      	mov	r1, r8
 800356c:	008a      	lsls	r2, r1, #2
 800356e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003572:	f7fc fea5 	bl	80002c0 <__aeabi_uldivmod>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <UART_SetConfig+0x4e4>)
 800357c:	fba3 1302 	umull	r1, r3, r3, r2
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	2164      	movs	r1, #100	; 0x64
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	3332      	adds	r3, #50	; 0x32
 800358e:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <UART_SetConfig+0x4e4>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	f003 020f 	and.w	r2, r3, #15
 800359a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4422      	add	r2, r4
 80035a2:	609a      	str	r2, [r3, #8]
}
 80035a4:	bf00      	nop
 80035a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035aa:	46bd      	mov	sp, r7
 80035ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b0:	51eb851f 	.word	0x51eb851f

080035b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80035b8:	4904      	ldr	r1, [pc, #16]	; (80035cc <MX_FATFS_Init+0x18>)
 80035ba:	4805      	ldr	r0, [pc, #20]	; (80035d0 <MX_FATFS_Init+0x1c>)
 80035bc:	f002 fff2 	bl	80065a4 <FATFS_LinkDriver>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <MX_FATFS_Init+0x20>)
 80035c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80035c8:	bf00      	nop
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000238 	.word	0x20000238
 80035d0:	2000000c 	.word	0x2000000c
 80035d4:	20000234 	.word	0x20000234

080035d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80035dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80035de:	4618      	mov	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f989 	bl	800390c <USER_SPI_initialize>
 80035fa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fa67 	bl	8003ae4 <USER_SPI_status>
 8003616:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  /* USER CODE END READ */
}
 8003630:	bf00      	nop
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	4603      	mov	r3, r0
 800364c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  /* USER CODE END WRITE */
}
 800364e:	bf00      	nop
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	603a      	str	r2, [r7, #0]
 8003666:	71fb      	strb	r3, [r7, #7]
 8003668:	460b      	mov	r3, r1
 800366a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800366c:	79b9      	ldrb	r1, [r7, #6]
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa4c 	bl	8003b10 <USER_SPI_ioctl>
 8003678:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800368c:	f7fd fba4 	bl	8000dd8 <HAL_GetTick>
 8003690:	4603      	mov	r3, r0
 8003692:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <SPI_Timer_On+0x20>)
 8003694:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <SPI_Timer_On+0x24>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6013      	str	r3, [r2, #0]
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000240 	.word	0x20000240
 80036a8:	20000244 	.word	0x20000244

080036ac <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80036b0:	f7fd fb92 	bl	8000dd8 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <SPI_Timer_Status+0x24>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <SPI_Timer_Status+0x28>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	bf34      	ite	cc
 80036c4:	2301      	movcc	r3, #1
 80036c6:	2300      	movcs	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000240 	.word	0x20000240
 80036d4:	20000244 	.word	0x20000244

080036d8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80036e2:	f107 020f 	add.w	r2, r7, #15
 80036e6:	1df9      	adds	r1, r7, #7
 80036e8:	2332      	movs	r3, #50	; 0x32
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2301      	movs	r3, #1
 80036ee:	4804      	ldr	r0, [pc, #16]	; (8003700 <xchg_spi+0x28>)
 80036f0:	f7fe fcdf 	bl	80020b2 <HAL_SPI_TransmitReceive>
    return rxDat;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000090 	.word	0x20000090

08003704 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	e00a      	b.n	800372a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d4      	adds	r4, r2, r3
 800371a:	20ff      	movs	r0, #255	; 0xff
 800371c:	f7ff ffdc 	bl	80036d8 <xchg_spi>
 8003720:	4603      	mov	r3, r0
 8003722:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d3f0      	bcc.n	8003714 <rcvr_spi_multi+0x10>
	}
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	bd90      	pop	{r4, r7, pc}

0800373c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003744:	f7fd fb48 	bl	8000dd8 <HAL_GetTick>
 8003748:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800374e:	20ff      	movs	r0, #255	; 0xff
 8003750:	f7ff ffc2 	bl	80036d8 <xchg_spi>
 8003754:	4603      	mov	r3, r0
 8003756:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2bff      	cmp	r3, #255	; 0xff
 800375c:	d007      	beq.n	800376e <wait_ready+0x32>
 800375e:	f7fd fb3b 	bl	8000dd8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	429a      	cmp	r2, r3
 800376c:	d8ef      	bhi.n	800374e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2bff      	cmp	r3, #255	; 0xff
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003788:	2201      	movs	r2, #1
 800378a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800378e:	4804      	ldr	r0, [pc, #16]	; (80037a0 <despiselect+0x1c>)
 8003790:	f7fd fe8a 	bl	80014a8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003794:	20ff      	movs	r0, #255	; 0xff
 8003796:	f7ff ff9f 	bl	80036d8 <xchg_spi>

}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40020800 	.word	0x40020800

080037a4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037ae:	480a      	ldr	r0, [pc, #40]	; (80037d8 <spiselect+0x34>)
 80037b0:	f7fd fe7a 	bl	80014a8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80037b4:	20ff      	movs	r0, #255	; 0xff
 80037b6:	f7ff ff8f 	bl	80036d8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80037ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037be:	f7ff ffbd 	bl	800373c <wait_ready>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <spiselect+0x28>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e002      	b.n	80037d2 <spiselect+0x2e>

	despiselect();
 80037cc:	f7ff ffda 	bl	8003784 <despiselect>
	return 0;	/* Timeout */
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40020800 	.word	0x40020800

080037dc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80037e6:	20c8      	movs	r0, #200	; 0xc8
 80037e8:	f7ff ff4c 	bl	8003684 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80037ec:	20ff      	movs	r0, #255	; 0xff
 80037ee:	f7ff ff73 	bl	80036d8 <xchg_spi>
 80037f2:	4603      	mov	r3, r0
 80037f4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2bff      	cmp	r3, #255	; 0xff
 80037fa:	d104      	bne.n	8003806 <rcvr_datablock+0x2a>
 80037fc:	f7ff ff56 	bl	80036ac <SPI_Timer_Status>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f2      	bne.n	80037ec <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2bfe      	cmp	r3, #254	; 0xfe
 800380a:	d001      	beq.n	8003810 <rcvr_datablock+0x34>
 800380c:	2300      	movs	r3, #0
 800380e:	e00a      	b.n	8003826 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003810:	6839      	ldr	r1, [r7, #0]
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ff76 	bl	8003704 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003818:	20ff      	movs	r0, #255	; 0xff
 800381a:	f7ff ff5d 	bl	80036d8 <xchg_spi>
 800381e:	20ff      	movs	r0, #255	; 0xff
 8003820:	f7ff ff5a 	bl	80036d8 <xchg_spi>

	return 1;						/* Function succeeded */
 8003824:	2301      	movs	r3, #1
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	6039      	str	r1, [r7, #0]
 8003838:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	2b00      	cmp	r3, #0
 8003840:	da0e      	bge.n	8003860 <send_cmd+0x32>
		cmd &= 0x7F;
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003848:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800384a:	2100      	movs	r1, #0
 800384c:	2037      	movs	r0, #55	; 0x37
 800384e:	f7ff ffee 	bl	800382e <send_cmd>
 8003852:	4603      	mov	r3, r0
 8003854:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d901      	bls.n	8003860 <send_cmd+0x32>
 800385c:	7bbb      	ldrb	r3, [r7, #14]
 800385e:	e051      	b.n	8003904 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d008      	beq.n	8003878 <send_cmd+0x4a>
		despiselect();
 8003866:	f7ff ff8d 	bl	8003784 <despiselect>
		if (!spiselect()) return 0xFF;
 800386a:	f7ff ff9b 	bl	80037a4 <spiselect>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <send_cmd+0x4a>
 8003874:	23ff      	movs	r3, #255	; 0xff
 8003876:	e045      	b.n	8003904 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800387e:	b2db      	uxtb	r3, r3
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff29 	bl	80036d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	0e1b      	lsrs	r3, r3, #24
 800388a:	b2db      	uxtb	r3, r3
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff23 	bl	80036d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff ff1d 	bl	80036d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff17 	bl	80036d8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ff12 	bl	80036d8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <send_cmd+0x94>
 80038be:	2395      	movs	r3, #149	; 0x95
 80038c0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d101      	bne.n	80038cc <send_cmd+0x9e>
 80038c8:	2387      	movs	r3, #135	; 0x87
 80038ca:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff ff02 	bl	80036d8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d102      	bne.n	80038e0 <send_cmd+0xb2>
 80038da:	20ff      	movs	r0, #255	; 0xff
 80038dc:	f7ff fefc 	bl	80036d8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80038e0:	230a      	movs	r3, #10
 80038e2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80038e4:	20ff      	movs	r0, #255	; 0xff
 80038e6:	f7ff fef7 	bl	80036d8 <xchg_spi>
 80038ea:	4603      	mov	r3, r0
 80038ec:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80038ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da05      	bge.n	8003902 <send_cmd+0xd4>
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003902:	7bbb      	ldrb	r3, [r7, #14]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <USER_SPI_initialize+0x14>
 800391c:	2301      	movs	r3, #1
 800391e:	e0d6      	b.n	8003ace <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003920:	4b6d      	ldr	r3, [pc, #436]	; (8003ad8 <USER_SPI_initialize+0x1cc>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <USER_SPI_initialize+0x2a>
 800392e:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <USER_SPI_initialize+0x1cc>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e0cb      	b.n	8003ace <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003936:	4b69      	ldr	r3, [pc, #420]	; (8003adc <USER_SPI_initialize+0x1d0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003940:	4b66      	ldr	r3, [pc, #408]	; (8003adc <USER_SPI_initialize+0x1d0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003948:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800394a:	230a      	movs	r3, #10
 800394c:	73fb      	strb	r3, [r7, #15]
 800394e:	e005      	b.n	800395c <USER_SPI_initialize+0x50>
 8003950:	20ff      	movs	r0, #255	; 0xff
 8003952:	f7ff fec1 	bl	80036d8 <xchg_spi>
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	3b01      	subs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f6      	bne.n	8003950 <USER_SPI_initialize+0x44>

	ty = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003966:	2100      	movs	r1, #0
 8003968:	2000      	movs	r0, #0
 800396a:	f7ff ff60 	bl	800382e <send_cmd>
 800396e:	4603      	mov	r3, r0
 8003970:	2b01      	cmp	r3, #1
 8003972:	f040 808b 	bne.w	8003a8c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800397a:	f7ff fe83 	bl	8003684 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800397e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003982:	2008      	movs	r0, #8
 8003984:	f7ff ff53 	bl	800382e <send_cmd>
 8003988:	4603      	mov	r3, r0
 800398a:	2b01      	cmp	r3, #1
 800398c:	d151      	bne.n	8003a32 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	e00d      	b.n	80039b0 <USER_SPI_initialize+0xa4>
 8003994:	7bfc      	ldrb	r4, [r7, #15]
 8003996:	20ff      	movs	r0, #255	; 0xff
 8003998:	f7ff fe9e 	bl	80036d8 <xchg_spi>
 800399c:	4603      	mov	r3, r0
 800399e:	461a      	mov	r2, r3
 80039a0:	f104 0310 	add.w	r3, r4, #16
 80039a4:	443b      	add	r3, r7
 80039a6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	3301      	adds	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d9ee      	bls.n	8003994 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80039b6:	7abb      	ldrb	r3, [r7, #10]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d167      	bne.n	8003a8c <USER_SPI_initialize+0x180>
 80039bc:	7afb      	ldrb	r3, [r7, #11]
 80039be:	2baa      	cmp	r3, #170	; 0xaa
 80039c0:	d164      	bne.n	8003a8c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80039c2:	bf00      	nop
 80039c4:	f7ff fe72 	bl	80036ac <SPI_Timer_Status>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <USER_SPI_initialize+0xd2>
 80039ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80039d2:	20a9      	movs	r0, #169	; 0xa9
 80039d4:	f7ff ff2b 	bl	800382e <send_cmd>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f2      	bne.n	80039c4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80039de:	f7ff fe65 	bl	80036ac <SPI_Timer_Status>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d051      	beq.n	8003a8c <USER_SPI_initialize+0x180>
 80039e8:	2100      	movs	r1, #0
 80039ea:	203a      	movs	r0, #58	; 0x3a
 80039ec:	f7ff ff1f 	bl	800382e <send_cmd>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d14a      	bne.n	8003a8c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e00d      	b.n	8003a18 <USER_SPI_initialize+0x10c>
 80039fc:	7bfc      	ldrb	r4, [r7, #15]
 80039fe:	20ff      	movs	r0, #255	; 0xff
 8003a00:	f7ff fe6a 	bl	80036d8 <xchg_spi>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	f104 0310 	add.w	r3, r4, #16
 8003a0c:	443b      	add	r3, r7
 8003a0e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	3301      	adds	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d9ee      	bls.n	80039fc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003a1e:	7a3b      	ldrb	r3, [r7, #8]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <USER_SPI_initialize+0x120>
 8003a28:	230c      	movs	r3, #12
 8003a2a:	e000      	b.n	8003a2e <USER_SPI_initialize+0x122>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	737b      	strb	r3, [r7, #13]
 8003a30:	e02c      	b.n	8003a8c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003a32:	2100      	movs	r1, #0
 8003a34:	20a9      	movs	r0, #169	; 0xa9
 8003a36:	f7ff fefa 	bl	800382e <send_cmd>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d804      	bhi.n	8003a4a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003a40:	2302      	movs	r3, #2
 8003a42:	737b      	strb	r3, [r7, #13]
 8003a44:	23a9      	movs	r3, #169	; 0xa9
 8003a46:	73bb      	strb	r3, [r7, #14]
 8003a48:	e003      	b.n	8003a52 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	737b      	strb	r3, [r7, #13]
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003a52:	bf00      	nop
 8003a54:	f7ff fe2a 	bl	80036ac <SPI_Timer_Status>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <USER_SPI_initialize+0x162>
 8003a5e:	7bbb      	ldrb	r3, [r7, #14]
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fee3 	bl	800382e <send_cmd>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f2      	bne.n	8003a54 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003a6e:	f7ff fe1d 	bl	80036ac <SPI_Timer_Status>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <USER_SPI_initialize+0x17c>
 8003a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a7c:	2010      	movs	r0, #16
 8003a7e:	f7ff fed6 	bl	800382e <send_cmd>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <USER_SPI_initialize+0x180>
				ty = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <USER_SPI_initialize+0x1d4>)
 8003a8e:	7b7b      	ldrb	r3, [r7, #13]
 8003a90:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003a92:	f7ff fe77 	bl	8003784 <despiselect>

	if (ty) {			/* OK */
 8003a96:	7b7b      	ldrb	r3, [r7, #13]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d012      	beq.n	8003ac2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <USER_SPI_initialize+0x1d0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <USER_SPI_initialize+0x1d0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0210 	orr.w	r2, r2, #16
 8003aae:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <USER_SPI_initialize+0x1cc>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <USER_SPI_initialize+0x1cc>)
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e002      	b.n	8003ac8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <USER_SPI_initialize+0x1cc>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <USER_SPI_initialize+0x1cc>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd90      	pop	{r4, r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000020 	.word	0x20000020
 8003adc:	20000090 	.word	0x20000090
 8003ae0:	2000023c 	.word	0x2000023c

08003ae4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <USER_SPI_status+0x14>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e002      	b.n	8003afe <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <USER_SPI_status+0x28>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	b2db      	uxtb	r3, r3
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000020 	.word	0x20000020

08003b10 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	603a      	str	r2, [r7, #0]
 8003b1a:	71fb      	strb	r3, [r7, #7]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <USER_SPI_ioctl+0x1a>
 8003b26:	2304      	movs	r3, #4
 8003b28:	e15a      	b.n	8003de0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003b2a:	4baf      	ldr	r3, [pc, #700]	; (8003de8 <USER_SPI_ioctl+0x2d8>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <USER_SPI_ioctl+0x2c>
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e151      	b.n	8003de0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003b42:	79bb      	ldrb	r3, [r7, #6]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	f200 8136 	bhi.w	8003db6 <USER_SPI_ioctl+0x2a6>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <USER_SPI_ioctl+0x40>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003b79 	.word	0x08003b79
 8003b58:	08003db7 	.word	0x08003db7
 8003b5c:	08003c25 	.word	0x08003c25
 8003b60:	08003d1b 	.word	0x08003d1b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003b64:	f7ff fe1e 	bl	80037a4 <spiselect>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8127 	beq.w	8003dbe <USER_SPI_ioctl+0x2ae>
 8003b70:	2300      	movs	r3, #0
 8003b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003b76:	e122      	b.n	8003dbe <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003b78:	2100      	movs	r1, #0
 8003b7a:	2009      	movs	r0, #9
 8003b7c:	f7ff fe57 	bl	800382e <send_cmd>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f040 811d 	bne.w	8003dc2 <USER_SPI_ioctl+0x2b2>
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	2110      	movs	r1, #16
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fe24 	bl	80037dc <rcvr_datablock>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8113 	beq.w	8003dc2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003b9c:	7b3b      	ldrb	r3, [r7, #12]
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d111      	bne.n	8003bca <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003ba6:	7d7b      	ldrb	r3, [r7, #21]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	7d3b      	ldrb	r3, [r7, #20]
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	4413      	add	r3, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003bba:	4413      	add	r3, r2
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	029a      	lsls	r2, r3, #10
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e028      	b.n	8003c1c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003bca:	7c7b      	ldrb	r3, [r7, #17]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	7dbb      	ldrb	r3, [r7, #22]
 8003bd4:	09db      	lsrs	r3, r3, #7
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	4413      	add	r3, r2
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	7d7b      	ldrb	r3, [r7, #21]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 0306 	and.w	r3, r3, #6
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	3302      	adds	r3, #2
 8003bee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003bf2:	7d3b      	ldrb	r3, [r7, #20]
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	441a      	add	r2, r3
 8003c00:	7cbb      	ldrb	r3, [r7, #18]
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c08:	4413      	add	r3, r2
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003c0e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c12:	3b09      	subs	r3, #9
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	409a      	lsls	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003c22:	e0ce      	b.n	8003dc2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003c24:	4b71      	ldr	r3, [pc, #452]	; (8003dec <USER_SPI_ioctl+0x2dc>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d031      	beq.n	8003c94 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003c30:	2100      	movs	r1, #0
 8003c32:	208d      	movs	r0, #141	; 0x8d
 8003c34:	f7ff fdfb 	bl	800382e <send_cmd>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f040 80c3 	bne.w	8003dc6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003c40:	20ff      	movs	r0, #255	; 0xff
 8003c42:	f7ff fd49 	bl	80036d8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003c46:	f107 030c 	add.w	r3, r7, #12
 8003c4a:	2110      	movs	r1, #16
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff fdc5 	bl	80037dc <rcvr_datablock>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80b6 	beq.w	8003dc6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003c5a:	2330      	movs	r3, #48	; 0x30
 8003c5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003c60:	e007      	b.n	8003c72 <USER_SPI_ioctl+0x162>
 8003c62:	20ff      	movs	r0, #255	; 0xff
 8003c64:	f7ff fd38 	bl	80036d8 <xchg_spi>
 8003c68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003c72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f3      	bne.n	8003c62 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003c7a:	7dbb      	ldrb	r3, [r7, #22]
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	2310      	movs	r3, #16
 8003c84:	fa03 f202 	lsl.w	r2, r3, r2
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003c92:	e098      	b.n	8003dc6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003c94:	2100      	movs	r1, #0
 8003c96:	2009      	movs	r0, #9
 8003c98:	f7ff fdc9 	bl	800382e <send_cmd>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f040 8091 	bne.w	8003dc6 <USER_SPI_ioctl+0x2b6>
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	2110      	movs	r1, #16
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fd96 	bl	80037dc <rcvr_datablock>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8087 	beq.w	8003dc6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003cb8:	4b4c      	ldr	r3, [pc, #304]	; (8003dec <USER_SPI_ioctl+0x2dc>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d012      	beq.n	8003cea <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003cc4:	7dbb      	ldrb	r3, [r7, #22]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003ccc:	7dfa      	ldrb	r2, [r7, #23]
 8003cce:	09d2      	lsrs	r2, r2, #7
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	7e7b      	ldrb	r3, [r7, #25]
 8003cd8:	099b      	lsrs	r3, r3, #6
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e013      	b.n	8003d12 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003cea:	7dbb      	ldrb	r3, [r7, #22]
 8003cec:	109b      	asrs	r3, r3, #2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	7dfa      	ldrb	r2, [r7, #23]
 8003cf8:	00d2      	lsls	r2, r2, #3
 8003cfa:	f002 0218 	and.w	r2, r2, #24
 8003cfe:	7df9      	ldrb	r1, [r7, #23]
 8003d00:	0949      	lsrs	r1, r1, #5
 8003d02:	b2c9      	uxtb	r1, r1
 8003d04:	440a      	add	r2, r1
 8003d06:	3201      	adds	r2, #1
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003d18:	e055      	b.n	8003dc6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003d1a:	4b34      	ldr	r3, [pc, #208]	; (8003dec <USER_SPI_ioctl+0x2dc>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	f003 0306 	and.w	r3, r3, #6
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d051      	beq.n	8003dca <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003d26:	f107 020c 	add.w	r2, r7, #12
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	210b      	movs	r1, #11
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff feee 	bl	8003b10 <USER_SPI_ioctl>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d149      	bne.n	8003dce <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003d3a:	7b3b      	ldrb	r3, [r7, #12]
 8003d3c:	099b      	lsrs	r3, r3, #6
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <USER_SPI_ioctl+0x23e>
 8003d44:	7dbb      	ldrb	r3, [r7, #22]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d041      	beq.n	8003dd2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	623b      	str	r3, [r7, #32]
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8003d5e:	4b23      	ldr	r3, [pc, #140]	; (8003dec <USER_SPI_ioctl+0x2dc>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d105      	bne.n	8003d76 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	025b      	lsls	r3, r3, #9
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	025b      	lsls	r3, r3, #9
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d78:	2020      	movs	r0, #32
 8003d7a:	f7ff fd58 	bl	800382e <send_cmd>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d128      	bne.n	8003dd6 <USER_SPI_ioctl+0x2c6>
 8003d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d86:	2021      	movs	r0, #33	; 0x21
 8003d88:	f7ff fd51 	bl	800382e <send_cmd>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d121      	bne.n	8003dd6 <USER_SPI_ioctl+0x2c6>
 8003d92:	2100      	movs	r1, #0
 8003d94:	2026      	movs	r0, #38	; 0x26
 8003d96:	f7ff fd4a 	bl	800382e <send_cmd>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d11a      	bne.n	8003dd6 <USER_SPI_ioctl+0x2c6>
 8003da0:	f247 5030 	movw	r0, #30000	; 0x7530
 8003da4:	f7ff fcca 	bl	800373c <wait_ready>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d013      	beq.n	8003dd6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003dae:	2300      	movs	r3, #0
 8003db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003db4:	e00f      	b.n	8003dd6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003db6:	2304      	movs	r3, #4
 8003db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003dbc:	e00c      	b.n	8003dd8 <USER_SPI_ioctl+0x2c8>
		break;
 8003dbe:	bf00      	nop
 8003dc0:	e00a      	b.n	8003dd8 <USER_SPI_ioctl+0x2c8>
		break;
 8003dc2:	bf00      	nop
 8003dc4:	e008      	b.n	8003dd8 <USER_SPI_ioctl+0x2c8>
		break;
 8003dc6:	bf00      	nop
 8003dc8:	e006      	b.n	8003dd8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003dca:	bf00      	nop
 8003dcc:	e004      	b.n	8003dd8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003dce:	bf00      	nop
 8003dd0:	e002      	b.n	8003dd8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <USER_SPI_ioctl+0x2c8>
		break;
 8003dd6:	bf00      	nop
	}

	despiselect();
 8003dd8:	f7ff fcd4 	bl	8003784 <despiselect>

	return res;
 8003ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3730      	adds	r7, #48	; 0x30
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000020 	.word	0x20000020
 8003dec:	2000023c 	.word	0x2000023c

08003df0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <disk_status+0x30>)
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	79fa      	ldrb	r2, [r7, #7]
 8003e08:	4905      	ldr	r1, [pc, #20]	; (8003e20 <disk_status+0x30>)
 8003e0a:	440a      	add	r2, r1
 8003e0c:	7a12      	ldrb	r2, [r2, #8]
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4798      	blx	r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000270 	.word	0x20000270

08003e24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <disk_initialize+0x48>)
 8003e36:	5cd3      	ldrb	r3, [r2, r3]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d111      	bne.n	8003e60 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <disk_initialize+0x48>)
 8003e40:	2101      	movs	r1, #1
 8003e42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <disk_initialize+0x48>)
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	79fa      	ldrb	r2, [r7, #7]
 8003e52:	4906      	ldr	r1, [pc, #24]	; (8003e6c <disk_initialize+0x48>)
 8003e54:	440a      	add	r2, r1
 8003e56:	7a12      	ldrb	r2, [r2, #8]
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4798      	blx	r3
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000270 	.word	0x20000270

08003e70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <disk_read+0x3c>)
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	689c      	ldr	r4, [r3, #8]
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	4a07      	ldr	r2, [pc, #28]	; (8003eac <disk_read+0x3c>)
 8003e90:	4413      	add	r3, r2
 8003e92:	7a18      	ldrb	r0, [r3, #8]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	47a0      	blx	r4
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd90      	pop	{r4, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000270 	.word	0x20000270

08003eb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <disk_write+0x3c>)
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	68dc      	ldr	r4, [r3, #12]
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	4a07      	ldr	r2, [pc, #28]	; (8003eec <disk_write+0x3c>)
 8003ed0:	4413      	add	r3, r2
 8003ed2:	7a18      	ldrb	r0, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	47a0      	blx	r4
 8003edc:	4603      	mov	r3, r0
 8003ede:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd90      	pop	{r4, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000270 	.word	0x20000270

08003ef0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	603a      	str	r2, [r7, #0]
 8003efa:	71fb      	strb	r3, [r7, #7]
 8003efc:	460b      	mov	r3, r1
 8003efe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <disk_ioctl+0x38>)
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	79fa      	ldrb	r2, [r7, #7]
 8003f0e:	4906      	ldr	r1, [pc, #24]	; (8003f28 <disk_ioctl+0x38>)
 8003f10:	440a      	add	r2, r1
 8003f12:	7a10      	ldrb	r0, [r2, #8]
 8003f14:	79b9      	ldrb	r1, [r7, #6]
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	4798      	blx	r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	73fb      	strb	r3, [r7, #15]
  return res;
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20000270 	.word	0x20000270

08003f2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3301      	adds	r3, #1
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003f3c:	89fb      	ldrh	r3, [r7, #14]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	b21a      	sxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b21b      	sxth	r3, r3
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003f4e:	89fb      	ldrh	r3, [r7, #14]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3303      	adds	r3, #3
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	3202      	adds	r2, #2
 8003f74:	7812      	ldrb	r2, [r2, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	3201      	adds	r2, #1
 8003f82:	7812      	ldrb	r2, [r2, #0]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	7812      	ldrb	r2, [r2, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
	return rv;
 8003f94:	68fb      	ldr	r3, [r7, #12]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	887a      	ldrh	r2, [r7, #2]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	887b      	ldrh	r3, [r7, #2]
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	0a1b      	lsrs	r3, r3, #8
 8003ff2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	1c53      	adds	r3, r2, #1
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1c59      	adds	r1, r3, #1
 8004054:	6179      	str	r1, [r7, #20]
 8004056:	7812      	ldrb	r2, [r2, #0]
 8004058:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3b01      	subs	r3, #1
 800405e:	607b      	str	r3, [r7, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f1      	bne.n	800404a <mem_cpy+0x1a>
	}
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004072:	b480      	push	{r7}
 8004074:	b087      	sub	sp, #28
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	617a      	str	r2, [r7, #20]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3b01      	subs	r3, #1
 8004092:	607b      	str	r3, [r7, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f3      	bne.n	8004082 <mem_set+0x10>
}
 800409a:	bf00      	nop
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80040a8:	b480      	push	{r7}
 80040aa:	b089      	sub	sp, #36	; 0x24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	61fa      	str	r2, [r7, #28]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	4619      	mov	r1, r3
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	61ba      	str	r2, [r7, #24]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	1acb      	subs	r3, r1, r3
 80040d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3b01      	subs	r3, #1
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <mem_cmp+0x40>
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0eb      	beq.n	80040c0 <mem_cmp+0x18>

	return r;
 80040e8:	697b      	ldr	r3, [r7, #20]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3724      	adds	r7, #36	; 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004100:	e002      	b.n	8004108 <chk_chr+0x12>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3301      	adds	r3, #1
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <chk_chr+0x26>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	4293      	cmp	r3, r2
 800411a:	d1f2      	bne.n	8004102 <chk_chr+0xc>
	return *str;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	781b      	ldrb	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e029      	b.n	8004194 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004140:	4a27      	ldr	r2, [pc, #156]	; (80041e0 <chk_lock+0xb4>)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	4413      	add	r3, r2
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01d      	beq.n	800418a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800414e:	4a24      	ldr	r2, [pc, #144]	; (80041e0 <chk_lock+0xb4>)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	4413      	add	r3, r2
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d116      	bne.n	800418e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004160:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <chk_lock+0xb4>)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	4413      	add	r3, r2
 8004168:	3304      	adds	r3, #4
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004170:	429a      	cmp	r2, r3
 8004172:	d10c      	bne.n	800418e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004174:	4a1a      	ldr	r2, [pc, #104]	; (80041e0 <chk_lock+0xb4>)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	4413      	add	r3, r2
 800417c:	3308      	adds	r3, #8
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004184:	429a      	cmp	r2, r3
 8004186:	d102      	bne.n	800418e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004188:	e007      	b.n	800419a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3301      	adds	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d9d2      	bls.n	8004140 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d109      	bne.n	80041b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <chk_lock+0x80>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d101      	bne.n	80041b0 <chk_lock+0x84>
 80041ac:	2300      	movs	r3, #0
 80041ae:	e010      	b.n	80041d2 <chk_lock+0xa6>
 80041b0:	2312      	movs	r3, #18
 80041b2:	e00e      	b.n	80041d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d108      	bne.n	80041cc <chk_lock+0xa0>
 80041ba:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <chk_lock+0xb4>)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	4413      	add	r3, r2
 80041c2:	330c      	adds	r3, #12
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ca:	d101      	bne.n	80041d0 <chk_lock+0xa4>
 80041cc:	2310      	movs	r3, #16
 80041ce:	e000      	b.n	80041d2 <chk_lock+0xa6>
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000250 	.word	0x20000250

080041e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	e002      	b.n	80041f6 <enq_lock+0x12>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3301      	adds	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d806      	bhi.n	800420a <enq_lock+0x26>
 80041fc:	4a09      	ldr	r2, [pc, #36]	; (8004224 <enq_lock+0x40>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	4413      	add	r3, r2
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f2      	bne.n	80041f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b02      	cmp	r3, #2
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000250 	.word	0x20000250

08004228 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	e01f      	b.n	8004278 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004238:	4a41      	ldr	r2, [pc, #260]	; (8004340 <inc_lock+0x118>)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	4413      	add	r3, r2
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d113      	bne.n	8004272 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800424a:	4a3d      	ldr	r2, [pc, #244]	; (8004340 <inc_lock+0x118>)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800425a:	429a      	cmp	r2, r3
 800425c:	d109      	bne.n	8004272 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800425e:	4a38      	ldr	r2, [pc, #224]	; (8004340 <inc_lock+0x118>)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	4413      	add	r3, r2
 8004266:	3308      	adds	r3, #8
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800426e:	429a      	cmp	r2, r3
 8004270:	d006      	beq.n	8004280 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d9dc      	bls.n	8004238 <inc_lock+0x10>
 800427e:	e000      	b.n	8004282 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004280:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d132      	bne.n	80042ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e002      	b.n	8004294 <inc_lock+0x6c>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3301      	adds	r3, #1
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d806      	bhi.n	80042a8 <inc_lock+0x80>
 800429a:	4a29      	ldr	r2, [pc, #164]	; (8004340 <inc_lock+0x118>)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	4413      	add	r3, r2
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f2      	bne.n	800428e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d101      	bne.n	80042b2 <inc_lock+0x8a>
 80042ae:	2300      	movs	r3, #0
 80042b0:	e040      	b.n	8004334 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4922      	ldr	r1, [pc, #136]	; (8004340 <inc_lock+0x118>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	440b      	add	r3, r1
 80042be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	491e      	ldr	r1, [pc, #120]	; (8004340 <inc_lock+0x118>)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	440b      	add	r3, r1
 80042cc:	3304      	adds	r3, #4
 80042ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	491a      	ldr	r1, [pc, #104]	; (8004340 <inc_lock+0x118>)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	440b      	add	r3, r1
 80042dc:	3308      	adds	r3, #8
 80042de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80042e0:	4a17      	ldr	r2, [pc, #92]	; (8004340 <inc_lock+0x118>)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	4413      	add	r3, r2
 80042e8:	330c      	adds	r3, #12
 80042ea:	2200      	movs	r2, #0
 80042ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <inc_lock+0xe0>
 80042f4:	4a12      	ldr	r2, [pc, #72]	; (8004340 <inc_lock+0x118>)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	4413      	add	r3, r2
 80042fc:	330c      	adds	r3, #12
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <inc_lock+0xe0>
 8004304:	2300      	movs	r3, #0
 8004306:	e015      	b.n	8004334 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d108      	bne.n	8004320 <inc_lock+0xf8>
 800430e:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <inc_lock+0x118>)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	4413      	add	r3, r2
 8004316:	330c      	adds	r3, #12
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	e001      	b.n	8004324 <inc_lock+0xfc>
 8004320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004324:	4906      	ldr	r1, [pc, #24]	; (8004340 <inc_lock+0x118>)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	440b      	add	r3, r1
 800432c:	330c      	adds	r3, #12
 800432e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3301      	adds	r3, #1
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	20000250 	.word	0x20000250

08004344 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3b01      	subs	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d825      	bhi.n	80043a4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004358:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <dec_lock+0x74>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	4413      	add	r3, r2
 8004360:	330c      	adds	r3, #12
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004366:	89fb      	ldrh	r3, [r7, #14]
 8004368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436c:	d101      	bne.n	8004372 <dec_lock+0x2e>
 800436e:	2300      	movs	r3, #0
 8004370:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004372:	89fb      	ldrh	r3, [r7, #14]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <dec_lock+0x3a>
 8004378:	89fb      	ldrh	r3, [r7, #14]
 800437a:	3b01      	subs	r3, #1
 800437c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800437e:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <dec_lock+0x74>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	330c      	adds	r3, #12
 8004388:	89fa      	ldrh	r2, [r7, #14]
 800438a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800438c:	89fb      	ldrh	r3, [r7, #14]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d105      	bne.n	800439e <dec_lock+0x5a>
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <dec_lock+0x74>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	4413      	add	r3, r2
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	737b      	strb	r3, [r7, #13]
 80043a2:	e001      	b.n	80043a8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80043a4:	2302      	movs	r3, #2
 80043a6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80043a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000250 	.word	0x20000250

080043bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e010      	b.n	80043ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80043ca:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <clear_lock+0x44>)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	4413      	add	r3, r2
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d105      	bne.n	80043e6 <clear_lock+0x2a>
 80043da:	4a09      	ldr	r2, [pc, #36]	; (8004400 <clear_lock+0x44>)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	4413      	add	r3, r2
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d9eb      	bls.n	80043ca <clear_lock+0xe>
	}
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	20000250 	.word	0x20000250

08004404 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	78db      	ldrb	r3, [r3, #3]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d034      	beq.n	8004482 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	7858      	ldrb	r0, [r3, #1]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004428:	2301      	movs	r3, #1
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	f7ff fd40 	bl	8003eb0 <disk_write>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e022      	b.n	8004482 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	1ad2      	subs	r2, r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	429a      	cmp	r2, r3
 8004450:	d217      	bcs.n	8004482 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	789b      	ldrb	r3, [r3, #2]
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	e010      	b.n	800447c <sync_window+0x78>
					wsect += fs->fsize;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4413      	add	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7858      	ldrb	r0, [r3, #1]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800446e:	2301      	movs	r3, #1
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	f7ff fd1d 	bl	8003eb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	3b01      	subs	r3, #1
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d8eb      	bhi.n	800445a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d01b      	beq.n	80044dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ffad 	bl	8004404 <sync_window>
 80044aa:	4603      	mov	r3, r0
 80044ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d113      	bne.n	80044dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	7858      	ldrb	r0, [r3, #1]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80044be:	2301      	movs	r3, #1
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	f7ff fcd5 	bl	8003e70 <disk_read>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295
 80044d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff87 	bl	8004404 <sync_window>
 80044f6:	4603      	mov	r3, r0
 80044f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d158      	bne.n	80045b2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d148      	bne.n	800459a <sync_fs+0xb2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	791b      	ldrb	r3, [r3, #4]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d144      	bne.n	800459a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3330      	adds	r3, #48	; 0x30
 8004514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fda9 	bl	8004072 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3330      	adds	r3, #48	; 0x30
 8004524:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004528:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fd38 	bl	8003fa2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3330      	adds	r3, #48	; 0x30
 8004536:	4921      	ldr	r1, [pc, #132]	; (80045bc <sync_fs+0xd4>)
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fd4d 	bl	8003fd8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3330      	adds	r3, #48	; 0x30
 8004542:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004546:	491e      	ldr	r1, [pc, #120]	; (80045c0 <sync_fs+0xd8>)
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fd45 	bl	8003fd8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3330      	adds	r3, #48	; 0x30
 8004552:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7ff fd3b 	bl	8003fd8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3330      	adds	r3, #48	; 0x30
 8004566:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f7ff fd31 	bl	8003fd8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7858      	ldrb	r0, [r3, #1]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458e:	2301      	movs	r3, #1
 8004590:	f7ff fc8e 	bl	8003eb0 <disk_write>
			fs->fsi_flag = 0;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	2200      	movs	r2, #0
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff fca4 	bl	8003ef0 <disk_ioctl>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <sync_fs+0xca>
 80045ae:	2301      	movs	r3, #1
 80045b0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	41615252 	.word	0x41615252
 80045c0:	61417272 	.word	0x61417272

080045c4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	3b02      	subs	r3, #2
 80045d2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	3b02      	subs	r3, #2
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d301      	bcc.n	80045e4 <clust2sect+0x20>
 80045e0:	2300      	movs	r3, #0
 80045e2:	e008      	b.n	80045f6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	895b      	ldrh	r3, [r3, #10]
 80045e8:	461a      	mov	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	fb03 f202 	mul.w	r2, r3, r2
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	4413      	add	r3, r2
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d904      	bls.n	8004622 <get_fat+0x20>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004622:	2301      	movs	r3, #1
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e08f      	b.n	8004748 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004628:	f04f 33ff 	mov.w	r3, #4294967295
 800462c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b03      	cmp	r3, #3
 8004634:	d062      	beq.n	80046fc <get_fat+0xfa>
 8004636:	2b03      	cmp	r3, #3
 8004638:	dc7c      	bgt.n	8004734 <get_fat+0x132>
 800463a:	2b01      	cmp	r3, #1
 800463c:	d002      	beq.n	8004644 <get_fat+0x42>
 800463e:	2b02      	cmp	r3, #2
 8004640:	d042      	beq.n	80046c8 <get_fat+0xc6>
 8004642:	e077      	b.n	8004734 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6a1a      	ldr	r2, [r3, #32]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	0a5b      	lsrs	r3, r3, #9
 800465a:	4413      	add	r3, r2
 800465c:	4619      	mov	r1, r3
 800465e:	6938      	ldr	r0, [r7, #16]
 8004660:	f7ff ff14 	bl	800448c <move_window>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d167      	bne.n	800473a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	60fa      	str	r2, [r7, #12]
 8004670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800467c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6a1a      	ldr	r2, [r3, #32]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	0a5b      	lsrs	r3, r3, #9
 8004686:	4413      	add	r3, r2
 8004688:	4619      	mov	r1, r3
 800468a:	6938      	ldr	r0, [r7, #16]
 800468c:	f7ff fefe 	bl	800448c <move_window>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d153      	bne.n	800473e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	461a      	mov	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <get_fat+0xbc>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	e002      	b.n	80046c4 <get_fat+0xc2>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c4:	617b      	str	r3, [r7, #20]
			break;
 80046c6:	e03f      	b.n	8004748 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	0a1b      	lsrs	r3, r3, #8
 80046d0:	4413      	add	r3, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	6938      	ldr	r0, [r7, #16]
 80046d6:	f7ff fed9 	bl	800448c <move_window>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d130      	bne.n	8004742 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80046ee:	4413      	add	r3, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fc1b 	bl	8003f2c <ld_word>
 80046f6:	4603      	mov	r3, r0
 80046f8:	617b      	str	r3, [r7, #20]
			break;
 80046fa:	e025      	b.n	8004748 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	09db      	lsrs	r3, r3, #7
 8004704:	4413      	add	r3, r2
 8004706:	4619      	mov	r1, r3
 8004708:	6938      	ldr	r0, [r7, #16]
 800470a:	f7ff febf 	bl	800448c <move_window>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d118      	bne.n	8004746 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004722:	4413      	add	r3, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fc19 	bl	8003f5c <ld_dword>
 800472a:	4603      	mov	r3, r0
 800472c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004730:	617b      	str	r3, [r7, #20]
			break;
 8004732:	e009      	b.n	8004748 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004734:	2301      	movs	r3, #1
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e006      	b.n	8004748 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800473a:	bf00      	nop
 800473c:	e004      	b.n	8004748 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800473e:	bf00      	nop
 8004740:	e002      	b.n	8004748 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004742:	bf00      	nop
 8004744:	e000      	b.n	8004748 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004746:	bf00      	nop
		}
	}

	return val;
 8004748:	697b      	ldr	r3, [r7, #20]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004752:	b590      	push	{r4, r7, lr}
 8004754:	b089      	sub	sp, #36	; 0x24
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800475e:	2302      	movs	r3, #2
 8004760:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b01      	cmp	r3, #1
 8004766:	f240 80d9 	bls.w	800491c <put_fat+0x1ca>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	429a      	cmp	r2, r3
 8004772:	f080 80d3 	bcs.w	800491c <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b03      	cmp	r3, #3
 800477c:	f000 8096 	beq.w	80048ac <put_fat+0x15a>
 8004780:	2b03      	cmp	r3, #3
 8004782:	f300 80cb 	bgt.w	800491c <put_fat+0x1ca>
 8004786:	2b01      	cmp	r3, #1
 8004788:	d002      	beq.n	8004790 <put_fat+0x3e>
 800478a:	2b02      	cmp	r3, #2
 800478c:	d06e      	beq.n	800486c <put_fat+0x11a>
 800478e:	e0c5      	b.n	800491c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4413      	add	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1a      	ldr	r2, [r3, #32]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	0a5b      	lsrs	r3, r3, #9
 80047a6:	4413      	add	r3, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff fe6e 	bl	800448c <move_window>
 80047b0:	4603      	mov	r3, r0
 80047b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80047b4:	7ffb      	ldrb	r3, [r7, #31]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 80a9 	bne.w	800490e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	1c59      	adds	r1, r3, #1
 80047c6:	61b9      	str	r1, [r7, #24]
 80047c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047cc:	4413      	add	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <put_fat+0xa4>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	b25a      	sxtb	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	b25b      	sxtb	r3, r3
 80047ee:	4313      	orrs	r3, r2
 80047f0:	b25b      	sxtb	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	e001      	b.n	80047fa <put_fat+0xa8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	0a5b      	lsrs	r3, r3, #9
 800480c:	4413      	add	r3, r2
 800480e:	4619      	mov	r1, r3
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7ff fe3b 	bl	800448c <move_window>
 8004816:	4603      	mov	r3, r0
 8004818:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800481a:	7ffb      	ldrb	r3, [r7, #31]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d178      	bne.n	8004912 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482c:	4413      	add	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <put_fat+0xf0>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	b2db      	uxtb	r3, r3
 8004840:	e00e      	b.n	8004860 <put_fat+0x10e>
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b25b      	sxtb	r3, r3
 8004848:	f023 030f 	bic.w	r3, r3, #15
 800484c:	b25a      	sxtb	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	b25b      	sxtb	r3, r3
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	b25b      	sxtb	r3, r3
 800485a:	4313      	orrs	r3, r2
 800485c:	b25b      	sxtb	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	70da      	strb	r2, [r3, #3]
			break;
 800486a:	e057      	b.n	800491c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1a      	ldr	r2, [r3, #32]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	4413      	add	r3, r2
 8004876:	4619      	mov	r1, r3
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff fe07 	bl	800448c <move_window>
 800487e:	4603      	mov	r3, r0
 8004880:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004882:	7ffb      	ldrb	r3, [r7, #31]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d146      	bne.n	8004916 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004896:	4413      	add	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	b292      	uxth	r2, r2
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fb7f 	bl	8003fa2 <st_word>
			fs->wflag = 1;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	70da      	strb	r2, [r3, #3]
			break;
 80048aa:	e037      	b.n	800491c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	09db      	lsrs	r3, r3, #7
 80048b4:	4413      	add	r3, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7ff fde7 	bl	800448c <move_window>
 80048be:	4603      	mov	r3, r0
 80048c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048c2:	7ffb      	ldrb	r3, [r7, #31]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d128      	bne.n	800491a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80048dc:	4413      	add	r3, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fb3c 	bl	8003f5c <ld_dword>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80048ea:	4323      	orrs	r3, r4
 80048ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80048fc:	4413      	add	r3, r2
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff fb69 	bl	8003fd8 <st_dword>
			fs->wflag = 1;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	70da      	strb	r2, [r3, #3]
			break;
 800490c:	e006      	b.n	800491c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800490e:	bf00      	nop
 8004910:	e004      	b.n	800491c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004912:	bf00      	nop
 8004914:	e002      	b.n	800491c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004916:	bf00      	nop
 8004918:	e000      	b.n	800491c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800491a:	bf00      	nop
		}
	}
	return res;
 800491c:	7ffb      	ldrb	r3, [r7, #31]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3724      	adds	r7, #36	; 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd90      	pop	{r4, r7, pc}

08004926 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d904      	bls.n	800494c <remove_chain+0x26>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	429a      	cmp	r2, r3
 800494a:	d301      	bcc.n	8004950 <remove_chain+0x2a>
 800494c:	2302      	movs	r3, #2
 800494e:	e04b      	b.n	80049e8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004956:	f04f 32ff 	mov.w	r2, #4294967295
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	69b8      	ldr	r0, [r7, #24]
 800495e:	f7ff fef8 	bl	8004752 <put_fat>
 8004962:	4603      	mov	r3, r0
 8004964:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004966:	7ffb      	ldrb	r3, [r7, #31]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <remove_chain+0x4a>
 800496c:	7ffb      	ldrb	r3, [r7, #31]
 800496e:	e03b      	b.n	80049e8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff fe45 	bl	8004602 <get_fat>
 8004978:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d031      	beq.n	80049e4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <remove_chain+0x64>
 8004986:	2302      	movs	r3, #2
 8004988:	e02e      	b.n	80049e8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d101      	bne.n	8004996 <remove_chain+0x70>
 8004992:	2301      	movs	r3, #1
 8004994:	e028      	b.n	80049e8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004996:	2200      	movs	r2, #0
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	69b8      	ldr	r0, [r7, #24]
 800499c:	f7ff fed9 	bl	8004752 <put_fat>
 80049a0:	4603      	mov	r3, r0
 80049a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80049a4:	7ffb      	ldrb	r3, [r7, #31]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <remove_chain+0x88>
 80049aa:	7ffb      	ldrb	r3, [r7, #31]
 80049ac:	e01c      	b.n	80049e8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	3b02      	subs	r3, #2
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d20b      	bcs.n	80049d4 <remove_chain+0xae>
			fs->free_clst++;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	791b      	ldrb	r3, [r3, #4]
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d3c6      	bcc.n	8004970 <remove_chain+0x4a>
 80049e2:	e000      	b.n	80049e6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80049e4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d004      	beq.n	8004a1c <create_chain+0x2c>
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d31b      	bcc.n	8004a54 <create_chain+0x64>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	e018      	b.n	8004a54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004a22:	6839      	ldr	r1, [r7, #0]
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fdec 	bl	8004602 <get_fat>
 8004a2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d801      	bhi.n	8004a36 <create_chain+0x46>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e070      	b.n	8004b18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d101      	bne.n	8004a42 <create_chain+0x52>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	e06a      	b.n	8004b18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d201      	bcs.n	8004a50 <create_chain+0x60>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	e063      	b.n	8004b18 <create_chain+0x128>
		scl = clst;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d307      	bcc.n	8004a78 <create_chain+0x88>
				ncl = 2;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d901      	bls.n	8004a78 <create_chain+0x88>
 8004a74:	2300      	movs	r3, #0
 8004a76:	e04f      	b.n	8004b18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004a78:	69f9      	ldr	r1, [r7, #28]
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff fdc1 	bl	8004602 <get_fat>
 8004a80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00e      	beq.n	8004aa6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d003      	beq.n	8004a96 <create_chain+0xa6>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d101      	bne.n	8004a9a <create_chain+0xaa>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	e03e      	b.n	8004b18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d1da      	bne.n	8004a58 <create_chain+0x68>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e038      	b.n	8004b18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004aa6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aac:	69f9      	ldr	r1, [r7, #28]
 8004aae:	6938      	ldr	r0, [r7, #16]
 8004ab0:	f7ff fe4f 	bl	8004752 <put_fat>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <create_chain+0xe2>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d006      	beq.n	8004ad2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	6839      	ldr	r1, [r7, #0]
 8004ac8:	6938      	ldr	r0, [r7, #16]
 8004aca:	f7ff fe42 	bl	8004752 <put_fat>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d116      	bne.n	8004b06 <create_chain+0x116>
		fs->last_clst = ncl;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	3b02      	subs	r3, #2
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d804      	bhi.n	8004af6 <create_chain+0x106>
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	1e5a      	subs	r2, r3, #1
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	791b      	ldrb	r3, [r3, #4]
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	711a      	strb	r2, [r3, #4]
 8004b04:	e007      	b.n	8004b16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d102      	bne.n	8004b12 <create_chain+0x122>
 8004b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b10:	e000      	b.n	8004b14 <create_chain+0x124>
 8004b12:	2301      	movs	r3, #1
 8004b14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004b16:	69fb      	ldr	r3, [r7, #28]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	3304      	adds	r3, #4
 8004b36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	0a5b      	lsrs	r3, r3, #9
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	8952      	ldrh	r2, [r2, #10]
 8004b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b44:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1d1a      	adds	r2, r3, #4
 8004b4a:	613a      	str	r2, [r7, #16]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <clmt_clust+0x3a>
 8004b56:	2300      	movs	r3, #0
 8004b58:	e010      	b.n	8004b7c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d307      	bcc.n	8004b72 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004b70:	e7e9      	b.n	8004b46 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004b72:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	4413      	add	r3, r2
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b9e:	d204      	bcs.n	8004baa <dir_sdi+0x22>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <dir_sdi+0x26>
		return FR_INT_ERR;
 8004baa:	2302      	movs	r3, #2
 8004bac:	e063      	b.n	8004c76 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <dir_sdi+0x46>
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d902      	bls.n	8004bce <dir_sdi+0x46>
		clst = fs->dirbase;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10c      	bne.n	8004bee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	8912      	ldrh	r2, [r2, #8]
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d301      	bcc.n	8004be4 <dir_sdi+0x5c>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e048      	b.n	8004c76 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	61da      	str	r2, [r3, #28]
 8004bec:	e029      	b.n	8004c42 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	895b      	ldrh	r3, [r3, #10]
 8004bf2:	025b      	lsls	r3, r3, #9
 8004bf4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004bf6:	e019      	b.n	8004c2c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6979      	ldr	r1, [r7, #20]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fd00 	bl	8004602 <get_fat>
 8004c02:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d101      	bne.n	8004c10 <dir_sdi+0x88>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e032      	b.n	8004c76 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d904      	bls.n	8004c20 <dir_sdi+0x98>
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d301      	bcc.n	8004c24 <dir_sdi+0x9c>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e028      	b.n	8004c76 <dir_sdi+0xee>
			ofs -= csz;
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d2e1      	bcs.n	8004bf8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004c34:	6979      	ldr	r1, [r7, #20]
 8004c36:	6938      	ldr	r0, [r7, #16]
 8004c38:	f7ff fcc4 	bl	80045c4 <clust2sect>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <dir_sdi+0xcc>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e010      	b.n	8004c76 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	0a5b      	lsrs	r3, r3, #9
 8004c5c:	441a      	add	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	3320      	adds	r3, #32
 8004c94:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <dir_next+0x28>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ca4:	d301      	bcc.n	8004caa <dir_next+0x2c>
 8004ca6:	2304      	movs	r3, #4
 8004ca8:	e0aa      	b.n	8004e00 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 8098 	bne.w	8004de6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	8912      	ldrh	r2, [r2, #8]
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	f0c0 8088 	bcc.w	8004de6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	61da      	str	r2, [r3, #28]
 8004cdc:	2304      	movs	r3, #4
 8004cde:	e08f      	b.n	8004e00 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	0a5b      	lsrs	r3, r3, #9
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	8952      	ldrh	r2, [r2, #10]
 8004ce8:	3a01      	subs	r2, #1
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d17a      	bne.n	8004de6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f7ff fc82 	bl	8004602 <get_fat>
 8004cfe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d801      	bhi.n	8004d0a <dir_next+0x8c>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e07a      	b.n	8004e00 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d101      	bne.n	8004d16 <dir_next+0x98>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e074      	b.n	8004e00 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d358      	bcc.n	8004dd2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d104      	bne.n	8004d30 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	61da      	str	r2, [r3, #28]
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	e067      	b.n	8004e00 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f7ff fe59 	bl	80049f0 <create_chain>
 8004d3e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <dir_next+0xcc>
 8004d46:	2307      	movs	r3, #7
 8004d48:	e05a      	b.n	8004e00 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <dir_next+0xd6>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e055      	b.n	8004e00 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d101      	bne.n	8004d60 <dir_next+0xe2>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e04f      	b.n	8004e00 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff fb4f 	bl	8004404 <sync_window>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <dir_next+0xf2>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e047      	b.n	8004e00 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3330      	adds	r3, #48	; 0x30
 8004d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff f979 	bl	8004072 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	6979      	ldr	r1, [r7, #20]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff fc1c 	bl	80045c4 <clust2sect>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d92:	e012      	b.n	8004dba <dir_next+0x13c>
						fs->wflag = 1;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff fb32 	bl	8004404 <sync_window>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <dir_next+0x12c>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e02a      	b.n	8004e00 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	3301      	adds	r3, #1
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	895b      	ldrh	r3, [r3, #10]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d3e6      	bcc.n	8004d94 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad2      	subs	r2, r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004dd8:	6979      	ldr	r1, [r7, #20]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff fbf2 	bl	80045c4 <clust2sect>
 8004de0:	4602      	mov	r2, r0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df8:	441a      	add	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004e18:	2100      	movs	r1, #0
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff feb4 	bl	8004b88 <dir_sdi>
 8004e20:	4603      	mov	r3, r0
 8004e22:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d12b      	bne.n	8004e82 <dir_alloc+0x7a>
		n = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4619      	mov	r1, r3
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff fb29 	bl	800448c <move_window>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11d      	bne.n	8004e80 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2be5      	cmp	r3, #229	; 0xe5
 8004e4c:	d004      	beq.n	8004e58 <dir_alloc+0x50>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d107      	bne.n	8004e68 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d102      	bne.n	8004e6c <dir_alloc+0x64>
 8004e66:	e00c      	b.n	8004e82 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004e68:	2300      	movs	r3, #0
 8004e6a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ff05 	bl	8004c7e <dir_next>
 8004e74:	4603      	mov	r3, r0
 8004e76:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0d7      	beq.n	8004e2e <dir_alloc+0x26>
 8004e7e:	e000      	b.n	8004e82 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004e80:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d101      	bne.n	8004e8c <dir_alloc+0x84>
 8004e88:	2307      	movs	r3, #7
 8004e8a:	75fb      	strb	r3, [r7, #23]
	return res;
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	331a      	adds	r3, #26
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff f841 	bl	8003f2c <ld_word>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d109      	bne.n	8004eca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	3314      	adds	r3, #20
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff f836 	bl	8003f2c <ld_word>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004eca:	68fb      	ldr	r3, [r7, #12]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	331a      	adds	r3, #26
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	b292      	uxth	r2, r2
 8004ee8:	4611      	mov	r1, r2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff f859 	bl	8003fa2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d109      	bne.n	8004f0c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f103 0214 	add.w	r2, r3, #20
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f7ff f84b 	bl	8003fa2 <st_word>
	}
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004f22:	2100      	movs	r1, #0
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff fe2f 	bl	8004b88 <dir_sdi>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <dir_find+0x24>
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	e03e      	b.n	8004fb6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6938      	ldr	r0, [r7, #16]
 8004f40:	f7ff faa4 	bl	800448c <move_window>
 8004f44:	4603      	mov	r3, r0
 8004f46:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d12f      	bne.n	8004fae <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <dir_find+0x4e>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	75fb      	strb	r3, [r7, #23]
 8004f60:	e028      	b.n	8004fb4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	330b      	adds	r3, #11
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	330b      	adds	r3, #11
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <dir_find+0x86>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a18      	ldr	r0, [r3, #32]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3324      	adds	r3, #36	; 0x24
 8004f8c:	220b      	movs	r2, #11
 8004f8e:	4619      	mov	r1, r3
 8004f90:	f7ff f88a 	bl	80040a8 <mem_cmp>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fe6e 	bl	8004c7e <dir_next>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0c5      	beq.n	8004f38 <dir_find+0x24>
 8004fac:	e002      	b.n	8004fb4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004fb2:	bf00      	nop

	return res;
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004fcc:	2101      	movs	r1, #1
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff ff1a 	bl	8004e08 <dir_alloc>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d11c      	bne.n	8005018 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	68b8      	ldr	r0, [r7, #8]
 8004fe6:	f7ff fa51 	bl	800448c <move_window>
 8004fea:	4603      	mov	r3, r0
 8004fec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d111      	bne.n	8005018 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff f838 	bl	8004072 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a18      	ldr	r0, [r3, #32]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3324      	adds	r3, #36	; 0x24
 800500a:	220b      	movs	r2, #11
 800500c:	4619      	mov	r1, r3
 800500e:	f7ff f80f 	bl	8004030 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2201      	movs	r2, #1
 8005016:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005018:	7bfb      	ldrb	r3, [r7, #15]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3324      	adds	r3, #36	; 0x24
 8005038:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800503a:	220b      	movs	r2, #11
 800503c:	2120      	movs	r1, #32
 800503e:	68b8      	ldr	r0, [r7, #8]
 8005040:	f7ff f817 	bl	8004072 <mem_set>
	si = i = 0; ni = 8;
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	2308      	movs	r3, #8
 800504e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	61fa      	str	r2, [r7, #28]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800505e:	7efb      	ldrb	r3, [r7, #27]
 8005060:	2b20      	cmp	r3, #32
 8005062:	d94e      	bls.n	8005102 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005064:	7efb      	ldrb	r3, [r7, #27]
 8005066:	2b2f      	cmp	r3, #47	; 0x2f
 8005068:	d006      	beq.n	8005078 <create_name+0x54>
 800506a:	7efb      	ldrb	r3, [r7, #27]
 800506c:	2b5c      	cmp	r3, #92	; 0x5c
 800506e:	d110      	bne.n	8005092 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005070:	e002      	b.n	8005078 <create_name+0x54>
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b2f      	cmp	r3, #47	; 0x2f
 8005082:	d0f6      	beq.n	8005072 <create_name+0x4e>
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b5c      	cmp	r3, #92	; 0x5c
 800508e:	d0f0      	beq.n	8005072 <create_name+0x4e>
			break;
 8005090:	e038      	b.n	8005104 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005092:	7efb      	ldrb	r3, [r7, #27]
 8005094:	2b2e      	cmp	r3, #46	; 0x2e
 8005096:	d003      	beq.n	80050a0 <create_name+0x7c>
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	d30c      	bcc.n	80050ba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b0b      	cmp	r3, #11
 80050a4:	d002      	beq.n	80050ac <create_name+0x88>
 80050a6:	7efb      	ldrb	r3, [r7, #27]
 80050a8:	2b2e      	cmp	r3, #46	; 0x2e
 80050aa:	d001      	beq.n	80050b0 <create_name+0x8c>
 80050ac:	2306      	movs	r3, #6
 80050ae:	e044      	b.n	800513a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80050b0:	2308      	movs	r3, #8
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	230b      	movs	r3, #11
 80050b6:	617b      	str	r3, [r7, #20]
			continue;
 80050b8:	e022      	b.n	8005100 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80050ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	da04      	bge.n	80050cc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80050c2:	7efb      	ldrb	r3, [r7, #27]
 80050c4:	3b80      	subs	r3, #128	; 0x80
 80050c6:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <create_name+0x120>)
 80050c8:	5cd3      	ldrb	r3, [r2, r3]
 80050ca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80050cc:	7efb      	ldrb	r3, [r7, #27]
 80050ce:	4619      	mov	r1, r3
 80050d0:	481d      	ldr	r0, [pc, #116]	; (8005148 <create_name+0x124>)
 80050d2:	f7ff f810 	bl	80040f6 <chk_chr>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <create_name+0xbc>
 80050dc:	2306      	movs	r3, #6
 80050de:	e02c      	b.n	800513a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80050e0:	7efb      	ldrb	r3, [r7, #27]
 80050e2:	2b60      	cmp	r3, #96	; 0x60
 80050e4:	d905      	bls.n	80050f2 <create_name+0xce>
 80050e6:	7efb      	ldrb	r3, [r7, #27]
 80050e8:	2b7a      	cmp	r3, #122	; 0x7a
 80050ea:	d802      	bhi.n	80050f2 <create_name+0xce>
 80050ec:	7efb      	ldrb	r3, [r7, #27]
 80050ee:	3b20      	subs	r3, #32
 80050f0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	613a      	str	r2, [r7, #16]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4413      	add	r3, r2
 80050fc:	7efa      	ldrb	r2, [r7, #27]
 80050fe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005100:	e7a6      	b.n	8005050 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005102:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	441a      	add	r2, r3
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <create_name+0xf4>
 8005114:	2306      	movs	r3, #6
 8005116:	e010      	b.n	800513a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2be5      	cmp	r3, #229	; 0xe5
 800511e:	d102      	bne.n	8005126 <create_name+0x102>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2205      	movs	r2, #5
 8005124:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005126:	7efb      	ldrb	r3, [r7, #27]
 8005128:	2b20      	cmp	r3, #32
 800512a:	d801      	bhi.n	8005130 <create_name+0x10c>
 800512c:	2204      	movs	r2, #4
 800512e:	e000      	b.n	8005132 <create_name+0x10e>
 8005130:	2200      	movs	r2, #0
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	330b      	adds	r3, #11
 8005136:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005138:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800513a:	4618      	mov	r0, r3
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	080071ac 	.word	0x080071ac
 8005148:	08007150 	.word	0x08007150

0800514c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005160:	e002      	b.n	8005168 <follow_path+0x1c>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b2f      	cmp	r3, #47	; 0x2f
 800516e:	d0f8      	beq.n	8005162 <follow_path+0x16>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b5c      	cmp	r3, #92	; 0x5c
 8005176:	d0f4      	beq.n	8005162 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2200      	movs	r2, #0
 800517c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b1f      	cmp	r3, #31
 8005184:	d80a      	bhi.n	800519c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2280      	movs	r2, #128	; 0x80
 800518a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800518e:	2100      	movs	r1, #0
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fcf9 	bl	8004b88 <dir_sdi>
 8005196:	4603      	mov	r3, r0
 8005198:	75fb      	strb	r3, [r7, #23]
 800519a:	e043      	b.n	8005224 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800519c:	463b      	mov	r3, r7
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff ff3f 	bl	8005024 <create_name>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d134      	bne.n	800521a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff feaf 	bl	8004f14 <dir_find>
 80051b6:	4603      	mov	r3, r0
 80051b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d127      	bne.n	800521e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80051ce:	7afb      	ldrb	r3, [r7, #11]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d122      	bne.n	800521e <follow_path+0xd2>
 80051d8:	2305      	movs	r3, #5
 80051da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80051dc:	e01f      	b.n	800521e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80051de:	7afb      	ldrb	r3, [r7, #11]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d11c      	bne.n	8005222 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	799b      	ldrb	r3, [r3, #6]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80051f4:	2305      	movs	r3, #5
 80051f6:	75fb      	strb	r3, [r7, #23]
 80051f8:	e014      	b.n	8005224 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005208:	4413      	add	r3, r2
 800520a:	4619      	mov	r1, r3
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f7ff fe42 	bl	8004e96 <ld_clust>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005218:	e7c0      	b.n	800519c <follow_path+0x50>
			if (res != FR_OK) break;
 800521a:	bf00      	nop
 800521c:	e002      	b.n	8005224 <follow_path+0xd8>
				break;
 800521e:	bf00      	nop
 8005220:	e000      	b.n	8005224 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005222:	bf00      	nop
			}
		}
	}

	return res;
 8005224:	7dfb      	ldrb	r3, [r7, #23]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800522e:	b480      	push	{r7}
 8005230:	b087      	sub	sp, #28
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005236:	f04f 33ff 	mov.w	r3, #4294967295
 800523a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d031      	beq.n	80052a8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	e002      	b.n	8005252 <get_ldnumber+0x24>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3301      	adds	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b20      	cmp	r3, #32
 8005258:	d903      	bls.n	8005262 <get_ldnumber+0x34>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b3a      	cmp	r3, #58	; 0x3a
 8005260:	d1f4      	bne.n	800524c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b3a      	cmp	r3, #58	; 0x3a
 8005268:	d11c      	bne.n	80052a4 <get_ldnumber+0x76>
			tp = *path;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	60fa      	str	r2, [r7, #12]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	3b30      	subs	r3, #48	; 0x30
 800527a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b09      	cmp	r3, #9
 8005280:	d80e      	bhi.n	80052a0 <get_ldnumber+0x72>
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	429a      	cmp	r2, r3
 8005288:	d10a      	bne.n	80052a0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d107      	bne.n	80052a0 <get_ldnumber+0x72>
					vol = (int)i;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3301      	adds	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	e002      	b.n	80052aa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80052a8:	693b      	ldr	r3, [r7, #16]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	70da      	strb	r2, [r3, #3]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff f8da 	bl	800448c <move_window>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <check_fs+0x2a>
 80052de:	2304      	movs	r3, #4
 80052e0:	e038      	b.n	8005354 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3330      	adds	r3, #48	; 0x30
 80052e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe fe1e 	bl	8003f2c <ld_word>
 80052f0:	4603      	mov	r3, r0
 80052f2:	461a      	mov	r2, r3
 80052f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <check_fs+0x48>
 80052fc:	2303      	movs	r3, #3
 80052fe:	e029      	b.n	8005354 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005306:	2be9      	cmp	r3, #233	; 0xe9
 8005308:	d009      	beq.n	800531e <check_fs+0x66>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005310:	2beb      	cmp	r3, #235	; 0xeb
 8005312:	d11e      	bne.n	8005352 <check_fs+0x9a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800531a:	2b90      	cmp	r3, #144	; 0x90
 800531c:	d119      	bne.n	8005352 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3330      	adds	r3, #48	; 0x30
 8005322:	3336      	adds	r3, #54	; 0x36
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe fe19 	bl	8003f5c <ld_dword>
 800532a:	4603      	mov	r3, r0
 800532c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <check_fs+0xa4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d101      	bne.n	800533a <check_fs+0x82>
 8005336:	2300      	movs	r3, #0
 8005338:	e00c      	b.n	8005354 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3330      	adds	r3, #48	; 0x30
 800533e:	3352      	adds	r3, #82	; 0x52
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe fe0b 	bl	8003f5c <ld_dword>
 8005346:	4603      	mov	r3, r0
 8005348:	4a05      	ldr	r2, [pc, #20]	; (8005360 <check_fs+0xa8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <check_fs+0x9a>
 800534e:	2300      	movs	r3, #0
 8005350:	e000      	b.n	8005354 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005352:	2302      	movs	r3, #2
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	00544146 	.word	0x00544146
 8005360:	33544146 	.word	0x33544146

08005364 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b096      	sub	sp, #88	; 0x58
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ff58 	bl	800522e <get_ldnumber>
 800537e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005382:	2b00      	cmp	r3, #0
 8005384:	da01      	bge.n	800538a <find_volume+0x26>
 8005386:	230b      	movs	r3, #11
 8005388:	e22d      	b.n	80057e6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800538a:	4aa1      	ldr	r2, [pc, #644]	; (8005610 <find_volume+0x2ac>)
 800538c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <find_volume+0x3a>
 800539a:	230c      	movs	r3, #12
 800539c:	e223      	b.n	80057e6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01a      	beq.n	80053ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe fd19 	bl	8003df0 <disk_status>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80053c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10c      	bne.n	80053ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <find_volume+0x82>
 80053d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80053e2:	230a      	movs	r3, #10
 80053e4:	e1ff      	b.n	80057e6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80053e6:	2300      	movs	r3, #0
 80053e8:	e1fd      	b.n	80057e6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80053f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fe fd11 	bl	8003e24 <disk_initialize>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005408:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005414:	2303      	movs	r3, #3
 8005416:	e1e6      	b.n	80057e6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <find_volume+0xca>
 800541e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800542a:	230a      	movs	r3, #10
 800542c:	e1db      	b.n	80057e6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005432:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005434:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005436:	f7ff ff3f 	bl	80052b8 <check_fs>
 800543a:	4603      	mov	r3, r0
 800543c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005440:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005444:	2b02      	cmp	r3, #2
 8005446:	d149      	bne.n	80054dc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005448:	2300      	movs	r3, #0
 800544a:	643b      	str	r3, [r7, #64]	; 0x40
 800544c:	e01e      	b.n	800548c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800545c:	4413      	add	r3, r2
 800545e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	3304      	adds	r3, #4
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d006      	beq.n	8005478 <find_volume+0x114>
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	3308      	adds	r3, #8
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fd74 	bl	8003f5c <ld_dword>
 8005474:	4602      	mov	r2, r0
 8005476:	e000      	b.n	800547a <find_volume+0x116>
 8005478:	2200      	movs	r2, #0
 800547a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	3358      	adds	r3, #88	; 0x58
 8005480:	443b      	add	r3, r7
 8005482:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005488:	3301      	adds	r3, #1
 800548a:	643b      	str	r3, [r7, #64]	; 0x40
 800548c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548e:	2b03      	cmp	r3, #3
 8005490:	d9dd      	bls.n	800544e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005492:	2300      	movs	r3, #0
 8005494:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <find_volume+0x13e>
 800549c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549e:	3b01      	subs	r3, #1
 80054a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80054a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	3358      	adds	r3, #88	; 0x58
 80054a8:	443b      	add	r3, r7
 80054aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80054ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80054b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <find_volume+0x15e>
 80054b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054ba:	f7ff fefd 	bl	80052b8 <check_fs>
 80054be:	4603      	mov	r3, r0
 80054c0:	e000      	b.n	80054c4 <find_volume+0x160>
 80054c2:	2303      	movs	r3, #3
 80054c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80054c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d905      	bls.n	80054dc <find_volume+0x178>
 80054d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d2:	3301      	adds	r3, #1
 80054d4:	643b      	str	r3, [r7, #64]	; 0x40
 80054d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d9e2      	bls.n	80054a2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80054dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d101      	bne.n	80054e8 <find_volume+0x184>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e17e      	b.n	80057e6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80054e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d901      	bls.n	80054f4 <find_volume+0x190>
 80054f0:	230d      	movs	r3, #13
 80054f2:	e178      	b.n	80057e6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	3330      	adds	r3, #48	; 0x30
 80054f8:	330b      	adds	r3, #11
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe fd16 	bl	8003f2c <ld_word>
 8005500:	4603      	mov	r3, r0
 8005502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005506:	d001      	beq.n	800550c <find_volume+0x1a8>
 8005508:	230d      	movs	r3, #13
 800550a:	e16c      	b.n	80057e6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	3330      	adds	r3, #48	; 0x30
 8005510:	3316      	adds	r3, #22
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fd0a 	bl	8003f2c <ld_word>
 8005518:	4603      	mov	r3, r0
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800551c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <find_volume+0x1cc>
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	3330      	adds	r3, #48	; 0x30
 8005526:	3324      	adds	r3, #36	; 0x24
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe fd17 	bl	8003f5c <ld_dword>
 800552e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005534:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	789b      	ldrb	r3, [r3, #2]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d005      	beq.n	8005554 <find_volume+0x1f0>
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	789b      	ldrb	r3, [r3, #2]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d001      	beq.n	8005554 <find_volume+0x1f0>
 8005550:	230d      	movs	r3, #13
 8005552:	e148      	b.n	80057e6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	789b      	ldrb	r3, [r3, #2]
 8005558:	461a      	mov	r2, r3
 800555a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555c:	fb02 f303 	mul.w	r3, r2, r3
 8005560:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005568:	b29a      	uxth	r2, r3
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	895b      	ldrh	r3, [r3, #10]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <find_volume+0x224>
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	895b      	ldrh	r3, [r3, #10]
 800557a:	461a      	mov	r2, r3
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	895b      	ldrh	r3, [r3, #10]
 8005580:	3b01      	subs	r3, #1
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <find_volume+0x228>
 8005588:	230d      	movs	r3, #13
 800558a:	e12c      	b.n	80057e6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	3330      	adds	r3, #48	; 0x30
 8005590:	3311      	adds	r3, #17
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe fcca 	bl	8003f2c <ld_word>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	891b      	ldrh	r3, [r3, #8]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <find_volume+0x24e>
 80055ae:	230d      	movs	r3, #13
 80055b0:	e119      	b.n	80057e6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	3330      	adds	r3, #48	; 0x30
 80055b6:	3313      	adds	r3, #19
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe fcb7 	bl	8003f2c <ld_word>
 80055be:	4603      	mov	r3, r0
 80055c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80055c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <find_volume+0x272>
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	3330      	adds	r3, #48	; 0x30
 80055cc:	3320      	adds	r3, #32
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe fcc4 	bl	8003f5c <ld_dword>
 80055d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	3330      	adds	r3, #48	; 0x30
 80055da:	330e      	adds	r3, #14
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fe fca5 	bl	8003f2c <ld_word>
 80055e2:	4603      	mov	r3, r0
 80055e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80055e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <find_volume+0x28c>
 80055ec:	230d      	movs	r3, #13
 80055ee:	e0fa      	b.n	80057e6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80055f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80055f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f4:	4413      	add	r3, r2
 80055f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f8:	8912      	ldrh	r2, [r2, #8]
 80055fa:	0912      	lsrs	r2, r2, #4
 80055fc:	b292      	uxth	r2, r2
 80055fe:	4413      	add	r3, r2
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	429a      	cmp	r2, r3
 8005608:	d204      	bcs.n	8005614 <find_volume+0x2b0>
 800560a:	230d      	movs	r3, #13
 800560c:	e0eb      	b.n	80057e6 <find_volume+0x482>
 800560e:	bf00      	nop
 8005610:	20000248 	.word	0x20000248
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800561c:	8952      	ldrh	r2, [r2, #10]
 800561e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <find_volume+0x2ca>
 800562a:	230d      	movs	r3, #13
 800562c:	e0db      	b.n	80057e6 <find_volume+0x482>
		fmt = FS_FAT32;
 800562e:	2303      	movs	r3, #3
 8005630:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800563a:	4293      	cmp	r3, r2
 800563c:	d802      	bhi.n	8005644 <find_volume+0x2e0>
 800563e:	2302      	movs	r3, #2
 8005640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	f640 72f5 	movw	r2, #4085	; 0xff5
 800564a:	4293      	cmp	r3, r2
 800564c:	d802      	bhi.n	8005654 <find_volume+0x2f0>
 800564e:	2301      	movs	r3, #1
 8005650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	1c9a      	adds	r2, r3, #2
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005660:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005662:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005666:	441a      	add	r2, r3
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800566c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	441a      	add	r2, r3
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005676:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800567a:	2b03      	cmp	r3, #3
 800567c:	d11e      	bne.n	80056bc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	3330      	adds	r3, #48	; 0x30
 8005682:	332a      	adds	r3, #42	; 0x2a
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe fc51 	bl	8003f2c <ld_word>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <find_volume+0x330>
 8005690:	230d      	movs	r3, #13
 8005692:	e0a8      	b.n	80057e6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	891b      	ldrh	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <find_volume+0x33c>
 800569c:	230d      	movs	r3, #13
 800569e:	e0a2      	b.n	80057e6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	3330      	adds	r3, #48	; 0x30
 80056a4:	332c      	adds	r3, #44	; 0x2c
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fc58 	bl	8003f5c <ld_dword>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	647b      	str	r3, [r7, #68]	; 0x44
 80056ba:	e01f      	b.n	80056fc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	891b      	ldrh	r3, [r3, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <find_volume+0x364>
 80056c4:	230d      	movs	r3, #13
 80056c6:	e08e      	b.n	80057e6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ce:	441a      	add	r2, r3
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80056d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d103      	bne.n	80056e4 <find_volume+0x380>
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	e00a      	b.n	80056fa <find_volume+0x396>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	695a      	ldr	r2, [r3, #20]
 80056e8:	4613      	mov	r3, r2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4413      	add	r3, r2
 80056ee:	085a      	lsrs	r2, r3, #1
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80056fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	699a      	ldr	r2, [r3, #24]
 8005700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005702:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005706:	0a5b      	lsrs	r3, r3, #9
 8005708:	429a      	cmp	r2, r3
 800570a:	d201      	bcs.n	8005710 <find_volume+0x3ac>
 800570c:	230d      	movs	r3, #13
 800570e:	e06a      	b.n	80057e6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	f04f 32ff 	mov.w	r2, #4294967295
 8005716:	611a      	str	r2, [r3, #16]
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005726:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800572a:	2b03      	cmp	r3, #3
 800572c:	d149      	bne.n	80057c2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	3330      	adds	r3, #48	; 0x30
 8005732:	3330      	adds	r3, #48	; 0x30
 8005734:	4618      	mov	r0, r3
 8005736:	f7fe fbf9 	bl	8003f2c <ld_word>
 800573a:	4603      	mov	r3, r0
 800573c:	2b01      	cmp	r3, #1
 800573e:	d140      	bne.n	80057c2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005742:	3301      	adds	r3, #1
 8005744:	4619      	mov	r1, r3
 8005746:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005748:	f7fe fea0 	bl	800448c <move_window>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d137      	bne.n	80057c2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	2200      	movs	r2, #0
 8005756:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	3330      	adds	r3, #48	; 0x30
 800575c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe fbe3 	bl	8003f2c <ld_word>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800576e:	429a      	cmp	r2, r3
 8005770:	d127      	bne.n	80057c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	3330      	adds	r3, #48	; 0x30
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fbf0 	bl	8003f5c <ld_dword>
 800577c:	4603      	mov	r3, r0
 800577e:	4a1c      	ldr	r2, [pc, #112]	; (80057f0 <find_volume+0x48c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d11e      	bne.n	80057c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	3330      	adds	r3, #48	; 0x30
 8005788:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800578c:	4618      	mov	r0, r3
 800578e:	f7fe fbe5 	bl	8003f5c <ld_dword>
 8005792:	4603      	mov	r3, r0
 8005794:	4a17      	ldr	r2, [pc, #92]	; (80057f4 <find_volume+0x490>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d113      	bne.n	80057c2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	3330      	adds	r3, #48	; 0x30
 800579e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe fbda 	bl	8003f5c <ld_dword>
 80057a8:	4602      	mov	r2, r0
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	3330      	adds	r3, #48	; 0x30
 80057b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe fbd0 	bl	8003f5c <ld_dword>
 80057bc:	4602      	mov	r2, r0
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80057c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80057ca:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <find_volume+0x494>)
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	3301      	adds	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <find_volume+0x494>)
 80057d4:	801a      	strh	r2, [r3, #0]
 80057d6:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <find_volume+0x494>)
 80057d8:	881a      	ldrh	r2, [r3, #0]
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80057de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057e0:	f7fe fdec 	bl	80043bc <clear_lock>
#endif
	return FR_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3758      	adds	r7, #88	; 0x58
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	41615252 	.word	0x41615252
 80057f4:	61417272 	.word	0x61417272
 80057f8:	2000024c 	.word	0x2000024c

080057fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005806:	2309      	movs	r3, #9
 8005808:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01c      	beq.n	800584a <validate+0x4e>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d018      	beq.n	800584a <validate+0x4e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d013      	beq.n	800584a <validate+0x4e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	889a      	ldrh	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	88db      	ldrh	r3, [r3, #6]
 800582c:	429a      	cmp	r2, r3
 800582e:	d10c      	bne.n	800584a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe fada 	bl	8003df0 <disk_status>
 800583c:	4603      	mov	r3, r0
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <validate+0x4e>
			res = FR_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <validate+0x5a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	e000      	b.n	8005858 <validate+0x5c>
 8005856:	2300      	movs	r3, #0
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	6013      	str	r3, [r2, #0]
	return res;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800587a:	f107 0310 	add.w	r3, r7, #16
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fcd5 	bl	800522e <get_ldnumber>
 8005884:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	da01      	bge.n	8005890 <f_mount+0x28>
 800588c:	230b      	movs	r3, #11
 800588e:	e02b      	b.n	80058e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005890:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <f_mount+0x88>)
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005898:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80058a0:	69b8      	ldr	r0, [r7, #24]
 80058a2:	f7fe fd8b 	bl	80043bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	490d      	ldr	r1, [pc, #52]	; (80058f0 <f_mount+0x88>)
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <f_mount+0x66>
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d001      	beq.n	80058d2 <f_mount+0x6a>
 80058ce:	2300      	movs	r3, #0
 80058d0:	e00a      	b.n	80058e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80058d2:	f107 010c 	add.w	r1, r7, #12
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	2200      	movs	r2, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff fd41 	bl	8005364 <find_volume>
 80058e2:	4603      	mov	r3, r0
 80058e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000248 	.word	0x20000248

080058f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b098      	sub	sp, #96	; 0x60
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <f_open+0x18>
 8005908:	2309      	movs	r3, #9
 800590a:	e1ad      	b.n	8005c68 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005912:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005914:	79fa      	ldrb	r2, [r7, #7]
 8005916:	f107 0110 	add.w	r1, r7, #16
 800591a:	f107 0308 	add.w	r3, r7, #8
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff fd20 	bl	8005364 <find_volume>
 8005924:	4603      	mov	r3, r0
 8005926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800592a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 8191 	bne.w	8005c56 <f_open+0x362>
		dj.obj.fs = fs;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	f107 0314 	add.w	r3, r7, #20
 800593e:	4611      	mov	r1, r2
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fc03 	bl	800514c <follow_path>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800594c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005950:	2b00      	cmp	r3, #0
 8005952:	d11a      	bne.n	800598a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005954:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005958:	b25b      	sxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	da03      	bge.n	8005966 <f_open+0x72>
				res = FR_INVALID_NAME;
 800595e:	2306      	movs	r3, #6
 8005960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005964:	e011      	b.n	800598a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	f023 0301 	bic.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf14      	ite	ne
 8005970:	2301      	movne	r3, #1
 8005972:	2300      	moveq	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	4611      	mov	r1, r2
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fbd4 	bl	800412c <chk_lock>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	f003 031c 	and.w	r3, r3, #28
 8005990:	2b00      	cmp	r3, #0
 8005992:	d07f      	beq.n	8005a94 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005998:	2b00      	cmp	r3, #0
 800599a:	d017      	beq.n	80059cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800599c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d10e      	bne.n	80059c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80059a4:	f7fe fc1e 	bl	80041e4 <enq_lock>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d006      	beq.n	80059bc <f_open+0xc8>
 80059ae:	f107 0314 	add.w	r3, r7, #20
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fb03 	bl	8004fbe <dir_register>
 80059b8:	4603      	mov	r3, r0
 80059ba:	e000      	b.n	80059be <f_open+0xca>
 80059bc:	2312      	movs	r3, #18
 80059be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	f043 0308 	orr.w	r3, r3, #8
 80059c8:	71fb      	strb	r3, [r7, #7]
 80059ca:	e010      	b.n	80059ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80059cc:	7ebb      	ldrb	r3, [r7, #26]
 80059ce:	f003 0311 	and.w	r3, r3, #17
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <f_open+0xea>
					res = FR_DENIED;
 80059d6:	2307      	movs	r3, #7
 80059d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80059dc:	e007      	b.n	80059ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <f_open+0xfa>
 80059e8:	2308      	movs	r3, #8
 80059ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80059ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d168      	bne.n	8005ac8 <f_open+0x1d4>
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d063      	beq.n	8005ac8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005a00:	f7fd fdea 	bl	80035d8 <get_fattime>
 8005a04:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a08:	330e      	adds	r3, #14
 8005a0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fe fae3 	bl	8003fd8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	3316      	adds	r3, #22
 8005a16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe fadd 	bl	8003fd8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	330b      	adds	r3, #11
 8005a22:	2220      	movs	r2, #32
 8005a24:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fa32 	bl	8004e96 <ld_clust>
 8005a32:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fa4a 	bl	8004ed4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a42:	331c      	adds	r3, #28
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fac6 	bl	8003fd8 <st_dword>
					fs->wflag = 1;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d037      	beq.n	8005ac8 <f_open+0x1d4>
						dw = fs->winsect;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005a5e:	f107 0314 	add.w	r3, r7, #20
 8005a62:	2200      	movs	r2, #0
 8005a64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe ff5d 	bl	8004926 <remove_chain>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d126      	bne.n	8005ac8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fd04 	bl	800448c <move_window>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a8e:	3a01      	subs	r2, #1
 8005a90:	60da      	str	r2, [r3, #12]
 8005a92:	e019      	b.n	8005ac8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005a94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d115      	bne.n	8005ac8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005a9c:	7ebb      	ldrb	r3, [r7, #26]
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <f_open+0x1ba>
					res = FR_NO_FILE;
 8005aa6:	2304      	movs	r3, #4
 8005aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005aac:	e00c      	b.n	8005ac8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <f_open+0x1d4>
 8005ab8:	7ebb      	ldrb	r3, [r7, #26]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <f_open+0x1d4>
						res = FR_DENIED;
 8005ac2:	2307      	movs	r3, #7
 8005ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d128      	bne.n	8005b22 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bf14      	ite	ne
 8005afa:	2301      	movne	r3, #1
 8005afc:	2300      	moveq	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	f107 0314 	add.w	r3, r7, #20
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fb8d 	bl	8004228 <inc_lock>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <f_open+0x22e>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f040 8095 	bne.w	8005c56 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff f9af 	bl	8004e96 <ld_clust>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	331c      	adds	r3, #28
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fa0a 	bl	8003f5c <ld_dword>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	88da      	ldrh	r2, [r3, #6]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	79fa      	ldrb	r2, [r7, #7]
 8005b66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3330      	adds	r3, #48	; 0x30
 8005b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fe fa74 	bl	8004072 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d060      	beq.n	8005c56 <f_open+0x362>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d05c      	beq.n	8005c56 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	895b      	ldrh	r3, [r3, #10]
 8005ba8:	025b      	lsls	r3, r3, #9
 8005baa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb8:	e016      	b.n	8005be8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fd1f 	bl	8004602 <get_fat>
 8005bc4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d802      	bhi.n	8005bd2 <f_open+0x2de>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d102      	bne.n	8005be0 <f_open+0x2ec>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005be0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	657b      	str	r3, [r7, #84]	; 0x54
 8005be8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d103      	bne.n	8005bf8 <f_open+0x304>
 8005bf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d8e0      	bhi.n	8005bba <f_open+0x2c6>
				}
				fp->clust = clst;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bfc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d127      	bne.n	8005c56 <f_open+0x362>
 8005c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d022      	beq.n	8005c56 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fe fcd5 	bl	80045c4 <clust2sect>
 8005c1a:	6478      	str	r0, [r7, #68]	; 0x44
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <f_open+0x336>
						res = FR_INT_ERR;
 8005c22:	2302      	movs	r3, #2
 8005c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005c28:	e015      	b.n	8005c56 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2c:	0a5a      	lsrs	r2, r3, #9
 8005c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c30:	441a      	add	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	7858      	ldrb	r0, [r3, #1]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	2301      	movs	r3, #1
 8005c46:	f7fe f913 	bl	8003e70 <disk_read>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <f_open+0x362>
 8005c50:	2301      	movs	r3, #1
 8005c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005c56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <f_open+0x370>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3760      	adds	r7, #96	; 0x60
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08e      	sub	sp, #56	; 0x38
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f107 0214 	add.w	r2, r7, #20
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fdb3 	bl	80057fc <validate>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005c9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d107      	bne.n	8005cb4 <f_read+0x44>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	7d5b      	ldrb	r3, [r3, #21]
 8005ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005cac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <f_read+0x4a>
 8005cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cb8:	e115      	b.n	8005ee6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	7d1b      	ldrb	r3, [r3, #20]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <f_read+0x5a>
 8005cc6:	2307      	movs	r3, #7
 8005cc8:	e10d      	b.n	8005ee6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	f240 80fe 	bls.w	8005edc <f_read+0x26c>
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005ce4:	e0fa      	b.n	8005edc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f040 80c6 	bne.w	8005e80 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	0a5b      	lsrs	r3, r3, #9
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	8952      	ldrh	r2, [r2, #10]
 8005cfe:	3a01      	subs	r2, #1
 8005d00:	4013      	ands	r3, r2
 8005d02:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d12f      	bne.n	8005d6a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	633b      	str	r3, [r7, #48]	; 0x30
 8005d18:	e013      	b.n	8005d42 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	4619      	mov	r1, r3
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7fe fef9 	bl	8004b20 <clmt_clust>
 8005d2e:	6338      	str	r0, [r7, #48]	; 0x30
 8005d30:	e007      	b.n	8005d42 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f7fe fc61 	bl	8004602 <get_fat>
 8005d40:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d804      	bhi.n	8005d52 <f_read+0xe2>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	755a      	strb	r2, [r3, #21]
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e0c9      	b.n	8005ee6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d104      	bne.n	8005d64 <f_read+0xf4>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	755a      	strb	r2, [r3, #21]
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0c0      	b.n	8005ee6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d68:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7fe fc26 	bl	80045c4 <clust2sect>
 8005d78:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d104      	bne.n	8005d8a <f_read+0x11a>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2202      	movs	r2, #2
 8005d84:	755a      	strb	r2, [r3, #21]
 8005d86:	2302      	movs	r3, #2
 8005d88:	e0ad      	b.n	8005ee6 <f_read+0x276>
			sect += csect;
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	0a5b      	lsrs	r3, r3, #9
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d039      	beq.n	8005e12 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	4413      	add	r3, r2
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	8952      	ldrh	r2, [r2, #10]
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d905      	bls.n	8005db8 <f_read+0x148>
					cc = fs->csize - csect;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	895b      	ldrh	r3, [r3, #10]
 8005db0:	461a      	mov	r2, r3
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	7858      	ldrb	r0, [r3, #1]
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dc2:	f7fe f855 	bl	8003e70 <disk_read>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <f_read+0x166>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	755a      	strb	r2, [r3, #21]
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e087      	b.n	8005ee6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	7d1b      	ldrb	r3, [r3, #20]
 8005dda:	b25b      	sxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	da14      	bge.n	8005e0a <f_read+0x19a>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d90d      	bls.n	8005e0a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	025b      	lsls	r3, r3, #9
 8005df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfa:	18d0      	adds	r0, r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3330      	adds	r3, #48	; 0x30
 8005e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e04:	4619      	mov	r1, r3
 8005e06:	f7fe f913 	bl	8004030 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	025b      	lsls	r3, r3, #9
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005e10:	e050      	b.n	8005eb4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d02e      	beq.n	8005e7a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	7d1b      	ldrb	r3, [r3, #20]
 8005e20:	b25b      	sxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da18      	bge.n	8005e58 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	7858      	ldrb	r0, [r3, #1]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	2301      	movs	r3, #1
 8005e36:	f7fe f83b 	bl	8003eb0 <disk_write>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <f_read+0x1da>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	755a      	strb	r2, [r3, #21]
 8005e46:	2301      	movs	r3, #1
 8005e48:	e04d      	b.n	8005ee6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	7d1b      	ldrb	r3, [r3, #20]
 8005e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	7858      	ldrb	r0, [r3, #1]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e62:	2301      	movs	r3, #1
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	f7fe f803 	bl	8003e70 <disk_read>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <f_read+0x20a>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	755a      	strb	r2, [r3, #21]
 8005e76:	2301      	movs	r3, #1
 8005e78:	e035      	b.n	8005ee6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e88:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d901      	bls.n	8005e9a <f_read+0x22a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea8:	4413      	add	r3, r2
 8005eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eac:	4619      	mov	r1, r3
 8005eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005eb0:	f7fe f8be 	bl	8004030 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	4413      	add	r3, r2
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	441a      	add	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	619a      	str	r2, [r3, #24]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	441a      	add	r2, r3
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f47f af01 	bne.w	8005ce6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3738      	adds	r7, #56	; 0x38
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b08c      	sub	sp, #48	; 0x30
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]
 8005efa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f107 0210 	add.w	r2, r7, #16
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fc74 	bl	80057fc <validate>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d107      	bne.n	8005f32 <f_write+0x44>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	7d5b      	ldrb	r3, [r3, #21]
 8005f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <f_write+0x4a>
 8005f32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f36:	e14b      	b.n	80061d0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	7d1b      	ldrb	r3, [r3, #20]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <f_write+0x5a>
 8005f44:	2307      	movs	r3, #7
 8005f46:	e143      	b.n	80061d0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	441a      	add	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	f080 812d 	bcs.w	80061b4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005f62:	e127      	b.n	80061b4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 80e3 	bne.w	8006138 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	0a5b      	lsrs	r3, r3, #9
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	8952      	ldrh	r2, [r2, #10]
 8005f7c:	3a01      	subs	r2, #1
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d143      	bne.n	8006010 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10c      	bne.n	8005faa <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d11a      	bne.n	8005fd2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe fd25 	bl	80049f0 <create_chain>
 8005fa6:	62b8      	str	r0, [r7, #40]	; 0x28
 8005fa8:	e013      	b.n	8005fd2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7fe fdb1 	bl	8004b20 <clmt_clust>
 8005fbe:	62b8      	str	r0, [r7, #40]	; 0x28
 8005fc0:	e007      	b.n	8005fd2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f7fe fd10 	bl	80049f0 <create_chain>
 8005fd0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80f2 	beq.w	80061be <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d104      	bne.n	8005fea <f_write+0xfc>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	755a      	strb	r2, [r3, #21]
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e0f2      	b.n	80061d0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d104      	bne.n	8005ffc <f_write+0x10e>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	755a      	strb	r2, [r3, #21]
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0e9      	b.n	80061d0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006000:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <f_write+0x122>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800600e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	7d1b      	ldrb	r3, [r3, #20]
 8006014:	b25b      	sxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	da18      	bge.n	800604c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	7858      	ldrb	r0, [r3, #1]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1a      	ldr	r2, [r3, #32]
 8006028:	2301      	movs	r3, #1
 800602a:	f7fd ff41 	bl	8003eb0 <disk_write>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <f_write+0x150>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	755a      	strb	r2, [r3, #21]
 800603a:	2301      	movs	r3, #1
 800603c:	e0c8      	b.n	80061d0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	7d1b      	ldrb	r3, [r3, #20]
 8006042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006046:	b2da      	uxtb	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7fe fab5 	bl	80045c4 <clust2sect>
 800605a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <f_write+0x17e>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2202      	movs	r2, #2
 8006066:	755a      	strb	r2, [r3, #21]
 8006068:	2302      	movs	r3, #2
 800606a:	e0b1      	b.n	80061d0 <f_write+0x2e2>
			sect += csect;
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	4413      	add	r3, r2
 8006072:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	0a5b      	lsrs	r3, r3, #9
 8006078:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d03c      	beq.n	80060fa <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	4413      	add	r3, r2
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	8952      	ldrh	r2, [r2, #10]
 800608a:	4293      	cmp	r3, r2
 800608c:	d905      	bls.n	800609a <f_write+0x1ac>
					cc = fs->csize - csect;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	895b      	ldrh	r3, [r3, #10]
 8006092:	461a      	mov	r2, r3
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	7858      	ldrb	r0, [r3, #1]
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	69f9      	ldr	r1, [r7, #28]
 80060a4:	f7fd ff04 	bl	8003eb0 <disk_write>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d004      	beq.n	80060b8 <f_write+0x1ca>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	755a      	strb	r2, [r3, #21]
 80060b4:	2301      	movs	r3, #1
 80060b6:	e08b      	b.n	80061d0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a1a      	ldr	r2, [r3, #32]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	6a3a      	ldr	r2, [r7, #32]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d915      	bls.n	80060f2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a1a      	ldr	r2, [r3, #32]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	025b      	lsls	r3, r3, #9
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060de:	4619      	mov	r1, r3
 80060e0:	f7fd ffa6 	bl	8004030 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	7d1b      	ldrb	r3, [r3, #20]
 80060e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	025b      	lsls	r3, r3, #9
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80060f8:	e03f      	b.n	800617a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	429a      	cmp	r2, r3
 8006102:	d016      	beq.n	8006132 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800610c:	429a      	cmp	r2, r3
 800610e:	d210      	bcs.n	8006132 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	7858      	ldrb	r0, [r3, #1]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800611a:	2301      	movs	r3, #1
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	f7fd fea7 	bl	8003e70 <disk_read>
 8006122:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	755a      	strb	r2, [r3, #21]
 800612e:	2301      	movs	r3, #1
 8006130:	e04e      	b.n	80061d0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006140:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	429a      	cmp	r2, r3
 800614c:	d901      	bls.n	8006152 <f_write+0x264>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006160:	4413      	add	r3, r2
 8006162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006164:	69f9      	ldr	r1, [r7, #28]
 8006166:	4618      	mov	r0, r3
 8006168:	f7fd ff62 	bl	8004030 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	7d1b      	ldrb	r3, [r3, #20]
 8006170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006174:	b2da      	uxtb	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	4413      	add	r3, r2
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	441a      	add	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	619a      	str	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	429a      	cmp	r2, r3
 8006198:	bf38      	it	cc
 800619a:	461a      	movcc	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	60da      	str	r2, [r3, #12]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	441a      	add	r2, r3
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f aed4 	bne.w	8005f64 <f_write+0x76>
 80061bc:	e000      	b.n	80061c0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80061be:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	7d1b      	ldrb	r3, [r3, #20]
 80061c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3730      	adds	r7, #48	; 0x30
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f107 0208 	add.w	r2, r7, #8
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fb07 	bl	80057fc <validate>
 80061ee:	4603      	mov	r3, r0
 80061f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d168      	bne.n	80062ca <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	7d1b      	ldrb	r3, [r3, #20]
 80061fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d062      	beq.n	80062ca <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	7d1b      	ldrb	r3, [r3, #20]
 8006208:	b25b      	sxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	da15      	bge.n	800623a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	7858      	ldrb	r0, [r3, #1]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	2301      	movs	r3, #1
 800621e:	f7fd fe47 	bl	8003eb0 <disk_write>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <f_sync+0x54>
 8006228:	2301      	movs	r3, #1
 800622a:	e04f      	b.n	80062cc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	7d1b      	ldrb	r3, [r3, #20]
 8006230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006234:	b2da      	uxtb	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800623a:	f7fd f9cd 	bl	80035d8 <get_fattime>
 800623e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7fe f91f 	bl	800448c <move_window>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d138      	bne.n	80062ca <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	330b      	adds	r3, #11
 8006262:	781a      	ldrb	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	330b      	adds	r3, #11
 8006268:	f042 0220 	orr.w	r2, r2, #32
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6818      	ldr	r0, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	461a      	mov	r2, r3
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	f7fe fe2a 	bl	8004ed4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f103 021c 	add.w	r2, r3, #28
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	4619      	mov	r1, r3
 800628c:	4610      	mov	r0, r2
 800628e:	f7fd fea3 	bl	8003fd8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3316      	adds	r3, #22
 8006296:	6939      	ldr	r1, [r7, #16]
 8006298:	4618      	mov	r0, r3
 800629a:	f7fd fe9d 	bl	8003fd8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3312      	adds	r3, #18
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fd fe7c 	bl	8003fa2 <st_word>
					fs->wflag = 1;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2201      	movs	r2, #1
 80062ae:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe f918 	bl	80044e8 <sync_fs>
 80062b8:	4603      	mov	r3, r0
 80062ba:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	7d1b      	ldrb	r3, [r3, #20]
 80062c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff ff7b 	bl	80061d8 <f_sync>
 80062e2:	4603      	mov	r3, r0
 80062e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d118      	bne.n	800631e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f107 0208 	add.w	r2, r7, #8
 80062f2:	4611      	mov	r1, r2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fa81 	bl	80057fc <validate>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10c      	bne.n	800631e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	4618      	mov	r0, r3
 800630a:	f7fe f81b 	bl	8004344 <dec_lock>
 800630e:	4603      	mov	r3, r0
 8006310:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800631e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b092      	sub	sp, #72	; 0x48
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006334:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006338:	f107 030c 	add.w	r3, r7, #12
 800633c:	2200      	movs	r2, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff f810 	bl	8005364 <find_volume>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800634a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 8099 	bne.w	8006486 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	3b02      	subs	r3, #2
 8006364:	429a      	cmp	r2, r3
 8006366:	d804      	bhi.n	8006372 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	e089      	b.n	8006486 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d128      	bne.n	80063d0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800637e:	2302      	movs	r3, #2
 8006380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006386:	f107 0314 	add.w	r3, r7, #20
 800638a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe f938 	bl	8004602 <get_fat>
 8006392:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d103      	bne.n	80063a4 <f_getfree+0x7c>
 800639c:	2301      	movs	r3, #1
 800639e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80063a2:	e063      	b.n	800646c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d103      	bne.n	80063b2 <f_getfree+0x8a>
 80063aa:	2302      	movs	r3, #2
 80063ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80063b0:	e05c      	b.n	800646c <f_getfree+0x144>
					if (stat == 0) nfree++;
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <f_getfree+0x96>
 80063b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ba:	3301      	adds	r3, #1
 80063bc:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80063be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c0:	3301      	adds	r3, #1
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d3db      	bcc.n	8006386 <f_getfree+0x5e>
 80063ce:	e04d      	b.n	800646c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	637b      	str	r3, [r7, #52]	; 0x34
 80063e0:	2300      	movs	r3, #0
 80063e2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d113      	bne.n	8006412 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80063ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80063f2:	4619      	mov	r1, r3
 80063f4:	f7fe f84a 	bl	800448c <move_window>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80063fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006402:	2b00      	cmp	r3, #0
 8006404:	d131      	bne.n	800646a <f_getfree+0x142>
							p = fs->win;
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	3330      	adds	r3, #48	; 0x30
 800640a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800640c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b02      	cmp	r3, #2
 8006418:	d10f      	bne.n	800643a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800641a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800641c:	f7fd fd86 	bl	8003f2c <ld_word>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d102      	bne.n	800642c <f_getfree+0x104>
 8006426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006428:	3301      	adds	r3, #1
 800642a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	3302      	adds	r3, #2
 8006430:	633b      	str	r3, [r7, #48]	; 0x30
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006434:	3b02      	subs	r3, #2
 8006436:	637b      	str	r3, [r7, #52]	; 0x34
 8006438:	e010      	b.n	800645c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800643a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800643c:	f7fd fd8e 	bl	8003f5c <ld_dword>
 8006440:	4603      	mov	r3, r0
 8006442:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <f_getfree+0x128>
 800644a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800644c:	3301      	adds	r3, #1
 800644e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	3304      	adds	r3, #4
 8006454:	633b      	str	r3, [r7, #48]	; 0x30
 8006456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006458:	3b04      	subs	r3, #4
 800645a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800645c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645e:	3b01      	subs	r3, #1
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1bd      	bne.n	80063e4 <f_getfree+0xbc>
 8006468:	e000      	b.n	800646c <f_getfree+0x144>
							if (res != FR_OK) break;
 800646a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006470:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006476:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	791a      	ldrb	r2, [r3, #4]
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006486:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800648a:	4618      	mov	r0, r3
 800648c:	3748      	adds	r7, #72	; 0x48
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b088      	sub	sp, #32
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80064a6:	e01b      	b.n	80064e0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80064a8:	f107 0310 	add.w	r3, r7, #16
 80064ac:	f107 0114 	add.w	r1, r7, #20
 80064b0:	2201      	movs	r2, #1
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fbdc 	bl	8005c70 <f_read>
		if (rc != 1) break;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d116      	bne.n	80064ec <f_gets+0x5a>
		c = s[0];
 80064be:	7d3b      	ldrb	r3, [r7, #20]
 80064c0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b0d      	cmp	r3, #13
 80064c6:	d100      	bne.n	80064ca <f_gets+0x38>
 80064c8:	e00a      	b.n	80064e0 <f_gets+0x4e>
		*p++ = c;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	61ba      	str	r2, [r7, #24]
 80064d0:	7dfa      	ldrb	r2, [r7, #23]
 80064d2:	701a      	strb	r2, [r3, #0]
		n++;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b0a      	cmp	r3, #10
 80064de:	d007      	beq.n	80064f0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	dbde      	blt.n	80064a8 <f_gets+0x16>
 80064ea:	e002      	b.n	80064f2 <f_gets+0x60>
		if (rc != 1) break;
 80064ec:	bf00      	nop
 80064ee:	e000      	b.n	80064f2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80064f0:	bf00      	nop
	}
	*p = 0;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <f_gets+0x70>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	e000      	b.n	8006504 <f_gets+0x72>
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3720      	adds	r7, #32
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800651a:	2301      	movs	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006522:	4b1f      	ldr	r3, [pc, #124]	; (80065a0 <FATFS_LinkDriverEx+0x94>)
 8006524:	7a5b      	ldrb	r3, [r3, #9]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d131      	bne.n	8006590 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800652c:	4b1c      	ldr	r3, [pc, #112]	; (80065a0 <FATFS_LinkDriverEx+0x94>)
 800652e:	7a5b      	ldrb	r3, [r3, #9]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <FATFS_LinkDriverEx+0x94>)
 8006536:	2100      	movs	r1, #0
 8006538:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800653a:	4b19      	ldr	r3, [pc, #100]	; (80065a0 <FATFS_LinkDriverEx+0x94>)
 800653c:	7a5b      	ldrb	r3, [r3, #9]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	4a17      	ldr	r2, [pc, #92]	; (80065a0 <FATFS_LinkDriverEx+0x94>)
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800654a:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <FATFS_LinkDriverEx+0x94>)
 800654c:	7a5b      	ldrb	r3, [r3, #9]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <FATFS_LinkDriverEx+0x94>)
 8006554:	4413      	add	r3, r2
 8006556:	79fa      	ldrb	r2, [r7, #7]
 8006558:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800655a:	4b11      	ldr	r3, [pc, #68]	; (80065a0 <FATFS_LinkDriverEx+0x94>)
 800655c:	7a5b      	ldrb	r3, [r3, #9]
 800655e:	b2db      	uxtb	r3, r3
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	b2d1      	uxtb	r1, r2
 8006564:	4a0e      	ldr	r2, [pc, #56]	; (80065a0 <FATFS_LinkDriverEx+0x94>)
 8006566:	7251      	strb	r1, [r2, #9]
 8006568:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800656a:	7dbb      	ldrb	r3, [r7, #22]
 800656c:	3330      	adds	r3, #48	; 0x30
 800656e:	b2da      	uxtb	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	3301      	adds	r3, #1
 8006578:	223a      	movs	r2, #58	; 0x3a
 800657a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	3302      	adds	r3, #2
 8006580:	222f      	movs	r2, #47	; 0x2f
 8006582:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	3303      	adds	r3, #3
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006590:	7dfb      	ldrb	r3, [r7, #23]
}
 8006592:	4618      	mov	r0, r3
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000270 	.word	0x20000270

080065a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80065ae:	2200      	movs	r2, #0
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff ffaa 	bl	800650c <FATFS_LinkDriverEx>
 80065b8:	4603      	mov	r3, r0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <_vsniprintf_r>:
 80065c2:	b530      	push	{r4, r5, lr}
 80065c4:	4614      	mov	r4, r2
 80065c6:	2c00      	cmp	r4, #0
 80065c8:	b09b      	sub	sp, #108	; 0x6c
 80065ca:	4605      	mov	r5, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	da05      	bge.n	80065dc <_vsniprintf_r+0x1a>
 80065d0:	238b      	movs	r3, #139	; 0x8b
 80065d2:	6003      	str	r3, [r0, #0]
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	b01b      	add	sp, #108	; 0x6c
 80065da:	bd30      	pop	{r4, r5, pc}
 80065dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80065e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80065e4:	bf14      	ite	ne
 80065e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80065ea:	4623      	moveq	r3, r4
 80065ec:	9302      	str	r3, [sp, #8]
 80065ee:	9305      	str	r3, [sp, #20]
 80065f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065f4:	9100      	str	r1, [sp, #0]
 80065f6:	9104      	str	r1, [sp, #16]
 80065f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80065fc:	4669      	mov	r1, sp
 80065fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006600:	f000 f9b2 	bl	8006968 <_svfiprintf_r>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	bfbc      	itt	lt
 8006608:	238b      	movlt	r3, #139	; 0x8b
 800660a:	602b      	strlt	r3, [r5, #0]
 800660c:	2c00      	cmp	r4, #0
 800660e:	d0e3      	beq.n	80065d8 <_vsniprintf_r+0x16>
 8006610:	9b00      	ldr	r3, [sp, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	e7df      	b.n	80065d8 <_vsniprintf_r+0x16>

08006618 <vsniprintf>:
 8006618:	b507      	push	{r0, r1, r2, lr}
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	4613      	mov	r3, r2
 800661e:	460a      	mov	r2, r1
 8006620:	4601      	mov	r1, r0
 8006622:	4803      	ldr	r0, [pc, #12]	; (8006630 <vsniprintf+0x18>)
 8006624:	6800      	ldr	r0, [r0, #0]
 8006626:	f7ff ffcc 	bl	80065c2 <_vsniprintf_r>
 800662a:	b003      	add	sp, #12
 800662c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006630:	20000070 	.word	0x20000070

08006634 <memset>:
 8006634:	4402      	add	r2, r0
 8006636:	4603      	mov	r3, r0
 8006638:	4293      	cmp	r3, r2
 800663a:	d100      	bne.n	800663e <memset+0xa>
 800663c:	4770      	bx	lr
 800663e:	f803 1b01 	strb.w	r1, [r3], #1
 8006642:	e7f9      	b.n	8006638 <memset+0x4>

08006644 <strncpy>:
 8006644:	b510      	push	{r4, lr}
 8006646:	3901      	subs	r1, #1
 8006648:	4603      	mov	r3, r0
 800664a:	b132      	cbz	r2, 800665a <strncpy+0x16>
 800664c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006650:	f803 4b01 	strb.w	r4, [r3], #1
 8006654:	3a01      	subs	r2, #1
 8006656:	2c00      	cmp	r4, #0
 8006658:	d1f7      	bne.n	800664a <strncpy+0x6>
 800665a:	441a      	add	r2, r3
 800665c:	2100      	movs	r1, #0
 800665e:	4293      	cmp	r3, r2
 8006660:	d100      	bne.n	8006664 <strncpy+0x20>
 8006662:	bd10      	pop	{r4, pc}
 8006664:	f803 1b01 	strb.w	r1, [r3], #1
 8006668:	e7f9      	b.n	800665e <strncpy+0x1a>
	...

0800666c <__errno>:
 800666c:	4b01      	ldr	r3, [pc, #4]	; (8006674 <__errno+0x8>)
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000070 	.word	0x20000070

08006678 <__libc_init_array>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	4d0d      	ldr	r5, [pc, #52]	; (80066b0 <__libc_init_array+0x38>)
 800667c:	4c0d      	ldr	r4, [pc, #52]	; (80066b4 <__libc_init_array+0x3c>)
 800667e:	1b64      	subs	r4, r4, r5
 8006680:	10a4      	asrs	r4, r4, #2
 8006682:	2600      	movs	r6, #0
 8006684:	42a6      	cmp	r6, r4
 8006686:	d109      	bne.n	800669c <__libc_init_array+0x24>
 8006688:	4d0b      	ldr	r5, [pc, #44]	; (80066b8 <__libc_init_array+0x40>)
 800668a:	4c0c      	ldr	r4, [pc, #48]	; (80066bc <__libc_init_array+0x44>)
 800668c:	f000 fc6a 	bl	8006f64 <_init>
 8006690:	1b64      	subs	r4, r4, r5
 8006692:	10a4      	asrs	r4, r4, #2
 8006694:	2600      	movs	r6, #0
 8006696:	42a6      	cmp	r6, r4
 8006698:	d105      	bne.n	80066a6 <__libc_init_array+0x2e>
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a0:	4798      	blx	r3
 80066a2:	3601      	adds	r6, #1
 80066a4:	e7ee      	b.n	8006684 <__libc_init_array+0xc>
 80066a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066aa:	4798      	blx	r3
 80066ac:	3601      	adds	r6, #1
 80066ae:	e7f2      	b.n	8006696 <__libc_init_array+0x1e>
 80066b0:	08007268 	.word	0x08007268
 80066b4:	08007268 	.word	0x08007268
 80066b8:	08007268 	.word	0x08007268
 80066bc:	0800726c 	.word	0x0800726c

080066c0 <__retarget_lock_acquire_recursive>:
 80066c0:	4770      	bx	lr

080066c2 <__retarget_lock_release_recursive>:
 80066c2:	4770      	bx	lr

080066c4 <_free_r>:
 80066c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066c6:	2900      	cmp	r1, #0
 80066c8:	d044      	beq.n	8006754 <_free_r+0x90>
 80066ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066ce:	9001      	str	r0, [sp, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f1a1 0404 	sub.w	r4, r1, #4
 80066d6:	bfb8      	it	lt
 80066d8:	18e4      	addlt	r4, r4, r3
 80066da:	f000 f8df 	bl	800689c <__malloc_lock>
 80066de:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <_free_r+0x94>)
 80066e0:	9801      	ldr	r0, [sp, #4]
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	b933      	cbnz	r3, 80066f4 <_free_r+0x30>
 80066e6:	6063      	str	r3, [r4, #4]
 80066e8:	6014      	str	r4, [r2, #0]
 80066ea:	b003      	add	sp, #12
 80066ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066f0:	f000 b8da 	b.w	80068a8 <__malloc_unlock>
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	d908      	bls.n	800670a <_free_r+0x46>
 80066f8:	6825      	ldr	r5, [r4, #0]
 80066fa:	1961      	adds	r1, r4, r5
 80066fc:	428b      	cmp	r3, r1
 80066fe:	bf01      	itttt	eq
 8006700:	6819      	ldreq	r1, [r3, #0]
 8006702:	685b      	ldreq	r3, [r3, #4]
 8006704:	1949      	addeq	r1, r1, r5
 8006706:	6021      	streq	r1, [r4, #0]
 8006708:	e7ed      	b.n	80066e6 <_free_r+0x22>
 800670a:	461a      	mov	r2, r3
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	b10b      	cbz	r3, 8006714 <_free_r+0x50>
 8006710:	42a3      	cmp	r3, r4
 8006712:	d9fa      	bls.n	800670a <_free_r+0x46>
 8006714:	6811      	ldr	r1, [r2, #0]
 8006716:	1855      	adds	r5, r2, r1
 8006718:	42a5      	cmp	r5, r4
 800671a:	d10b      	bne.n	8006734 <_free_r+0x70>
 800671c:	6824      	ldr	r4, [r4, #0]
 800671e:	4421      	add	r1, r4
 8006720:	1854      	adds	r4, r2, r1
 8006722:	42a3      	cmp	r3, r4
 8006724:	6011      	str	r1, [r2, #0]
 8006726:	d1e0      	bne.n	80066ea <_free_r+0x26>
 8006728:	681c      	ldr	r4, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	6053      	str	r3, [r2, #4]
 800672e:	440c      	add	r4, r1
 8006730:	6014      	str	r4, [r2, #0]
 8006732:	e7da      	b.n	80066ea <_free_r+0x26>
 8006734:	d902      	bls.n	800673c <_free_r+0x78>
 8006736:	230c      	movs	r3, #12
 8006738:	6003      	str	r3, [r0, #0]
 800673a:	e7d6      	b.n	80066ea <_free_r+0x26>
 800673c:	6825      	ldr	r5, [r4, #0]
 800673e:	1961      	adds	r1, r4, r5
 8006740:	428b      	cmp	r3, r1
 8006742:	bf04      	itt	eq
 8006744:	6819      	ldreq	r1, [r3, #0]
 8006746:	685b      	ldreq	r3, [r3, #4]
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	bf04      	itt	eq
 800674c:	1949      	addeq	r1, r1, r5
 800674e:	6021      	streq	r1, [r4, #0]
 8006750:	6054      	str	r4, [r2, #4]
 8006752:	e7ca      	b.n	80066ea <_free_r+0x26>
 8006754:	b003      	add	sp, #12
 8006756:	bd30      	pop	{r4, r5, pc}
 8006758:	200003bc 	.word	0x200003bc

0800675c <sbrk_aligned>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	4e0e      	ldr	r6, [pc, #56]	; (8006798 <sbrk_aligned+0x3c>)
 8006760:	460c      	mov	r4, r1
 8006762:	6831      	ldr	r1, [r6, #0]
 8006764:	4605      	mov	r5, r0
 8006766:	b911      	cbnz	r1, 800676e <sbrk_aligned+0x12>
 8006768:	f000 fba6 	bl	8006eb8 <_sbrk_r>
 800676c:	6030      	str	r0, [r6, #0]
 800676e:	4621      	mov	r1, r4
 8006770:	4628      	mov	r0, r5
 8006772:	f000 fba1 	bl	8006eb8 <_sbrk_r>
 8006776:	1c43      	adds	r3, r0, #1
 8006778:	d00a      	beq.n	8006790 <sbrk_aligned+0x34>
 800677a:	1cc4      	adds	r4, r0, #3
 800677c:	f024 0403 	bic.w	r4, r4, #3
 8006780:	42a0      	cmp	r0, r4
 8006782:	d007      	beq.n	8006794 <sbrk_aligned+0x38>
 8006784:	1a21      	subs	r1, r4, r0
 8006786:	4628      	mov	r0, r5
 8006788:	f000 fb96 	bl	8006eb8 <_sbrk_r>
 800678c:	3001      	adds	r0, #1
 800678e:	d101      	bne.n	8006794 <sbrk_aligned+0x38>
 8006790:	f04f 34ff 	mov.w	r4, #4294967295
 8006794:	4620      	mov	r0, r4
 8006796:	bd70      	pop	{r4, r5, r6, pc}
 8006798:	200003c0 	.word	0x200003c0

0800679c <_malloc_r>:
 800679c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a0:	1ccd      	adds	r5, r1, #3
 80067a2:	f025 0503 	bic.w	r5, r5, #3
 80067a6:	3508      	adds	r5, #8
 80067a8:	2d0c      	cmp	r5, #12
 80067aa:	bf38      	it	cc
 80067ac:	250c      	movcc	r5, #12
 80067ae:	2d00      	cmp	r5, #0
 80067b0:	4607      	mov	r7, r0
 80067b2:	db01      	blt.n	80067b8 <_malloc_r+0x1c>
 80067b4:	42a9      	cmp	r1, r5
 80067b6:	d905      	bls.n	80067c4 <_malloc_r+0x28>
 80067b8:	230c      	movs	r3, #12
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	2600      	movs	r6, #0
 80067be:	4630      	mov	r0, r6
 80067c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006898 <_malloc_r+0xfc>
 80067c8:	f000 f868 	bl	800689c <__malloc_lock>
 80067cc:	f8d8 3000 	ldr.w	r3, [r8]
 80067d0:	461c      	mov	r4, r3
 80067d2:	bb5c      	cbnz	r4, 800682c <_malloc_r+0x90>
 80067d4:	4629      	mov	r1, r5
 80067d6:	4638      	mov	r0, r7
 80067d8:	f7ff ffc0 	bl	800675c <sbrk_aligned>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	4604      	mov	r4, r0
 80067e0:	d155      	bne.n	800688e <_malloc_r+0xf2>
 80067e2:	f8d8 4000 	ldr.w	r4, [r8]
 80067e6:	4626      	mov	r6, r4
 80067e8:	2e00      	cmp	r6, #0
 80067ea:	d145      	bne.n	8006878 <_malloc_r+0xdc>
 80067ec:	2c00      	cmp	r4, #0
 80067ee:	d048      	beq.n	8006882 <_malloc_r+0xe6>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	4631      	mov	r1, r6
 80067f4:	4638      	mov	r0, r7
 80067f6:	eb04 0903 	add.w	r9, r4, r3
 80067fa:	f000 fb5d 	bl	8006eb8 <_sbrk_r>
 80067fe:	4581      	cmp	r9, r0
 8006800:	d13f      	bne.n	8006882 <_malloc_r+0xe6>
 8006802:	6821      	ldr	r1, [r4, #0]
 8006804:	1a6d      	subs	r5, r5, r1
 8006806:	4629      	mov	r1, r5
 8006808:	4638      	mov	r0, r7
 800680a:	f7ff ffa7 	bl	800675c <sbrk_aligned>
 800680e:	3001      	adds	r0, #1
 8006810:	d037      	beq.n	8006882 <_malloc_r+0xe6>
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	442b      	add	r3, r5
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	f8d8 3000 	ldr.w	r3, [r8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d038      	beq.n	8006892 <_malloc_r+0xf6>
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	42a2      	cmp	r2, r4
 8006824:	d12b      	bne.n	800687e <_malloc_r+0xe2>
 8006826:	2200      	movs	r2, #0
 8006828:	605a      	str	r2, [r3, #4]
 800682a:	e00f      	b.n	800684c <_malloc_r+0xb0>
 800682c:	6822      	ldr	r2, [r4, #0]
 800682e:	1b52      	subs	r2, r2, r5
 8006830:	d41f      	bmi.n	8006872 <_malloc_r+0xd6>
 8006832:	2a0b      	cmp	r2, #11
 8006834:	d917      	bls.n	8006866 <_malloc_r+0xca>
 8006836:	1961      	adds	r1, r4, r5
 8006838:	42a3      	cmp	r3, r4
 800683a:	6025      	str	r5, [r4, #0]
 800683c:	bf18      	it	ne
 800683e:	6059      	strne	r1, [r3, #4]
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	bf08      	it	eq
 8006844:	f8c8 1000 	streq.w	r1, [r8]
 8006848:	5162      	str	r2, [r4, r5]
 800684a:	604b      	str	r3, [r1, #4]
 800684c:	4638      	mov	r0, r7
 800684e:	f104 060b 	add.w	r6, r4, #11
 8006852:	f000 f829 	bl	80068a8 <__malloc_unlock>
 8006856:	f026 0607 	bic.w	r6, r6, #7
 800685a:	1d23      	adds	r3, r4, #4
 800685c:	1af2      	subs	r2, r6, r3
 800685e:	d0ae      	beq.n	80067be <_malloc_r+0x22>
 8006860:	1b9b      	subs	r3, r3, r6
 8006862:	50a3      	str	r3, [r4, r2]
 8006864:	e7ab      	b.n	80067be <_malloc_r+0x22>
 8006866:	42a3      	cmp	r3, r4
 8006868:	6862      	ldr	r2, [r4, #4]
 800686a:	d1dd      	bne.n	8006828 <_malloc_r+0x8c>
 800686c:	f8c8 2000 	str.w	r2, [r8]
 8006870:	e7ec      	b.n	800684c <_malloc_r+0xb0>
 8006872:	4623      	mov	r3, r4
 8006874:	6864      	ldr	r4, [r4, #4]
 8006876:	e7ac      	b.n	80067d2 <_malloc_r+0x36>
 8006878:	4634      	mov	r4, r6
 800687a:	6876      	ldr	r6, [r6, #4]
 800687c:	e7b4      	b.n	80067e8 <_malloc_r+0x4c>
 800687e:	4613      	mov	r3, r2
 8006880:	e7cc      	b.n	800681c <_malloc_r+0x80>
 8006882:	230c      	movs	r3, #12
 8006884:	603b      	str	r3, [r7, #0]
 8006886:	4638      	mov	r0, r7
 8006888:	f000 f80e 	bl	80068a8 <__malloc_unlock>
 800688c:	e797      	b.n	80067be <_malloc_r+0x22>
 800688e:	6025      	str	r5, [r4, #0]
 8006890:	e7dc      	b.n	800684c <_malloc_r+0xb0>
 8006892:	605b      	str	r3, [r3, #4]
 8006894:	deff      	udf	#255	; 0xff
 8006896:	bf00      	nop
 8006898:	200003bc 	.word	0x200003bc

0800689c <__malloc_lock>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__malloc_lock+0x8>)
 800689e:	f7ff bf0f 	b.w	80066c0 <__retarget_lock_acquire_recursive>
 80068a2:	bf00      	nop
 80068a4:	200003b8 	.word	0x200003b8

080068a8 <__malloc_unlock>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__malloc_unlock+0x8>)
 80068aa:	f7ff bf0a 	b.w	80066c2 <__retarget_lock_release_recursive>
 80068ae:	bf00      	nop
 80068b0:	200003b8 	.word	0x200003b8

080068b4 <__ssputs_r>:
 80068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	688e      	ldr	r6, [r1, #8]
 80068ba:	461f      	mov	r7, r3
 80068bc:	42be      	cmp	r6, r7
 80068be:	680b      	ldr	r3, [r1, #0]
 80068c0:	4682      	mov	sl, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	4690      	mov	r8, r2
 80068c6:	d82c      	bhi.n	8006922 <__ssputs_r+0x6e>
 80068c8:	898a      	ldrh	r2, [r1, #12]
 80068ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068ce:	d026      	beq.n	800691e <__ssputs_r+0x6a>
 80068d0:	6965      	ldr	r5, [r4, #20]
 80068d2:	6909      	ldr	r1, [r1, #16]
 80068d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068d8:	eba3 0901 	sub.w	r9, r3, r1
 80068dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068e0:	1c7b      	adds	r3, r7, #1
 80068e2:	444b      	add	r3, r9
 80068e4:	106d      	asrs	r5, r5, #1
 80068e6:	429d      	cmp	r5, r3
 80068e8:	bf38      	it	cc
 80068ea:	461d      	movcc	r5, r3
 80068ec:	0553      	lsls	r3, r2, #21
 80068ee:	d527      	bpl.n	8006940 <__ssputs_r+0x8c>
 80068f0:	4629      	mov	r1, r5
 80068f2:	f7ff ff53 	bl	800679c <_malloc_r>
 80068f6:	4606      	mov	r6, r0
 80068f8:	b360      	cbz	r0, 8006954 <__ssputs_r+0xa0>
 80068fa:	6921      	ldr	r1, [r4, #16]
 80068fc:	464a      	mov	r2, r9
 80068fe:	f000 faeb 	bl	8006ed8 <memcpy>
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	6126      	str	r6, [r4, #16]
 8006910:	6165      	str	r5, [r4, #20]
 8006912:	444e      	add	r6, r9
 8006914:	eba5 0509 	sub.w	r5, r5, r9
 8006918:	6026      	str	r6, [r4, #0]
 800691a:	60a5      	str	r5, [r4, #8]
 800691c:	463e      	mov	r6, r7
 800691e:	42be      	cmp	r6, r7
 8006920:	d900      	bls.n	8006924 <__ssputs_r+0x70>
 8006922:	463e      	mov	r6, r7
 8006924:	6820      	ldr	r0, [r4, #0]
 8006926:	4632      	mov	r2, r6
 8006928:	4641      	mov	r1, r8
 800692a:	f000 faab 	bl	8006e84 <memmove>
 800692e:	68a3      	ldr	r3, [r4, #8]
 8006930:	1b9b      	subs	r3, r3, r6
 8006932:	60a3      	str	r3, [r4, #8]
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	4433      	add	r3, r6
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	2000      	movs	r0, #0
 800693c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006940:	462a      	mov	r2, r5
 8006942:	f000 fad7 	bl	8006ef4 <_realloc_r>
 8006946:	4606      	mov	r6, r0
 8006948:	2800      	cmp	r0, #0
 800694a:	d1e0      	bne.n	800690e <__ssputs_r+0x5a>
 800694c:	6921      	ldr	r1, [r4, #16]
 800694e:	4650      	mov	r0, sl
 8006950:	f7ff feb8 	bl	80066c4 <_free_r>
 8006954:	230c      	movs	r3, #12
 8006956:	f8ca 3000 	str.w	r3, [sl]
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006960:	81a3      	strh	r3, [r4, #12]
 8006962:	f04f 30ff 	mov.w	r0, #4294967295
 8006966:	e7e9      	b.n	800693c <__ssputs_r+0x88>

08006968 <_svfiprintf_r>:
 8006968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	4698      	mov	r8, r3
 800696e:	898b      	ldrh	r3, [r1, #12]
 8006970:	061b      	lsls	r3, r3, #24
 8006972:	b09d      	sub	sp, #116	; 0x74
 8006974:	4607      	mov	r7, r0
 8006976:	460d      	mov	r5, r1
 8006978:	4614      	mov	r4, r2
 800697a:	d50e      	bpl.n	800699a <_svfiprintf_r+0x32>
 800697c:	690b      	ldr	r3, [r1, #16]
 800697e:	b963      	cbnz	r3, 800699a <_svfiprintf_r+0x32>
 8006980:	2140      	movs	r1, #64	; 0x40
 8006982:	f7ff ff0b 	bl	800679c <_malloc_r>
 8006986:	6028      	str	r0, [r5, #0]
 8006988:	6128      	str	r0, [r5, #16]
 800698a:	b920      	cbnz	r0, 8006996 <_svfiprintf_r+0x2e>
 800698c:	230c      	movs	r3, #12
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	e0d0      	b.n	8006b38 <_svfiprintf_r+0x1d0>
 8006996:	2340      	movs	r3, #64	; 0x40
 8006998:	616b      	str	r3, [r5, #20]
 800699a:	2300      	movs	r3, #0
 800699c:	9309      	str	r3, [sp, #36]	; 0x24
 800699e:	2320      	movs	r3, #32
 80069a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80069a8:	2330      	movs	r3, #48	; 0x30
 80069aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006b50 <_svfiprintf_r+0x1e8>
 80069ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069b2:	f04f 0901 	mov.w	r9, #1
 80069b6:	4623      	mov	r3, r4
 80069b8:	469a      	mov	sl, r3
 80069ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069be:	b10a      	cbz	r2, 80069c4 <_svfiprintf_r+0x5c>
 80069c0:	2a25      	cmp	r2, #37	; 0x25
 80069c2:	d1f9      	bne.n	80069b8 <_svfiprintf_r+0x50>
 80069c4:	ebba 0b04 	subs.w	fp, sl, r4
 80069c8:	d00b      	beq.n	80069e2 <_svfiprintf_r+0x7a>
 80069ca:	465b      	mov	r3, fp
 80069cc:	4622      	mov	r2, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff ff6f 	bl	80068b4 <__ssputs_r>
 80069d6:	3001      	adds	r0, #1
 80069d8:	f000 80a9 	beq.w	8006b2e <_svfiprintf_r+0x1c6>
 80069dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069de:	445a      	add	r2, fp
 80069e0:	9209      	str	r2, [sp, #36]	; 0x24
 80069e2:	f89a 3000 	ldrb.w	r3, [sl]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 80a1 	beq.w	8006b2e <_svfiprintf_r+0x1c6>
 80069ec:	2300      	movs	r3, #0
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069f6:	f10a 0a01 	add.w	sl, sl, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	9307      	str	r3, [sp, #28]
 80069fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a02:	931a      	str	r3, [sp, #104]	; 0x68
 8006a04:	4654      	mov	r4, sl
 8006a06:	2205      	movs	r2, #5
 8006a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a0c:	4850      	ldr	r0, [pc, #320]	; (8006b50 <_svfiprintf_r+0x1e8>)
 8006a0e:	f7f9 fc07 	bl	8000220 <memchr>
 8006a12:	9a04      	ldr	r2, [sp, #16]
 8006a14:	b9d8      	cbnz	r0, 8006a4e <_svfiprintf_r+0xe6>
 8006a16:	06d0      	lsls	r0, r2, #27
 8006a18:	bf44      	itt	mi
 8006a1a:	2320      	movmi	r3, #32
 8006a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a20:	0711      	lsls	r1, r2, #28
 8006a22:	bf44      	itt	mi
 8006a24:	232b      	movmi	r3, #43	; 0x2b
 8006a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a30:	d015      	beq.n	8006a5e <_svfiprintf_r+0xf6>
 8006a32:	9a07      	ldr	r2, [sp, #28]
 8006a34:	4654      	mov	r4, sl
 8006a36:	2000      	movs	r0, #0
 8006a38:	f04f 0c0a 	mov.w	ip, #10
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a42:	3b30      	subs	r3, #48	; 0x30
 8006a44:	2b09      	cmp	r3, #9
 8006a46:	d94d      	bls.n	8006ae4 <_svfiprintf_r+0x17c>
 8006a48:	b1b0      	cbz	r0, 8006a78 <_svfiprintf_r+0x110>
 8006a4a:	9207      	str	r2, [sp, #28]
 8006a4c:	e014      	b.n	8006a78 <_svfiprintf_r+0x110>
 8006a4e:	eba0 0308 	sub.w	r3, r0, r8
 8006a52:	fa09 f303 	lsl.w	r3, r9, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	9304      	str	r3, [sp, #16]
 8006a5a:	46a2      	mov	sl, r4
 8006a5c:	e7d2      	b.n	8006a04 <_svfiprintf_r+0x9c>
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	1d19      	adds	r1, r3, #4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	9103      	str	r1, [sp, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfbb      	ittet	lt
 8006a6a:	425b      	neglt	r3, r3
 8006a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a70:	9307      	strge	r3, [sp, #28]
 8006a72:	9307      	strlt	r3, [sp, #28]
 8006a74:	bfb8      	it	lt
 8006a76:	9204      	strlt	r2, [sp, #16]
 8006a78:	7823      	ldrb	r3, [r4, #0]
 8006a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a7c:	d10c      	bne.n	8006a98 <_svfiprintf_r+0x130>
 8006a7e:	7863      	ldrb	r3, [r4, #1]
 8006a80:	2b2a      	cmp	r3, #42	; 0x2a
 8006a82:	d134      	bne.n	8006aee <_svfiprintf_r+0x186>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	1d1a      	adds	r2, r3, #4
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	9203      	str	r2, [sp, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bfb8      	it	lt
 8006a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a94:	3402      	adds	r4, #2
 8006a96:	9305      	str	r3, [sp, #20]
 8006a98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006b60 <_svfiprintf_r+0x1f8>
 8006a9c:	7821      	ldrb	r1, [r4, #0]
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	4650      	mov	r0, sl
 8006aa2:	f7f9 fbbd 	bl	8000220 <memchr>
 8006aa6:	b138      	cbz	r0, 8006ab8 <_svfiprintf_r+0x150>
 8006aa8:	9b04      	ldr	r3, [sp, #16]
 8006aaa:	eba0 000a 	sub.w	r0, r0, sl
 8006aae:	2240      	movs	r2, #64	; 0x40
 8006ab0:	4082      	lsls	r2, r0
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	3401      	adds	r4, #1
 8006ab6:	9304      	str	r3, [sp, #16]
 8006ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006abc:	4825      	ldr	r0, [pc, #148]	; (8006b54 <_svfiprintf_r+0x1ec>)
 8006abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ac2:	2206      	movs	r2, #6
 8006ac4:	f7f9 fbac 	bl	8000220 <memchr>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d038      	beq.n	8006b3e <_svfiprintf_r+0x1d6>
 8006acc:	4b22      	ldr	r3, [pc, #136]	; (8006b58 <_svfiprintf_r+0x1f0>)
 8006ace:	bb1b      	cbnz	r3, 8006b18 <_svfiprintf_r+0x1b0>
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	3307      	adds	r3, #7
 8006ad4:	f023 0307 	bic.w	r3, r3, #7
 8006ad8:	3308      	adds	r3, #8
 8006ada:	9303      	str	r3, [sp, #12]
 8006adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ade:	4433      	add	r3, r6
 8006ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae2:	e768      	b.n	80069b6 <_svfiprintf_r+0x4e>
 8006ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ae8:	460c      	mov	r4, r1
 8006aea:	2001      	movs	r0, #1
 8006aec:	e7a6      	b.n	8006a3c <_svfiprintf_r+0xd4>
 8006aee:	2300      	movs	r3, #0
 8006af0:	3401      	adds	r4, #1
 8006af2:	9305      	str	r3, [sp, #20]
 8006af4:	4619      	mov	r1, r3
 8006af6:	f04f 0c0a 	mov.w	ip, #10
 8006afa:	4620      	mov	r0, r4
 8006afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b00:	3a30      	subs	r2, #48	; 0x30
 8006b02:	2a09      	cmp	r2, #9
 8006b04:	d903      	bls.n	8006b0e <_svfiprintf_r+0x1a6>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0c6      	beq.n	8006a98 <_svfiprintf_r+0x130>
 8006b0a:	9105      	str	r1, [sp, #20]
 8006b0c:	e7c4      	b.n	8006a98 <_svfiprintf_r+0x130>
 8006b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b12:	4604      	mov	r4, r0
 8006b14:	2301      	movs	r3, #1
 8006b16:	e7f0      	b.n	8006afa <_svfiprintf_r+0x192>
 8006b18:	ab03      	add	r3, sp, #12
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	462a      	mov	r2, r5
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <_svfiprintf_r+0x1f4>)
 8006b20:	a904      	add	r1, sp, #16
 8006b22:	4638      	mov	r0, r7
 8006b24:	f3af 8000 	nop.w
 8006b28:	1c42      	adds	r2, r0, #1
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	d1d6      	bne.n	8006adc <_svfiprintf_r+0x174>
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	065b      	lsls	r3, r3, #25
 8006b32:	f53f af2d 	bmi.w	8006990 <_svfiprintf_r+0x28>
 8006b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b38:	b01d      	add	sp, #116	; 0x74
 8006b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3e:	ab03      	add	r3, sp, #12
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	462a      	mov	r2, r5
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <_svfiprintf_r+0x1f4>)
 8006b46:	a904      	add	r1, sp, #16
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f000 f879 	bl	8006c40 <_printf_i>
 8006b4e:	e7eb      	b.n	8006b28 <_svfiprintf_r+0x1c0>
 8006b50:	0800722c 	.word	0x0800722c
 8006b54:	08007236 	.word	0x08007236
 8006b58:	00000000 	.word	0x00000000
 8006b5c:	080068b5 	.word	0x080068b5
 8006b60:	08007232 	.word	0x08007232

08006b64 <_printf_common>:
 8006b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	4616      	mov	r6, r2
 8006b6a:	4699      	mov	r9, r3
 8006b6c:	688a      	ldr	r2, [r1, #8]
 8006b6e:	690b      	ldr	r3, [r1, #16]
 8006b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	bfb8      	it	lt
 8006b78:	4613      	movlt	r3, r2
 8006b7a:	6033      	str	r3, [r6, #0]
 8006b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b80:	4607      	mov	r7, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	b10a      	cbz	r2, 8006b8a <_printf_common+0x26>
 8006b86:	3301      	adds	r3, #1
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	0699      	lsls	r1, r3, #26
 8006b8e:	bf42      	ittt	mi
 8006b90:	6833      	ldrmi	r3, [r6, #0]
 8006b92:	3302      	addmi	r3, #2
 8006b94:	6033      	strmi	r3, [r6, #0]
 8006b96:	6825      	ldr	r5, [r4, #0]
 8006b98:	f015 0506 	ands.w	r5, r5, #6
 8006b9c:	d106      	bne.n	8006bac <_printf_common+0x48>
 8006b9e:	f104 0a19 	add.w	sl, r4, #25
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	6832      	ldr	r2, [r6, #0]
 8006ba6:	1a9b      	subs	r3, r3, r2
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	dc26      	bgt.n	8006bfa <_printf_common+0x96>
 8006bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bb0:	1e13      	subs	r3, r2, #0
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	bf18      	it	ne
 8006bb6:	2301      	movne	r3, #1
 8006bb8:	0692      	lsls	r2, r2, #26
 8006bba:	d42b      	bmi.n	8006c14 <_printf_common+0xb0>
 8006bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	47c0      	blx	r8
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d01e      	beq.n	8006c08 <_printf_common+0xa4>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	6922      	ldr	r2, [r4, #16]
 8006bce:	f003 0306 	and.w	r3, r3, #6
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	bf02      	ittt	eq
 8006bd6:	68e5      	ldreq	r5, [r4, #12]
 8006bd8:	6833      	ldreq	r3, [r6, #0]
 8006bda:	1aed      	subeq	r5, r5, r3
 8006bdc:	68a3      	ldr	r3, [r4, #8]
 8006bde:	bf0c      	ite	eq
 8006be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be4:	2500      	movne	r5, #0
 8006be6:	4293      	cmp	r3, r2
 8006be8:	bfc4      	itt	gt
 8006bea:	1a9b      	subgt	r3, r3, r2
 8006bec:	18ed      	addgt	r5, r5, r3
 8006bee:	2600      	movs	r6, #0
 8006bf0:	341a      	adds	r4, #26
 8006bf2:	42b5      	cmp	r5, r6
 8006bf4:	d11a      	bne.n	8006c2c <_printf_common+0xc8>
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	e008      	b.n	8006c0c <_printf_common+0xa8>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4649      	mov	r1, r9
 8006c00:	4638      	mov	r0, r7
 8006c02:	47c0      	blx	r8
 8006c04:	3001      	adds	r0, #1
 8006c06:	d103      	bne.n	8006c10 <_printf_common+0xac>
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c10:	3501      	adds	r5, #1
 8006c12:	e7c6      	b.n	8006ba2 <_printf_common+0x3e>
 8006c14:	18e1      	adds	r1, r4, r3
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	2030      	movs	r0, #48	; 0x30
 8006c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c1e:	4422      	add	r2, r4
 8006c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c28:	3302      	adds	r3, #2
 8006c2a:	e7c7      	b.n	8006bbc <_printf_common+0x58>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4622      	mov	r2, r4
 8006c30:	4649      	mov	r1, r9
 8006c32:	4638      	mov	r0, r7
 8006c34:	47c0      	blx	r8
 8006c36:	3001      	adds	r0, #1
 8006c38:	d0e6      	beq.n	8006c08 <_printf_common+0xa4>
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7d9      	b.n	8006bf2 <_printf_common+0x8e>
	...

08006c40 <_printf_i>:
 8006c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	7e0f      	ldrb	r7, [r1, #24]
 8006c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c48:	2f78      	cmp	r7, #120	; 0x78
 8006c4a:	4691      	mov	r9, r2
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	469a      	mov	sl, r3
 8006c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c56:	d807      	bhi.n	8006c68 <_printf_i+0x28>
 8006c58:	2f62      	cmp	r7, #98	; 0x62
 8006c5a:	d80a      	bhi.n	8006c72 <_printf_i+0x32>
 8006c5c:	2f00      	cmp	r7, #0
 8006c5e:	f000 80d4 	beq.w	8006e0a <_printf_i+0x1ca>
 8006c62:	2f58      	cmp	r7, #88	; 0x58
 8006c64:	f000 80c0 	beq.w	8006de8 <_printf_i+0x1a8>
 8006c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c70:	e03a      	b.n	8006ce8 <_printf_i+0xa8>
 8006c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c76:	2b15      	cmp	r3, #21
 8006c78:	d8f6      	bhi.n	8006c68 <_printf_i+0x28>
 8006c7a:	a101      	add	r1, pc, #4	; (adr r1, 8006c80 <_printf_i+0x40>)
 8006c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c80:	08006cd9 	.word	0x08006cd9
 8006c84:	08006ced 	.word	0x08006ced
 8006c88:	08006c69 	.word	0x08006c69
 8006c8c:	08006c69 	.word	0x08006c69
 8006c90:	08006c69 	.word	0x08006c69
 8006c94:	08006c69 	.word	0x08006c69
 8006c98:	08006ced 	.word	0x08006ced
 8006c9c:	08006c69 	.word	0x08006c69
 8006ca0:	08006c69 	.word	0x08006c69
 8006ca4:	08006c69 	.word	0x08006c69
 8006ca8:	08006c69 	.word	0x08006c69
 8006cac:	08006df1 	.word	0x08006df1
 8006cb0:	08006d19 	.word	0x08006d19
 8006cb4:	08006dab 	.word	0x08006dab
 8006cb8:	08006c69 	.word	0x08006c69
 8006cbc:	08006c69 	.word	0x08006c69
 8006cc0:	08006e13 	.word	0x08006e13
 8006cc4:	08006c69 	.word	0x08006c69
 8006cc8:	08006d19 	.word	0x08006d19
 8006ccc:	08006c69 	.word	0x08006c69
 8006cd0:	08006c69 	.word	0x08006c69
 8006cd4:	08006db3 	.word	0x08006db3
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	1d1a      	adds	r2, r3, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	602a      	str	r2, [r5, #0]
 8006ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e09f      	b.n	8006e2c <_printf_i+0x1ec>
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	682b      	ldr	r3, [r5, #0]
 8006cf0:	0607      	lsls	r7, r0, #24
 8006cf2:	f103 0104 	add.w	r1, r3, #4
 8006cf6:	6029      	str	r1, [r5, #0]
 8006cf8:	d501      	bpl.n	8006cfe <_printf_i+0xbe>
 8006cfa:	681e      	ldr	r6, [r3, #0]
 8006cfc:	e003      	b.n	8006d06 <_printf_i+0xc6>
 8006cfe:	0646      	lsls	r6, r0, #25
 8006d00:	d5fb      	bpl.n	8006cfa <_printf_i+0xba>
 8006d02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d06:	2e00      	cmp	r6, #0
 8006d08:	da03      	bge.n	8006d12 <_printf_i+0xd2>
 8006d0a:	232d      	movs	r3, #45	; 0x2d
 8006d0c:	4276      	negs	r6, r6
 8006d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d12:	485a      	ldr	r0, [pc, #360]	; (8006e7c <_printf_i+0x23c>)
 8006d14:	230a      	movs	r3, #10
 8006d16:	e012      	b.n	8006d3e <_printf_i+0xfe>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	1d19      	adds	r1, r3, #4
 8006d1e:	6029      	str	r1, [r5, #0]
 8006d20:	0605      	lsls	r5, r0, #24
 8006d22:	d501      	bpl.n	8006d28 <_printf_i+0xe8>
 8006d24:	681e      	ldr	r6, [r3, #0]
 8006d26:	e002      	b.n	8006d2e <_printf_i+0xee>
 8006d28:	0641      	lsls	r1, r0, #25
 8006d2a:	d5fb      	bpl.n	8006d24 <_printf_i+0xe4>
 8006d2c:	881e      	ldrh	r6, [r3, #0]
 8006d2e:	4853      	ldr	r0, [pc, #332]	; (8006e7c <_printf_i+0x23c>)
 8006d30:	2f6f      	cmp	r7, #111	; 0x6f
 8006d32:	bf0c      	ite	eq
 8006d34:	2308      	moveq	r3, #8
 8006d36:	230a      	movne	r3, #10
 8006d38:	2100      	movs	r1, #0
 8006d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d3e:	6865      	ldr	r5, [r4, #4]
 8006d40:	60a5      	str	r5, [r4, #8]
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	bfa2      	ittt	ge
 8006d46:	6821      	ldrge	r1, [r4, #0]
 8006d48:	f021 0104 	bicge.w	r1, r1, #4
 8006d4c:	6021      	strge	r1, [r4, #0]
 8006d4e:	b90e      	cbnz	r6, 8006d54 <_printf_i+0x114>
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	d04b      	beq.n	8006dec <_printf_i+0x1ac>
 8006d54:	4615      	mov	r5, r2
 8006d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8006d5e:	5dc7      	ldrb	r7, [r0, r7]
 8006d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d64:	4637      	mov	r7, r6
 8006d66:	42bb      	cmp	r3, r7
 8006d68:	460e      	mov	r6, r1
 8006d6a:	d9f4      	bls.n	8006d56 <_printf_i+0x116>
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d10b      	bne.n	8006d88 <_printf_i+0x148>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	07de      	lsls	r6, r3, #31
 8006d74:	d508      	bpl.n	8006d88 <_printf_i+0x148>
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	6861      	ldr	r1, [r4, #4]
 8006d7a:	4299      	cmp	r1, r3
 8006d7c:	bfde      	ittt	le
 8006d7e:	2330      	movle	r3, #48	; 0x30
 8006d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d88:	1b52      	subs	r2, r2, r5
 8006d8a:	6122      	str	r2, [r4, #16]
 8006d8c:	f8cd a000 	str.w	sl, [sp]
 8006d90:	464b      	mov	r3, r9
 8006d92:	aa03      	add	r2, sp, #12
 8006d94:	4621      	mov	r1, r4
 8006d96:	4640      	mov	r0, r8
 8006d98:	f7ff fee4 	bl	8006b64 <_printf_common>
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d14a      	bne.n	8006e36 <_printf_i+0x1f6>
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	b004      	add	sp, #16
 8006da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	f043 0320 	orr.w	r3, r3, #32
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	4833      	ldr	r0, [pc, #204]	; (8006e80 <_printf_i+0x240>)
 8006db4:	2778      	movs	r7, #120	; 0x78
 8006db6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	6829      	ldr	r1, [r5, #0]
 8006dbe:	061f      	lsls	r7, r3, #24
 8006dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dc4:	d402      	bmi.n	8006dcc <_printf_i+0x18c>
 8006dc6:	065f      	lsls	r7, r3, #25
 8006dc8:	bf48      	it	mi
 8006dca:	b2b6      	uxthmi	r6, r6
 8006dcc:	07df      	lsls	r7, r3, #31
 8006dce:	bf48      	it	mi
 8006dd0:	f043 0320 	orrmi.w	r3, r3, #32
 8006dd4:	6029      	str	r1, [r5, #0]
 8006dd6:	bf48      	it	mi
 8006dd8:	6023      	strmi	r3, [r4, #0]
 8006dda:	b91e      	cbnz	r6, 8006de4 <_printf_i+0x1a4>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	f023 0320 	bic.w	r3, r3, #32
 8006de2:	6023      	str	r3, [r4, #0]
 8006de4:	2310      	movs	r3, #16
 8006de6:	e7a7      	b.n	8006d38 <_printf_i+0xf8>
 8006de8:	4824      	ldr	r0, [pc, #144]	; (8006e7c <_printf_i+0x23c>)
 8006dea:	e7e4      	b.n	8006db6 <_printf_i+0x176>
 8006dec:	4615      	mov	r5, r2
 8006dee:	e7bd      	b.n	8006d6c <_printf_i+0x12c>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	6826      	ldr	r6, [r4, #0]
 8006df4:	6961      	ldr	r1, [r4, #20]
 8006df6:	1d18      	adds	r0, r3, #4
 8006df8:	6028      	str	r0, [r5, #0]
 8006dfa:	0635      	lsls	r5, r6, #24
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	d501      	bpl.n	8006e04 <_printf_i+0x1c4>
 8006e00:	6019      	str	r1, [r3, #0]
 8006e02:	e002      	b.n	8006e0a <_printf_i+0x1ca>
 8006e04:	0670      	lsls	r0, r6, #25
 8006e06:	d5fb      	bpl.n	8006e00 <_printf_i+0x1c0>
 8006e08:	8019      	strh	r1, [r3, #0]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	6123      	str	r3, [r4, #16]
 8006e0e:	4615      	mov	r5, r2
 8006e10:	e7bc      	b.n	8006d8c <_printf_i+0x14c>
 8006e12:	682b      	ldr	r3, [r5, #0]
 8006e14:	1d1a      	adds	r2, r3, #4
 8006e16:	602a      	str	r2, [r5, #0]
 8006e18:	681d      	ldr	r5, [r3, #0]
 8006e1a:	6862      	ldr	r2, [r4, #4]
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f7f9 f9fe 	bl	8000220 <memchr>
 8006e24:	b108      	cbz	r0, 8006e2a <_printf_i+0x1ea>
 8006e26:	1b40      	subs	r0, r0, r5
 8006e28:	6060      	str	r0, [r4, #4]
 8006e2a:	6863      	ldr	r3, [r4, #4]
 8006e2c:	6123      	str	r3, [r4, #16]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e34:	e7aa      	b.n	8006d8c <_printf_i+0x14c>
 8006e36:	6923      	ldr	r3, [r4, #16]
 8006e38:	462a      	mov	r2, r5
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	47d0      	blx	sl
 8006e40:	3001      	adds	r0, #1
 8006e42:	d0ad      	beq.n	8006da0 <_printf_i+0x160>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	079b      	lsls	r3, r3, #30
 8006e48:	d413      	bmi.n	8006e72 <_printf_i+0x232>
 8006e4a:	68e0      	ldr	r0, [r4, #12]
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	4298      	cmp	r0, r3
 8006e50:	bfb8      	it	lt
 8006e52:	4618      	movlt	r0, r3
 8006e54:	e7a6      	b.n	8006da4 <_printf_i+0x164>
 8006e56:	2301      	movs	r3, #1
 8006e58:	4632      	mov	r2, r6
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	47d0      	blx	sl
 8006e60:	3001      	adds	r0, #1
 8006e62:	d09d      	beq.n	8006da0 <_printf_i+0x160>
 8006e64:	3501      	adds	r5, #1
 8006e66:	68e3      	ldr	r3, [r4, #12]
 8006e68:	9903      	ldr	r1, [sp, #12]
 8006e6a:	1a5b      	subs	r3, r3, r1
 8006e6c:	42ab      	cmp	r3, r5
 8006e6e:	dcf2      	bgt.n	8006e56 <_printf_i+0x216>
 8006e70:	e7eb      	b.n	8006e4a <_printf_i+0x20a>
 8006e72:	2500      	movs	r5, #0
 8006e74:	f104 0619 	add.w	r6, r4, #25
 8006e78:	e7f5      	b.n	8006e66 <_printf_i+0x226>
 8006e7a:	bf00      	nop
 8006e7c:	0800723d 	.word	0x0800723d
 8006e80:	0800724e 	.word	0x0800724e

08006e84 <memmove>:
 8006e84:	4288      	cmp	r0, r1
 8006e86:	b510      	push	{r4, lr}
 8006e88:	eb01 0402 	add.w	r4, r1, r2
 8006e8c:	d902      	bls.n	8006e94 <memmove+0x10>
 8006e8e:	4284      	cmp	r4, r0
 8006e90:	4623      	mov	r3, r4
 8006e92:	d807      	bhi.n	8006ea4 <memmove+0x20>
 8006e94:	1e43      	subs	r3, r0, #1
 8006e96:	42a1      	cmp	r1, r4
 8006e98:	d008      	beq.n	8006eac <memmove+0x28>
 8006e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ea2:	e7f8      	b.n	8006e96 <memmove+0x12>
 8006ea4:	4402      	add	r2, r0
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	428a      	cmp	r2, r1
 8006eaa:	d100      	bne.n	8006eae <memmove+0x2a>
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eb6:	e7f7      	b.n	8006ea8 <memmove+0x24>

08006eb8 <_sbrk_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4d06      	ldr	r5, [pc, #24]	; (8006ed4 <_sbrk_r+0x1c>)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	602b      	str	r3, [r5, #0]
 8006ec4:	f7f9 feb0 	bl	8000c28 <_sbrk>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_sbrk_r+0x1a>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_sbrk_r+0x1a>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	200003b4 	.word	0x200003b4

08006ed8 <memcpy>:
 8006ed8:	440a      	add	r2, r1
 8006eda:	4291      	cmp	r1, r2
 8006edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee0:	d100      	bne.n	8006ee4 <memcpy+0xc>
 8006ee2:	4770      	bx	lr
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eee:	4291      	cmp	r1, r2
 8006ef0:	d1f9      	bne.n	8006ee6 <memcpy+0xe>
 8006ef2:	bd10      	pop	{r4, pc}

08006ef4 <_realloc_r>:
 8006ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef8:	4680      	mov	r8, r0
 8006efa:	4614      	mov	r4, r2
 8006efc:	460e      	mov	r6, r1
 8006efe:	b921      	cbnz	r1, 8006f0a <_realloc_r+0x16>
 8006f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	4611      	mov	r1, r2
 8006f06:	f7ff bc49 	b.w	800679c <_malloc_r>
 8006f0a:	b92a      	cbnz	r2, 8006f18 <_realloc_r+0x24>
 8006f0c:	f7ff fbda 	bl	80066c4 <_free_r>
 8006f10:	4625      	mov	r5, r4
 8006f12:	4628      	mov	r0, r5
 8006f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f18:	f000 f81b 	bl	8006f52 <_malloc_usable_size_r>
 8006f1c:	4284      	cmp	r4, r0
 8006f1e:	4607      	mov	r7, r0
 8006f20:	d802      	bhi.n	8006f28 <_realloc_r+0x34>
 8006f22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f26:	d812      	bhi.n	8006f4e <_realloc_r+0x5a>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	f7ff fc36 	bl	800679c <_malloc_r>
 8006f30:	4605      	mov	r5, r0
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d0ed      	beq.n	8006f12 <_realloc_r+0x1e>
 8006f36:	42bc      	cmp	r4, r7
 8006f38:	4622      	mov	r2, r4
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	bf28      	it	cs
 8006f3e:	463a      	movcs	r2, r7
 8006f40:	f7ff ffca 	bl	8006ed8 <memcpy>
 8006f44:	4631      	mov	r1, r6
 8006f46:	4640      	mov	r0, r8
 8006f48:	f7ff fbbc 	bl	80066c4 <_free_r>
 8006f4c:	e7e1      	b.n	8006f12 <_realloc_r+0x1e>
 8006f4e:	4635      	mov	r5, r6
 8006f50:	e7df      	b.n	8006f12 <_realloc_r+0x1e>

08006f52 <_malloc_usable_size_r>:
 8006f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f56:	1f18      	subs	r0, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bfbc      	itt	lt
 8006f5c:	580b      	ldrlt	r3, [r1, r0]
 8006f5e:	18c0      	addlt	r0, r0, r3
 8006f60:	4770      	bx	lr
	...

08006f64 <_init>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	bf00      	nop
 8006f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6a:	bc08      	pop	{r3}
 8006f6c:	469e      	mov	lr, r3
 8006f6e:	4770      	bx	lr

08006f70 <_fini>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	bf00      	nop
 8006f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f76:	bc08      	pop	{r3}
 8006f78:	469e      	mov	lr, r3
 8006f7a:	4770      	bx	lr
